-- =============================================
--SECTION 1: CORE ENTITY
-- =============================================

USE astro_db;

-- Set timezone for consistent timestamp handling
SET time_zone = '+00:00'

-- =============================================
-- PERSON TABLES
-- =============================================

-- Person: Individual people (artists, writers, etc.)
CREATE TABLE person (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    person_type_id TINYINT NOT NULL,
    prefix VARCHAR(20) NULL,
    first_name VARCHAR(100) NOT NULL COMMENT 'ENCRYPTED',
    middle_name VARCHAR(100) NULL COMMENT 'ENCRYPTED',
    last_name VARCHAR(100) NOT NULL COMMENT 'ENCRYPTED',
    suffix VARCHAR(20) NULL,
    full_name VARCHAR(300) GENERATED ALWAYS AS (
        TRIM(CONCAT_WS(' ', 
            NULLIF(prefix, ''),
            NULLIF(first_name, ''),
            NULLIF(middle_name, ''),
            NULLIF(last_name, ''),
            NULLIF(suffix, '')
        ))
    ) STORED,
    stage_name VARCHAR(200) NULL,
    sort_name VARCHAR(200) NULL,
    birth_date DATE NULL COMMENT 'ENCRYPTED',
    death_date DATE NULL,
    birth_place VARCHAR(200) NULL COMMENT 'ENCRYPTED',
    nationality_country_id CHAR(3) NULL,
    tax_id VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    email VARCHAR(255) NULL UNIQUE COMMENT 'ENCRYPTED',
    phone VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    website VARCHAR(255) NULL,
    biography TEXT NULL,
    image_url VARCHAR(500) NULL,
    gender VARCHAR(20) NULL,
    pronoun_id TINYINT NULL,
    membership_organizations JSON NULL,
    skills JSON NULL,
    languages_spoken JSON NULL,
    emergency_contact_id BIGINT UNSIGNED NULL,
    notes TEXT NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check DATETIME NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_person_type FOREIGN KEY (person_type_id) REFERENCES resource_db.person_type(id),
    CONSTRAINT fk_person_country FOREIGN KEY (nationality_country_id) REFERENCES resource_db.country(id),
    CONSTRAINT fk_person_pronoun FOREIGN KEY (pronoun_id) REFERENCES resource_db.pronoun(id),
    CONSTRAINT fk_person_emergency_contact FOREIGN KEY (emergency_contact_id) REFERENCES contact(id),
    CONSTRAINT fk_person_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_person_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_person_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_person_type (person_type_id),
    INDEX idx_person_full_name (full_name),
    INDEX idx_person_stage_name (stage_name),
    INDEX idx_person_sort_name (sort_name),
    INDEX idx_person_email (email),
    INDEX idx_person_active_deleted (is_active, is_deleted),
    INDEX idx_person_created_at (created_at),
    INDEX idx_person_updated_at (updated_at),
    INDEX idx_person_row_hash (row_hash),
    FULLTEXT INDEX ft_person_search (stage_name, sort_name, biography)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Person History
CREATE TABLE person_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    person_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_person_history_person FOREIGN KEY (person_id) REFERENCES person(id),
    CONSTRAINT fk_person_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_person_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_person_history_person (person_id),
    INDEX idx_person_history_changed_at (changed_at),
    INDEX idx_person_history_changed_by (changed_by),
    INDEX idx_person_history_change_type (change_type_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Person Role: Links person to various roles
CREATE TABLE person_role (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    person_id BIGINT UNSIGNED NOT NULL,
    role_type VARCHAR(50) NOT NULL,
    role_id BIGINT UNSIGNED NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    start_date DATE NULL,
    end_date DATE NULL,
    notes TEXT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_person_role_person FOREIGN KEY (person_id) REFERENCES person(id),
    CONSTRAINT fk_person_role_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_person_role_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_person_role_person (person_id),
    INDEX idx_person_role_type_id (role_type, role_id),
    INDEX idx_person_role_dates (start_date, end_date),
    INDEX idx_person_role_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- ORGANIZATION TABLES
-- =============================================

-- Organization: Companies (labels, publishers, etc.)
CREATE TABLE organization (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    organization_type_id TINYINT NOT NULL,
    parent_organization_id BIGINT UNSIGNED NULL,
    legal_name VARCHAR(300) NOT NULL COMMENT 'ENCRYPTED',
    trade_name VARCHAR(300) NULL,
    display_name VARCHAR(300) NOT NULL,
    sort_name VARCHAR(300) NULL,
    abbreviation VARCHAR(50) NULL,
    registration_number VARCHAR(100) NULL COMMENT 'ENCRYPTED',
    tax_id VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    vat_number VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    founded_date DATE NULL,
    dissolved_date DATE NULL,
    country_id CHAR(3) NOT NULL,
    jurisdiction_state VARCHAR(100) NULL,
    isni VARCHAR(19) NULL UNIQUE,
    lei_code VARCHAR(20) NULL UNIQUE,
    duns_number VARCHAR(9) NULL,
    email VARCHAR(255) NULL COMMENT 'ENCRYPTED',
    phone VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    website VARCHAR(255) NULL,
    description TEXT NULL,
    logo_url VARCHAR(500) NULL,
    employee_count INT NULL,
    annual_revenue DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check DATETIME NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_organization_type FOREIGN KEY (organization_type_id) REFERENCES resource_db.organization_type(id),
    CONSTRAINT fk_organization_parent FOREIGN KEY (parent_organization_id) REFERENCES organization(id),
    CONSTRAINT fk_organization_country FOREIGN KEY (country_id) REFERENCES resource_db.country(id),
    CONSTRAINT fk_organization_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_organization_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_organization_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_organization_type (organization_type_id),
    INDEX idx_organization_parent (parent_organization_id),
    INDEX idx_organization_country (country_id),
    INDEX idx_organization_display_name (display_name),
    INDEX idx_organization_sort_name (sort_name),
    INDEX idx_organization_tax_id (tax_id),
    INDEX idx_organization_isni (isni),
    INDEX idx_organization_lei (lei_code),
    INDEX idx_organization_active_deleted (is_active, is_deleted),
    INDEX idx_organization_created_at (created_at),
    FULLTEXT INDEX ft_organization_search (display_name, trade_name, description)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Organization History
CREATE TABLE organization_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    organization_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_organization_history_org FOREIGN KEY (organization_id) REFERENCES organization(id),
    CONSTRAINT fk_organization_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_organization_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_organization_history_org (organization_id),
    INDEX idx_organization_history_changed_at (changed_at),
    INDEX idx_organization_history_changed_by (changed_by)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Organization Person: Personnel/positions
CREATE TABLE organization_person (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    organization_id BIGINT UNSIGNED NOT NULL,
    person_id BIGINT UNSIGNED NOT NULL,
    position_title VARCHAR(100) NOT NULL,
    department VARCHAR(100) NULL,
    is_primary_contact BOOLEAN DEFAULT FALSE,
    is_signatory BOOLEAN DEFAULT FALSE,
    start_date DATE NULL,
    end_date DATE NULL,
    notes TEXT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_org_person_organization FOREIGN KEY (organization_id) REFERENCES organization(id),
    CONSTRAINT fk_org_person_person FOREIGN KEY (person_id) REFERENCES person(id),
    CONSTRAINT fk_org_person_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_org_person_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_org_person_organization (organization_id),
    INDEX idx_org_person_person (person_id),
    INDEX idx_org_person_primary (is_primary_contact),
    INDEX idx_org_person_dates (start_date, end_date),
    INDEX idx_org_person_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- CONTACT & ADDRESS TABLES
-- =============================================

-- Contact: Contact information
CREATE TABLE contact (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    contact_type_id TINYINT NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    attention_to VARCHAR(200) NULL COMMENT 'ENCRYPTED',
    department VARCHAR(100) NULL,
    email VARCHAR(255) NULL COMMENT 'ENCRYPTED',
    phone VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    phone_extension VARCHAR(10) NULL,
    mobile VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    fax VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    address_id BIGINT UNSIGNED NULL,
    notes TEXT NULL COMMENT 'ENCRYPTED',
    valid_from DATE NULL,
    valid_to DATE NULL,
    is_encrypted BOOLEAN DEFAULT TRUE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_contact_type FOREIGN KEY (contact_type_id) REFERENCES resource_db.contact_type(id),
    CONSTRAINT fk_contact_address FOREIGN KEY (address_id) REFERENCES address(id),
    CONSTRAINT fk_contact_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_contact_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_contact_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_contact_entity (entity_type, entity_id),
    INDEX idx_contact_type (contact_type_id),
    INDEX idx_contact_primary (is_primary),
    INDEX idx_contact_email (email),
    INDEX idx_contact_phone (phone),
    INDEX idx_contact_valid_dates (valid_from, valid_to),
    INDEX idx_contact_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Contact History
CREATE TABLE contact_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    contact_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_contact_history_contact FOREIGN KEY (contact_id) REFERENCES contact(id),
    CONSTRAINT fk_contact_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_contact_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_contact_history_contact (contact_id),
    INDEX idx_contact_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Address: Physical addresses
CREATE TABLE address (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    address_type_id TINYINT NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    address_line_1 VARCHAR(255) NOT NULL COMMENT 'ENCRYPTED',
    address_line_2 VARCHAR(255) NULL COMMENT 'ENCRYPTED',
    address_line_3 VARCHAR(255) NULL COMMENT 'ENCRYPTED',
    city VARCHAR(100) NOT NULL COMMENT 'ENCRYPTED',
    state_province VARCHAR(100) NULL COMMENT 'ENCRYPTED',
    postal_code VARCHAR(20) NULL COMMENT 'ENCRYPTED',
    country_id CHAR(3) NOT NULL,
    subdivision_id INT NULL,
    county VARCHAR(100) NULL,
    latitude DECIMAL(10,8) NULL,
    longitude DECIMAL(11,8) NULL,
    timezone VARCHAR(50) NULL,
    valid_from DATE NULL,
    valid_to DATE NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    is_encrypted BOOLEAN DEFAULT TRUE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_address_type FOREIGN KEY (address_type_id) REFERENCES resource_db.address_type(id),
    CONSTRAINT fk_address_country FOREIGN KEY (country_id) REFERENCES resource_db.country(id),
    CONSTRAINT fk_address_subdivision FOREIGN KEY (subdivision_id) REFERENCES resource_db.country_subdivision(id),
    CONSTRAINT fk_address_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_address_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_address_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_address_entity (entity_type, entity_id),
    INDEX idx_address_type (address_type_id),
    INDEX idx_address_country (country_id),
    INDEX idx_address_postal_code (postal_code),
    INDEX idx_address_city_state (city, state_province),
    INDEX idx_address_geo (latitude, longitude),
    INDEX idx_address_primary (is_primary),
    INDEX idx_address_valid_dates (valid_from, valid_to),
    INDEX idx_address_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Address History
CREATE TABLE address_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    address_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_address_history_address FOREIGN KEY (address_id) REFERENCES address(id),
    CONSTRAINT fk_address_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_address_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_address_history_address (address_id),
    INDEX idx_address_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- FINANCIAL TABLES
-- =============================================

-- Bank Account: Banking information
CREATE TABLE bank_account (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    bank_account_type_id TINYINT NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    account_name VARCHAR(200) NOT NULL COMMENT 'ENCRYPTED',
    bank_name VARCHAR(200) NOT NULL COMMENT 'ENCRYPTED',
    bank_address TEXT NULL COMMENT 'ENCRYPTED',
    account_number VARCHAR(50) NOT NULL COMMENT 'ENCRYPTED',
    routing_number VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    iban VARCHAR(34) NULL COMMENT 'ENCRYPTED',
    swift_code VARCHAR(11) NULL COMMENT 'ENCRYPTED',
    bic_code VARCHAR(11) NULL COMMENT 'ENCRYPTED',
    sort_code VARCHAR(10) NULL COMMENT 'ENCRYPTED',
    branch_code VARCHAR(20) NULL COMMENT 'ENCRYPTED',
    currency_id CHAR(3) NOT NULL,
    country_id CHAR(3) NOT NULL,
    valid_from DATE NULL,
    valid_to DATE NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_method VARCHAR(50) NULL,
    is_encrypted BOOLEAN DEFAULT TRUE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_bank_account_type FOREIGN KEY (bank_account_type_id) REFERENCES resource_db.bank_account_type(id),
    CONSTRAINT fk_bank_account_currency FOREIGN KEY (currency_id) REFERENCES resource_db.currency(id),
    CONSTRAINT fk_bank_account_country FOREIGN KEY (country_id) REFERENCES resource_db.country(id),
    CONSTRAINT fk_bank_account_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_bank_account_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_bank_account_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_bank_account_entity (entity_type, entity_id),
    INDEX idx_bank_account_type (bank_account_type_id),
    INDEX idx_bank_account_currency (currency_id),
    INDEX idx_bank_account_country (country_id),
    INDEX idx_bank_account_primary (is_primary),
    INDEX idx_bank_account_valid_dates (valid_from, valid_to),
    INDEX idx_bank_account_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Bank Account History
CREATE TABLE bank_account_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    bank_account_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_bank_account_history_account FOREIGN KEY (bank_account_id) REFERENCES bank_account(id),
    CONSTRAINT fk_bank_account_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_bank_account_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_bank_account_history_account (bank_account_id),
    INDEX idx_bank_account_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Credit Card: Credit card information
CREATE TABLE credit_card (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    card_type_id TINYINT NOT NULL,
    cardholder_name VARCHAR(200) NOT NULL COMMENT 'ENCRYPTED',
    card_number_last4 CHAR(4) NOT NULL,
    card_token VARCHAR(100) NOT NULL COMMENT 'ENCRYPTED',
    expiry_month TINYINT NOT NULL COMMENT 'ENCRYPTED',
    expiry_year SMALLINT NOT NULL COMMENT 'ENCRYPTED',
    billing_address_id BIGINT UNSIGNED NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_credit_card_type FOREIGN KEY (card_type_id) REFERENCES resource_db.card_type(id),
    CONSTRAINT fk_credit_card_billing_address FOREIGN KEY (billing_address_id) REFERENCES address(id),
    CONSTRAINT fk_credit_card_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_credit_card_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_credit_card_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_credit_card_entity (entity_type, entity_id),
    INDEX idx_credit_card_type (card_type_id),
    INDEX idx_credit_card_primary (is_primary),
    INDEX idx_credit_card_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- WORK TABLES
-- =============================================

-- Work: Musical compositions
CREATE TABLE work (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    work_type_id TINYINT NOT NULL,
    parent_work_id BIGINT UNSIGNED NULL,
    title VARCHAR(500) NOT NULL,
    subtitle VARCHAR(500) NULL,
    alternate_title VARCHAR(500) NULL,
    original_title VARCHAR(500) NULL,
    iswc VARCHAR(15) NULL UNIQUE,
    iswc_status VARCHAR(20) NULL,
    custom_work_id VARCHAR(50) NULL,
    opus_number VARCHAR(50) NULL,
    catalogue_number VARCHAR(50) NULL,
    duration_seconds INT NULL,
    duration_string VARCHAR(10) NULL,
    year_created YEAR NULL,
    date_created DATE NULL,
    language_id CHAR(3) NULL,
    original_language_id CHAR(3) NULL,
    lyrics TEXT NULL COMMENT 'ENCRYPTED',
    notes TEXT NULL,
    copyright_date DATE NULL,
    copyright_notice TEXT NULL,
    public_domain BOOLEAN DEFAULT FALSE,
    public_domain_date DATE NULL,
    genre_id INT NULL,
    subgenre_id INT NULL,
    mood_id TINYINT NULL,
    tempo_id TINYINT NULL,
    key_signature_id TINYINT NULL,
    time_signature_id TINYINT NULL,
    structure JSON NULL,
    instrumentation JSON NULL,
    is_instrumental BOOLEAN DEFAULT FALSE,
    is_medley BOOLEAN DEFAULT FALSE,
    is_potpourri BOOLEAN DEFAULT FALSE,
    is_arrangement BOOLEAN DEFAULT FALSE,
    is_adaptation BOOLEAN DEFAULT FALSE,
    is_translated BOOLEAN DEFAULT FALSE,
    has_samples BOOLEAN DEFAULT FALSE,
    explicit_content BOOLEAN DEFAULT FALSE,
    religious_content BOOLEAN DEFAULT FALSE,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    ai_description TEXT NULL,
    ai_keywords JSON NULL,
    ai_confidence_score DECIMAL(3,2) NULL,
    is_registered BOOLEAN DEFAULT FALSE,
    registration_status VARCHAR(50) NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_work_type FOREIGN KEY (work_type_id) REFERENCES resource_db.work_type(id),
    CONSTRAINT fk_work_parent FOREIGN KEY (parent_work_id) REFERENCES work(id),
    CONSTRAINT fk_work_language FOREIGN KEY (language_id) REFERENCES resource_db.language(id),
    CONSTRAINT fk_work_original_language FOREIGN KEY (original_language_id) REFERENCES resource_db.language(id),
    CONSTRAINT fk_work_genre FOREIGN KEY (genre_id) REFERENCES resource_db.genre(id),
    CONSTRAINT fk_work_subgenre FOREIGN KEY (subgenre_id) REFERENCES resource_db.subgenre(id),
    CONSTRAINT fk_work_mood FOREIGN KEY (mood_id) REFERENCES resource_db.mood(id),
    CONSTRAINT fk_work_tempo FOREIGN KEY (tempo_id) REFERENCES resource_db.tempo(id),
    CONSTRAINT fk_work_key_signature FOREIGN KEY (key_signature_id) REFERENCES resource_db.key_signature(id),
    CONSTRAINT fk_work_time_signature FOREIGN KEY (time_signature_id) REFERENCES resource_db.time_signature(id),
    CONSTRAINT fk_work_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_work_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_work_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_work_type (work_type_id),
    INDEX idx_work_parent (parent_work_id),
    INDEX idx_work_title (title),
    INDEX idx_work_iswc (iswc),
    INDEX idx_work_custom_id (custom_work_id),
    INDEX idx_work_genre (genre_id),
    INDEX idx_work_language (language_id),
    INDEX idx_work_year_created (year_created),
    INDEX idx_work_copyright_date (copyright_date),
    INDEX idx_work_public_domain (public_domain),
    INDEX idx_work_instrumental (is_instrumental),
    INDEX idx_work_registered (is_registered),
    INDEX idx_work_active_deleted (is_active, is_deleted),
    INDEX idx_work_created_at (created_at),
    FULLTEXT INDEX ft_work_search (title, subtitle, alternate_title, original_title),
    FULLTEXT INDEX ft_work_notes (notes, ai_description)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Work History
CREATE TABLE work_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    work_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_work_history_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_work_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_work_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_work_history_work (work_id),
    INDEX idx_work_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Work Recording: Many-to-many work/recording link
CREATE TABLE work_recording (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    work_id BIGINT UNSIGNED NOT NULL,
    recording_id BIGINT UNSIGNED NOT NULL,
    relationship_type_id TINYINT NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    notes TEXT NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_work_recording_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_work_recording_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_work_recording_relationship FOREIGN KEY (relationship_type_id) REFERENCES resource_db.work_recording_relationship_type(id),
    CONSTRAINT fk_work_recording_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_work_recording_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_work_recording (work_id, recording_id),
    INDEX idx_work_recording_work (work_id),
    INDEX idx_work_recording_recording (recording_id),
    INDEX idx_work_recording_primary (is_primary)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Work Sample: Samples and interpolations
CREATE TABLE work_sample (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    sampling_work_id BIGINT UNSIGNED NOT NULL,
    sampled_work_id BIGINT UNSIGNED NOT NULL,
    sample_type_id TINYINT NOT NULL,
    duration_seconds DECIMAL(6,2) NULL,
    percentage_used DECIMAL(5,2) NULL,
    approval_status VARCHAR(20) DEFAULT 'PENDING',
    approval_date DATE NULL,
    license_fee DECIMAL(10,2) NULL,
    notes TEXT NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_work_sample_sampling FOREIGN KEY (sampling_work_id) REFERENCES work(id),
    CONSTRAINT fk_work_sample_sampled FOREIGN KEY (sampled_work_id) REFERENCES work(id),
    CONSTRAINT fk_work_sample_type FOREIGN KEY (sample_type_id) REFERENCES resource_db.sample_type(id),
    CONSTRAINT fk_work_sample_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_work_sample_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_work_sample_sampling (sampling_work_id),
    INDEX idx_work_sample_sampled (sampled_work_id),
    INDEX idx_work_sample_approval (approval_status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Work Collaborator: Additional collaborators
CREATE TABLE work_collaborator (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    work_id BIGINT UNSIGNED NOT NULL,
    collaborator_person_id BIGINT UNSIGNED NOT NULL,
    collaborator_role_id INT NOT NULL,
    contribution_details TEXT NULL,
    is_credited BOOLEAN DEFAULT TRUE,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_work_collaborator_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_work_collaborator_person FOREIGN KEY (collaborator_person_id) REFERENCES person(id),
    CONSTRAINT fk_work_collaborator_role FOREIGN KEY (collaborator_role_id) REFERENCES resource_db.collaborator_role(id),
    CONSTRAINT fk_work_collaborator_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_work_collaborator_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_work_collaborator_work (work_id),
    INDEX idx_work_collaborator_person (collaborator_person_id),
    INDEX idx_work_collaborator_role (collaborator_role_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Work Video: Work usage in videos
CREATE TABLE work_video (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    work_id BIGINT UNSIGNED NOT NULL,
    video_id BIGINT UNSIGNED NOT NULL,
    usage_type_id TINYINT NOT NULL,
    duration_used_seconds INT NULL,
    notes TEXT NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_work_video_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_work_video_video FOREIGN KEY (video_id) REFERENCES video(id),
    CONSTRAINT fk_work_video_usage_type FOREIGN KEY (usage_type_id) REFERENCES resource_db.video_usage_type(id),
    CONSTRAINT fk_work_video_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_work_video_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_work_video_work (work_id),
    INDEX idx_work_video_video (video_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- RECORDING TABLES
-- =============================================

-- Recording: Sound recordings
CREATE TABLE recording (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    work_id BIGINT UNSIGNED NULL,
    recording_type_id TINYINT NOT NULL,
    parent_recording_id BIGINT UNSIGNED NULL,
    title VARCHAR(500) NOT NULL,
    subtitle VARCHAR(500) NULL,
    version_title VARCHAR(200) NULL,
    isrc VARCHAR(12) NULL UNIQUE,
    isrc_status VARCHAR(20) NULL,
    custom_recording_id VARCHAR(50) NULL,
    upc VARCHAR(14) NULL,
    catalog_number VARCHAR(50) NULL,
    duration_seconds INT NOT NULL,
    duration_string VARCHAR(10) NULL,
    recording_date DATE NULL,
    recording_year YEAR NULL,
    recording_studio VARCHAR(200) NULL,
    recording_location VARCHAR(200) NULL,
    mix_engineer VARCHAR(200) NULL,
    mastering_engineer VARCHAR(200) NULL,
    producer VARCHAR(200) NULL,
    record_label_id BIGINT UNSIGNED NULL,
    p_line VARCHAR(500) NULL,
    p_year YEAR NULL,
    c_line VARCHAR(500) NULL,
    c_year YEAR NULL,
    genre_id INT NULL,
    subgenre_id INT NULL,
    mood_id TINYINT NULL,
    tempo_bpm DECIMAL(5,2) NULL,
    key_signature_id TINYINT NULL,
    time_signature_id TINYINT NULL,
    audio_file_id BIGINT UNSIGNED NULL,
    waveform_data JSON NULL,
    audio_features JSON NULL,
    is_master BOOLEAN DEFAULT FALSE,
    is_explicit BOOLEAN DEFAULT FALSE,
    is_instrumental BOOLEAN DEFAULT FALSE,
    is_live BOOLEAN DEFAULT FALSE,
    is_acoustic BOOLEAN DEFAULT FALSE,
    is_remix BOOLEAN DEFAULT FALSE,
    is_cover BOOLEAN DEFAULT FALSE,
    is_karaoke BOOLEAN DEFAULT FALSE,
    has_video BOOLEAN DEFAULT FALSE,
    language_id CHAR(3) NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    ai_tags JSON NULL,
    ai_confidence_score DECIMAL(3,2) NULL,
    fingerprint_id VARCHAR(100) NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_recording_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_recording_type FOREIGN KEY (recording_type_id) REFERENCES resource_db.recording_type(id),
    CONSTRAINT fk_recording_parent FOREIGN KEY (parent_recording_id) REFERENCES recording(id),
    CONSTRAINT fk_recording_label FOREIGN KEY (record_label_id) REFERENCES label(id),
    CONSTRAINT fk_recording_genre FOREIGN KEY (genre_id) REFERENCES resource_db.genre(id),
    CONSTRAINT fk_recording_subgenre FOREIGN KEY (subgenre_id) REFERENCES resource_db.subgenre(id),
    CONSTRAINT fk_recording_mood FOREIGN KEY (mood_id) REFERENCES resource_db.mood(id),
    CONSTRAINT fk_recording_key_signature FOREIGN KEY (key_signature_id) REFERENCES resource_db.key_signature(id),
    CONSTRAINT fk_recording_time_signature FOREIGN KEY (time_signature_id) REFERENCES resource_db.time_signature(id),
    CONSTRAINT fk_recording_audio_file FOREIGN KEY (audio_file_id) REFERENCES file(id),
    CONSTRAINT fk_recording_language FOREIGN KEY (language_id) REFERENCES resource_db.language(id),
    CONSTRAINT fk_recording_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_recording_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_recording_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_recording_work (work_id),
    INDEX idx_recording_type (recording_type_id),
    INDEX idx_recording_title (title),
    INDEX idx_recording_isrc (isrc),
    INDEX idx_recording_upc (upc),
    INDEX idx_recording_label (record_label_id),
    INDEX idx_recording_genre (genre_id),
    INDEX idx_recording_recording_year (recording_year),
    INDEX idx_recording_master (is_master),
    INDEX idx_recording_explicit (is_explicit),
    INDEX idx_recording_fingerprint (fingerprint_id),
    INDEX idx_recording_active_deleted (is_active, is_deleted),
    INDEX idx_recording_created_at (created_at),
    FULLTEXT INDEX ft_recording_search (title, subtitle, version_title)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Recording History
CREATE TABLE recording_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    recording_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_recording_history_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_recording_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_recording_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_recording_history_recording (recording_id),
    INDEX idx_recording_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Recording Artist: Recording artist credits
CREATE TABLE recording_artist (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    recording_id BIGINT UNSIGNED NOT NULL,
    artist_id BIGINT UNSIGNED NOT NULL,
    artist_role_id TINYINT NOT NULL,
    credited_as VARCHAR(200) NULL,
    display_order INT DEFAULT 0,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_recording_artist_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_recording_artist_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_recording_artist_role FOREIGN KEY (artist_role_id) REFERENCES resource_db.artist_role(id),
    CONSTRAINT fk_recording_artist_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_recording_artist_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_recording_artist_recording (recording_id, display_order),
    INDEX idx_recording_artist_artist (artist_id),
    INDEX idx_recording_artist_role (artist_role_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Recording Producer: Producer credits
CREATE TABLE recording_producer (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    recording_id BIGINT UNSIGNED NOT NULL,
    producer_person_id BIGINT UNSIGNED NOT NULL,
    producer_role_id TINYINT NOT NULL,
    credited_as VARCHAR(200) NULL,
    points_percentage DECIMAL(5,2) NULL,
    flat_fee DECIMAL(10,2) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_recording_producer_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_recording_producer_person FOREIGN KEY (producer_person_id) REFERENCES person(id),
    CONSTRAINT fk_recording_producer_role FOREIGN KEY (producer_role_id) REFERENCES resource_db.producer_role(id),
    CONSTRAINT fk_recording_producer_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_recording_producer_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_recording_producer_recording (recording_id),
    INDEX idx_recording_producer_person (producer_person_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Recording Session: Session information
CREATE TABLE recording_session (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    recording_id BIGINT UNSIGNED NOT NULL,
    session_date DATE NOT NULL,
    session_number INT DEFAULT 1,
    studio_name VARCHAR(200) NULL,
    studio_location VARCHAR(200) NULL,
    engineer_person_id BIGINT UNSIGNED NULL,
    start_time TIME NULL,
    end_time TIME NULL,
    session_notes TEXT NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_recording_session_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_recording_session_engineer FOREIGN KEY (engineer_person_id) REFERENCES person(id),
    CONSTRAINT fk_recording_session_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_recording_session_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_recording_session_recording (recording_id),
    INDEX idx_recording_session_date (session_date),
    INDEX idx_recording_session_engineer (engineer_person_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Session Musician: Session musicians
CREATE TABLE session_musician (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    recording_session_id BIGINT UNSIGNED NOT NULL,
    musician_person_id BIGINT UNSIGNED NOT NULL,
    instrument_id INT NOT NULL,
    union_id INT NULL,
    rate DECIMAL(10,2) NULL,
    is_contractor BOOLEAN DEFAULT FALSE,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_session_musician_session FOREIGN KEY (recording_session_id) REFERENCES recording_session(id),
    CONSTRAINT fk_session_musician_person FOREIGN KEY (musician_person_id) REFERENCES person(id),
    CONSTRAINT fk_session_musician_instrument FOREIGN KEY (instrument_id) REFERENCES resource_db.instrument(id),
    CONSTRAINT fk_session_musician_union FOREIGN KEY (union_id) REFERENCES resource_db.union(id),
    CONSTRAINT fk_session_musician_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_session_musician_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_session_musician_session (recording_session_id),
    INDEX idx_session_musician_person (musician_person_id),
    INDEX idx_session_musician_instrument (instrument_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- RELEASE TABLES
-- =============================================

-- Release: Albums, singles, EPs
CREATE TABLE release (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    release_type_id TINYINT NOT NULL,
    title VARCHAR(500) NOT NULL,
    subtitle VARCHAR(500) NULL,
    version_title VARCHAR(200) NULL,
    upc VARCHAR(14) NULL UNIQUE,
    ean VARCHAR(13) NULL,
    catalog_number VARCHAR(50) NULL,
    label_id BIGINT UNSIGNED NULL,
    distributor_id BIGINT UNSIGNED NULL,
    release_date DATE NULL,
    original_release_date DATE NULL,
    digital_release_date DATE NULL,
    physical_release_date DATE NULL,
    announcement_date DATE NULL,
    preorder_date DATE NULL,
    street_date DATE NULL,
    sales_start_date DATE NULL,
    sales_end_date DATE NULL,
    p_line VARCHAR(500) NULL,
    p_year YEAR NULL,
    c_line VARCHAR(500) NULL,
    c_year YEAR NULL,
    genre_id INT NULL,
    subgenre_id INT NULL,
    format_id TINYINT NULL,
    total_tracks INT NULL,
    total_discs INT NULL,
    duration_seconds INT NULL,
    duration_string VARCHAR(10) NULL,
    parental_advisory BOOLEAN DEFAULT FALSE,
    is_compilation BOOLEAN DEFAULT FALSE,
    is_live BOOLEAN DEFAULT FALSE,
    is_remaster BOOLEAN DEFAULT FALSE,
    is_deluxe BOOLEAN DEFAULT FALSE,
    is_explicit BOOLEAN DEFAULT FALSE,
    cover_art_file_id BIGINT UNSIGNED NULL,
    cover_art_url VARCHAR(500) NULL,
    language_id CHAR(3) NULL,
    country_id CHAR(3) NULL,
    price_tier_id TINYINT NULL,
    wholesale_price DECIMAL(10,2) NULL,
    suggested_retail_price DECIMAL(10,2) NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    release_notes TEXT NULL,
    marketing_notes TEXT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_release_type FOREIGN KEY (release_type_id) REFERENCES resource_db.release_type(id),
    CONSTRAINT fk_release_label FOREIGN KEY (label_id) REFERENCES label(id),
    CONSTRAINT fk_release_distributor FOREIGN KEY (distributor_id) REFERENCES organization(id),
    CONSTRAINT fk_release_genre FOREIGN KEY (genre_id) REFERENCES resource_db.genre(id),
    CONSTRAINT fk_release_subgenre FOREIGN KEY (subgenre_id) REFERENCES resource_db.subgenre(id),
    CONSTRAINT fk_release_format FOREIGN KEY (format_id) REFERENCES resource_db.release_format(id),
    CONSTRAINT fk_release_cover_art FOREIGN KEY (cover_art_file_id) REFERENCES file(id),
    CONSTRAINT fk_release_language FOREIGN KEY (language_id) REFERENCES resource_db.language(id),
    CONSTRAINT fk_release_country FOREIGN KEY (country_id) REFERENCES resource_db.country(id),
    CONSTRAINT fk_release_price_tier FOREIGN KEY (price_tier_id) REFERENCES resource_db.price_tier(id),
    CONSTRAINT fk_release_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_release_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_release_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_release_type (release_type_id),
    INDEX idx_release_title (title),
    INDEX idx_release_upc (upc),
    INDEX idx_release_catalog (catalog_number),
    INDEX idx_release_label (label_id),
    INDEX idx_release_release_date (release_date),
    INDEX idx_release_genre (genre_id),
    INDEX idx_release_compilation (is_compilation),
    INDEX idx_release_active_deleted (is_active, is_deleted),
    INDEX idx_release_created_at (created_at),
    FULLTEXT INDEX ft_release_search (title, subtitle, version_title)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Release History
CREATE TABLE release_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    release_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_release_history_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_release_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_release_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_release_history_release (release_id),
    INDEX idx_release_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Release Artist: Release artist credits
CREATE TABLE release_artist (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    release_id BIGINT UNSIGNED NOT NULL,
    artist_id BIGINT UNSIGNED NOT NULL,
    artist_role_id TINYINT NOT NULL,
    credited_as VARCHAR(200) NULL,
    display_order INT DEFAULT 0,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_release_artist_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_release_artist_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_release_artist_role FOREIGN KEY (artist_role_id) REFERENCES resource_db.artist_role(id),
    CONSTRAINT fk_release_artist_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_release_artist_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_release_artist_release (release_id, display_order),
    INDEX idx_release_artist_artist (artist_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Release Work: Direct release/work link
CREATE TABLE release_work (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    release_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    inclusion_type_id TINYINT NOT NULL,
    notes TEXT NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_release_work_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_release_work_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_release_work_inclusion FOREIGN KEY (inclusion_type_id) REFERENCES resource_db.inclusion_type(id),
    CONSTRAINT fk_release_work_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_release_work_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_release_work_release (release_id),
    INDEX idx_release_work_work (work_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Release Territory: Territory-specific releases
CREATE TABLE release_territory (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    release_id BIGINT UNSIGNED NOT NULL,
    territory_id INT NOT NULL,
    release_date DATE NULL,
    is_available BOOLEAN DEFAULT TRUE,
    catalog_number VARCHAR(50) NULL,
    notes TEXT NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_release_territory_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_release_territory_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_release_territory_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_release_territory_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_release_territory (release_id, territory_id),
    INDEX idx_release_territory_release (release_id),
    INDEX idx_release_territory_territory (territory_id),
    INDEX idx_release_territory_available (is_available)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- TRACK TABLES
-- =============================================

-- Track: Tracks on releases
CREATE TABLE track (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    release_id BIGINT UNSIGNED NOT NULL,
    recording_id BIGINT UNSIGNED NOT NULL,
    disc_number INT DEFAULT 1,
    track_number INT NOT NULL,
    side VARCHAR(1) NULL,
    title VARCHAR(500) NOT NULL,
    version_title VARCHAR(200) NULL,
    isrc VARCHAR(12) NULL,
    duration_seconds INT NOT NULL,
    duration_string VARCHAR(10) NULL,
    gap_seconds INT DEFAULT 0,
    is_hidden BOOLEAN DEFAULT FALSE,
    is_bonus BOOLEAN DEFAULT FALSE,
    volume_number INT NULL,
    sequence_number INT NULL,
    notes TEXT NULL,
    metadata JSON NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_track_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_track_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_track_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_track_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_track_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_track_release (release_id),
    INDEX idx_track_recording (recording_id),
    INDEX idx_track_disc_track (disc_number, track_number),
    INDEX idx_track_isrc (isrc),
    INDEX idx_track_sequence (sequence_number),
    INDEX idx_track_active_deleted (is_active, is_deleted),
    UNIQUE INDEX uk_track_release_disc_track (release_id, disc_number, track_number)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Track History
CREATE TABLE track_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    track_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_track_history_track FOREIGN KEY (track_id) REFERENCES track(id),
    CONSTRAINT fk_track_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_track_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_track_history_track (track_id),
    INDEX idx_track_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- VIDEO TABLES
-- =============================================

-- Video: Music videos
CREATE TABLE video (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    video_type_id TINYINT NOT NULL,
    recording_id BIGINT UNSIGNED NULL,
    title VARCHAR(500) NOT NULL,
    subtitle VARCHAR(500) NULL,
    description TEXT NULL,
    duration_seconds INT NOT NULL,
    duration_string VARCHAR(10) NULL,
    isrc VARCHAR(12) NULL,
    isan VARCHAR(26) NULL,
    upc VARCHAR(14) NULL,
    release_date DATE NULL,
    production_company VARCHAR(200) NULL,
    director VARCHAR(200) NULL,
    producer VARCHAR(200) NULL,
    cinematographer VARCHAR(200) NULL,
    editor VARCHAR(200) NULL,
    production_year YEAR NULL,
    country_of_production_id CHAR(3) NULL,
    language_id CHAR(3) NULL,
    subtitle_languages JSON NULL,
    resolution_id TINYINT NULL,
    aspect_ratio_id TINYINT NULL,
    frame_rate_id TINYINT NULL,
    codec_id TINYINT NULL,
    bitrate_kbps INT NULL,
    file_size_mb DECIMAL(10,2) NULL,
    video_file_id BIGINT UNSIGNED NULL,
    thumbnail_file_id BIGINT UNSIGNED NULL,
    has_captions BOOLEAN DEFAULT FALSE,
    has_audio_description BOOLEAN DEFAULT FALSE,
    is_explicit BOOLEAN DEFAULT FALSE,
    is_official BOOLEAN DEFAULT TRUE,
    youtube_url VARCHAR(200) NULL,
    vimeo_url VARCHAR(200) NULL,
    view_count BIGINT DEFAULT 0,
    like_count BIGINT DEFAULT 0,
    comment_count BIGINT DEFAULT 0,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_video_type FOREIGN KEY (video_type_id) REFERENCES resource_db.video_type(id),
    CONSTRAINT fk_video_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_video_country FOREIGN KEY (country_of_production_id) REFERENCES resource_db.country(id),
    CONSTRAINT fk_video_language FOREIGN KEY (language_id) REFERENCES resource_db.language(id),
    CONSTRAINT fk_video_resolution FOREIGN KEY (resolution_id) REFERENCES resource_db.video_resolution(id),
    CONSTRAINT fk_video_aspect_ratio FOREIGN KEY (aspect_ratio_id) REFERENCES resource_db.aspect_ratio(id),
    CONSTRAINT fk_video_frame_rate FOREIGN KEY (frame_rate_id) REFERENCES resource_db.frame_rate(id),
    CONSTRAINT fk_video_codec FOREIGN KEY (codec_id) REFERENCES resource_db.codec(id),
    CONSTRAINT fk_video_file FOREIGN KEY (video_file_id) REFERENCES file(id),
    CONSTRAINT fk_video_thumbnail FOREIGN KEY (thumbnail_file_id) REFERENCES file(id),
    CONSTRAINT fk_video_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_video_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_video_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_video_type (video_type_id),
    INDEX idx_video_recording (recording_id),
    INDEX idx_video_title (title),
    INDEX idx_video_isrc (isrc),
    INDEX idx_video_release_date (release_date),
    INDEX idx_video_official (is_official),
    INDEX idx_video_explicit (is_explicit),
    INDEX idx_video_active_deleted (is_active, is_deleted),
    FULLTEXT INDEX ft_video_search (title, subtitle, description)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Video History
CREATE TABLE video_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    video_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_video_history_video FOREIGN KEY (video_id) REFERENCES video(id),
    CONSTRAINT fk_video_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_video_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_video_history_video (video_id),
    INDEX idx_video_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Video Artist: Video appearances
CREATE TABLE video_artist (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    video_id BIGINT UNSIGNED NOT NULL,
    artist_id BIGINT UNSIGNED NOT NULL,
    appearance_type_id TINYINT NOT NULL,
    display_order INT DEFAULT 0,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_video_artist_video FOREIGN KEY (video_id) REFERENCES video(id),
    CONSTRAINT fk_video_artist_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_video_artist_appearance FOREIGN KEY (appearance_type_id) REFERENCES resource_db.appearance_type(id),
    CONSTRAINT fk_video_artist_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_video_artist_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_video_artist_video (video_id),
    INDEX idx_video_artist_artist (artist_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- ARTIST TABLES
-- =============================================

-- Artist: Recording artists
CREATE TABLE artist (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    artist_type_id TINYINT NOT NULL,
    person_id BIGINT UNSIGNED NULL,
    organization_id BIGINT UNSIGNED NULL,
    name VARCHAR(300) NOT NULL,
    sort_name VARCHAR(300) NULL,
    real_name VARCHAR(300) NULL,
    formation_date DATE NULL,
    dissolution_date DATE NULL,
    birth_date DATE NULL,
    death_date DATE NULL,
    country_id CHAR(3) NULL,
    hometown VARCHAR(200) NULL,
    biography TEXT NULL,
    website VARCHAR(255) NULL,
    image_url VARCHAR(500) NULL,
    spotify_id VARCHAR(50) NULL,
    apple_music_id VARCHAR(50) NULL,
    youtube_channel_id VARCHAR(100) NULL,
    instagram_handle VARCHAR(50) NULL,
    twitter_handle VARCHAR(50) NULL,
    facebook_page VARCHAR(100) NULL,
    tiktok_handle VARCHAR(50) NULL,
    soundcloud_url VARCHAR(200) NULL,
    bandcamp_url VARCHAR(200) NULL,
    isni VARCHAR(19) NULL UNIQUE,
    ipi_name_number VARCHAR(11) NULL,
    musicbrainz_id CHAR(36) NULL,
    discogs_id VARCHAR(20) NULL,
    allmusic_id VARCHAR(20) NULL,
    genre_tags JSON NULL,
    associated_acts JSON NULL,
    member_count INT NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    popularity_score INT DEFAULT 0,
    follower_count BIGINT DEFAULT 0,
    monthly_listeners BIGINT DEFAULT 0,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_artist_type FOREIGN KEY (artist_type_id) REFERENCES resource_db.artist_type(id),
    CONSTRAINT fk_artist_person FOREIGN KEY (person_id) REFERENCES person(id),
    CONSTRAINT fk_artist_organization FOREIGN KEY (organization_id) REFERENCES organization(id),
    CONSTRAINT fk_artist_country FOREIGN KEY (country_id) REFERENCES resource_db.country(id),
    CONSTRAINT fk_artist_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_artist_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_artist_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_artist_type (artist_type_id),
    INDEX idx_artist_person (person_id),
    INDEX idx_artist_organization (organization_id),
    INDEX idx_artist_name (name),
    INDEX idx_artist_sort_name (sort_name),
    INDEX idx_artist_country (country_id),
    INDEX idx_artist_spotify (spotify_id),
    INDEX idx_artist_isni (isni),
    INDEX idx_artist_musicbrainz (musicbrainz_id),
    INDEX idx_artist_popularity (popularity_score),
    INDEX idx_artist_active_deleted (is_active, is_deleted),
    FULLTEXT INDEX ft_artist_search (name, real_name, biography)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Artist History
CREATE TABLE artist_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    artist_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_artist_history_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_artist_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_artist_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_artist_history_artist (artist_id),
    INDEX idx_artist_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Artist Member: Band/group members
CREATE TABLE artist_member (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    artist_id BIGINT UNSIGNED NOT NULL,
    member_person_id BIGINT UNSIGNED NOT NULL,
    member_role_id INT NOT NULL,
    member_name VARCHAR(200) NULL,
    join_date DATE NULL,
    leave_date DATE NULL,
    is_founding_member BOOLEAN DEFAULT FALSE,
    is_current_member BOOLEAN DEFAULT TRUE,
    display_order INT DEFAULT 0,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_artist_member_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_artist_member_person FOREIGN KEY (member_person_id) REFERENCES person(id),
    CONSTRAINT fk_artist_member_role FOREIGN KEY (member_role_id) REFERENCES resource_db.member_role(id),
    CONSTRAINT fk_artist_member_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_artist_member_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_artist_member_artist (artist_id),
    INDEX idx_artist_member_person (member_person_id),
    INDEX idx_artist_member_current (is_current_member),
    INDEX idx_artist_member_dates (join_date, leave_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Artist Writer: Artist/writer connections
CREATE TABLE artist_writer (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    artist_id BIGINT UNSIGNED NOT NULL,
    writer_id BIGINT UNSIGNED NOT NULL,
    is_primary BOOLEAN DEFAULT TRUE,
    start_date DATE NULL,
    end_date DATE NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_artist_writer_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_artist_writer_writer FOREIGN KEY (writer_id) REFERENCES writer(id),
    CONSTRAINT fk_artist_writer_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_artist_writer_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_artist_writer (artist_id, writer_id),
    INDEX idx_artist_writer_artist (artist_id),
    INDEX idx_artist_writer_writer (writer_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- WRITER TABLES
-- =============================================

-- Writer: Songwriters/composers
CREATE TABLE writer (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    writer_type_id TINYINT NOT NULL,
    person_id BIGINT UNSIGNED NOT NULL,
    professional_name VARCHAR(300) NULL,
    ipi_name_number VARCHAR(11) NULL UNIQUE,
    ipi_base_number VARCHAR(13) NULL,
    cae_number VARCHAR(9) NULL,
    pro_affiliation_id INT NULL,
    pro_member_id VARCHAR(50) NULL,
    publisher_affiliation_id BIGINT UNSIGNED NULL,
    admin_agreement_id BIGINT UNSIGNED NULL,
    territory_id INT NULL,
    is_controlled BOOLEAN DEFAULT FALSE,
    is_affiliated BOOLEAN DEFAULT FALSE,
    affiliation_date DATE NULL,
    genres JSON NULL,
    instruments JSON NULL,
    skills JSON NULL,
    awards JSON NULL,
    notable_works JSON NULL,
    collaborators JSON NULL,
    biography TEXT NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_writer_type FOREIGN KEY (writer_type_id) REFERENCES resource_db.writer_type(id),
    CONSTRAINT fk_writer_person FOREIGN KEY (person_id) REFERENCES person(id),
    CONSTRAINT fk_writer_pro FOREIGN KEY (pro_affiliation_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_writer_publisher FOREIGN KEY (publisher_affiliation_id) REFERENCES publisher(id),
    CONSTRAINT fk_writer_agreement FOREIGN KEY (admin_agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_writer_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_writer_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_writer_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_writer_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_writer_type (writer_type_id),
    INDEX idx_writer_person (person_id),
    INDEX idx_writer_professional_name (professional_name),
    INDEX idx_writer_ipi_name (ipi_name_number),
    INDEX idx_writer_ipi_base (ipi_base_number),
    INDEX idx_writer_cae (cae_number),
    INDEX idx_writer_pro (pro_affiliation_id),
    INDEX idx_writer_publisher (publisher_affiliation_id),
    INDEX idx_writer_controlled (is_controlled),
    INDEX idx_writer_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Writer History
CREATE TABLE writer_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    writer_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_writer_history_writer FOREIGN KEY (writer_id) REFERENCES writer(id),
    CONSTRAINT fk_writer_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_writer_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_writer_history_writer (writer_id),
    INDEX idx_writer_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- PUBLISHER TABLES
-- =============================================

-- Publisher: Music publishers
CREATE TABLE publisher (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    publisher_type_id TINYINT NOT NULL,
    organization_id BIGINT UNSIGNED NOT NULL,
    parent_publisher_id BIGINT UNSIGNED NULL,
    name VARCHAR(300) NOT NULL,
    dba_name VARCHAR(300) NULL,
    ipi_name_number VARCHAR(11) NULL UNIQUE,
    ipi_base_number VARCHAR(13) NULL,
    cae_number VARCHAR(9) NULL,
    society_assigned_id VARCHAR(50) NULL,
    pro_affiliation_id INT NULL,
    mro_affiliation_id INT NULL,
    pro_member_id VARCHAR(50) NULL,
    mro_member_id VARCHAR(50) NULL,
    admin_id BIGINT UNSIGNED NULL,
    territory_id INT NULL,
    ownership_percent DECIMAL(5,2) NULL,
    is_original BOOLEAN DEFAULT FALSE,
    is_admin BOOLEAN DEFAULT FALSE,
    is_collection BOOLEAN DEFAULT FALSE,
    founded_date DATE NULL,
    genres JSON NULL,
    notable_writers JSON NULL,
    notable_works JSON NULL,
    catalog_size INT DEFAULT 0,
    description TEXT NULL,
    logo_url VARCHAR(500) NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_publisher_type FOREIGN KEY (publisher_type_id) REFERENCES resource_db.publisher_type(id),
    CONSTRAINT fk_publisher_organization FOREIGN KEY (organization_id) REFERENCES organization(id),
    CONSTRAINT fk_publisher_parent FOREIGN KEY (parent_publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_publisher_pro FOREIGN KEY (pro_affiliation_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_publisher_mro FOREIGN KEY (mro_affiliation_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_publisher_admin FOREIGN KEY (admin_id) REFERENCES publisher(id),
    CONSTRAINT fk_publisher_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_publisher_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_publisher_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_publisher_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_publisher_type (publisher_type_id),
    INDEX idx_publisher_organization (organization_id),
    INDEX idx_publisher_parent (parent_publisher_id),
    INDEX idx_publisher_name (name),
    INDEX idx_publisher_dba (dba_name),
    INDEX idx_publisher_ipi_name (ipi_name_number),
    INDEX idx_publisher_ipi_base (ipi_base_number),
    INDEX idx_publisher_cae (cae_number),
    INDEX idx_publisher_pro (pro_affiliation_id),
    INDEX idx_publisher_admin (admin_id),
    INDEX idx_publisher_original (is_original),
    INDEX idx_publisher_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Publisher History
CREATE TABLE publisher_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    publisher_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_publisher_history_publisher FOREIGN KEY (publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_publisher_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_publisher_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_publisher_history_publisher (publisher_id),
    INDEX idx_publisher_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- LABEL TABLES
-- =============================================

-- Label: Record labels
CREATE TABLE label (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    label_type_id TINYINT NOT NULL,
    organization_id BIGINT UNSIGNED NOT NULL,
    parent_label_id BIGINT UNSIGNED NULL,
    name VARCHAR(300) NOT NULL,
    imprint_name VARCHAR(300) NULL,
    label_code VARCHAR(10) NULL,
    isrc_prefix VARCHAR(5) NULL,
    founded_date DATE NULL,
    founder VARCHAR(200) NULL,
    distributor_id BIGINT UNSIGNED NULL,
    territory_id INT NULL,
    genres JSON NULL,
    notable_artists JSON NULL,
    notable_releases JSON NULL,
    catalog_size INT DEFAULT 0,
    description TEXT NULL,
    logo_url VARCHAR(500) NULL,
    website VARCHAR(255) NULL,
    is_independent BOOLEAN DEFAULT TRUE,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_source VARCHAR(100) NULL,
    metadata JSON NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_label_type FOREIGN KEY (label_type_id) REFERENCES resource_db.label_type(id),
    CONSTRAINT fk_label_organization FOREIGN KEY (organization_id) REFERENCES organization(id),
    CONSTRAINT fk_label_parent FOREIGN KEY (parent_label_id) REFERENCES label(id),
    CONSTRAINT fk_label_distributor FOREIGN KEY (distributor_id) REFERENCES organization(id),
    CONSTRAINT fk_label_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_label_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_label_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_label_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_label_type (label_type_id),
    INDEX idx_label_organization (organization_id),
    INDEX idx_label_parent (parent_label_id),
    INDEX idx_label_name (name),
    INDEX idx_label_imprint (imprint_name),
    INDEX idx_label_code (label_code),
    INDEX idx_label_isrc_prefix (isrc_prefix),
    INDEX idx_label_distributor (distributor_id),
    INDEX idx_label_independent (is_independent),
    INDEX idx_label_active_deleted (is_active, is_deleted),
    FULLTEXT INDEX ft_label_search (name, imprint_name, description)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Label History
CREATE TABLE label_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    label_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_label_history_label FOREIGN KEY (label_id) REFERENCES label(id),
    CONSTRAINT fk_label_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_label_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_label_history_label (label_id),
    INDEX idx_label_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Label Artist: Label/artist contracts
CREATE TABLE label_artist (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    label_id BIGINT UNSIGNED NOT NULL,
    artist_id BIGINT UNSIGNED NOT NULL,
    contract_start_date DATE NOT NULL,
    contract_end_date DATE NULL,
    deal_type_id TINYINT NOT NULL,
    territory_id INT NULL,
    is_exclusive BOOLEAN DEFAULT TRUE,
    notes TEXT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_label_artist_label FOREIGN KEY (label_id) REFERENCES label(id),
    CONSTRAINT fk_label_artist_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_label_artist_deal_type FOREIGN KEY (deal_type_id) REFERENCES resource_db.deal_type(id),
    CONSTRAINT fk_label_artist_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_label_artist_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_label_artist_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_label_artist_label (label_id),
    INDEX idx_label_artist_artist (artist_id),
    INDEX idx_label_artist_dates (contract_start_date, contract_end_date),
    INDEX idx_label_artist_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- RIGHTS & LEGAL TABLES
-- =============================================

-- Rights Holder: Unified rights holder entity
CREATE TABLE rights_holder (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    external_id VARCHAR(100) NULL UNIQUE,
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    rights_holder_type_id TINYINT NOT NULL,
    name VARCHAR(300) NOT NULL,
    ipi_name_number VARCHAR(11) NULL,
    ipi_base_number VARCHAR(13) NULL,
    tax_id VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    payment_threshold DECIMAL(10,2) DEFAULT 0.00,
    payment_frequency VARCHAR(50) DEFAULT 'QUARTERLY',
    payment_method_id TINYINT NULL,
    preferred_currency_id CHAR(3) NULL,
    notes TEXT NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    metadata JSON NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_holder_type FOREIGN KEY (rights_holder_type_id) REFERENCES resource_db.rights_holder_type(id),
    CONSTRAINT fk_rights_holder_payment_method FOREIGN KEY (payment_method_id) REFERENCES resource_db.payment_method(id),
    CONSTRAINT fk_rights_holder_currency FOREIGN KEY (preferred_currency_id) REFERENCES resource_db.currency(id),
    CONSTRAINT fk_rights_holder_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_rights_holder_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rights_holder_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_rights_holder_entity (entity_type, entity_id),
    INDEX idx_rights_holder_type (rights_holder_type_id),
    INDEX idx_rights_holder_name (name),
    INDEX idx_rights_holder_ipi_name (ipi_name_number),
    INDEX idx_rights_holder_ipi_base (ipi_base_number),
    INDEX idx_rights_holder_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Rights Holder History
CREATE TABLE rights_holder_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    rights_holder_id BIGINT UNSIGNED NOT NULL,
    change_type_id TINYINT NOT NULL,
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    old_values JSON NULL,
    new_values JSON NULL,
    change_reason VARCHAR(500) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_holder_history_holder FOREIGN KEY (rights_holder_id) REFERENCES rights_holder(id),
    CONSTRAINT fk_rights_holder_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.change_type(id),
    CONSTRAINT fk_rights_holder_history_user FOREIGN KEY (changed_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_rights_holder_history_holder (rights_holder_id),
    INDEX idx_rights_holder_history_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Legal Entity: Legal entity details
CREATE TABLE legal_entity (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    legal_entity_type_id TINYINT NOT NULL,
    legal_name VARCHAR(500) NOT NULL COMMENT 'ENCRYPTED',
    trade_names JSON NULL,
    registration_number VARCHAR(100) NULL COMMENT 'ENCRYPTED',
    registration_date DATE NULL,
    registration_country_id CHAR(3) NOT NULL,
    registration_state VARCHAR(100) NULL,
    tax_id VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    vat_number VARCHAR(50) NULL COMMENT 'ENCRYPTED',
    lei_code VARCHAR(20) NULL,
    legal_form VARCHAR(100) NULL,
    share_capital DECIMAL(15,2) NULL,
    fiscal_year_end VARCHAR(5) NULL,
    employees_count INT NULL,
    parent_company_id BIGINT UNSIGNED NULL,
    ultimate_parent_id BIGINT UNSIGNED NULL,
    consolidated_revenue DECIMAL(15,2) NULL,
    is_public_company BOOLEAN DEFAULT FALSE,
    stock_symbol VARCHAR(10) NULL,
    stock_exchange VARCHAR(50) NULL,
    credit_rating VARCHAR(10) NULL,
    duns_number VARCHAR(9) NULL,
    sic_codes JSON NULL,
    naics_codes JSON NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    verification_method VARCHAR(100) NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_legal_entity_type FOREIGN KEY (legal_entity_type_id) REFERENCES resource_db.legal_entity_type(id),
    CONSTRAINT fk_legal_entity_country FOREIGN KEY (registration_country_id) REFERENCES resource_db.country(id),
    CONSTRAINT fk_legal_entity_parent FOREIGN KEY (parent_company_id) REFERENCES legal_entity(id),
    CONSTRAINT fk_legal_entity_ultimate FOREIGN KEY (ultimate_parent_id) REFERENCES legal_entity(id),
    CONSTRAINT fk_legal_entity_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_legal_entity_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_legal_entity_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_legal_entity_entity (entity_type, entity_id),
    INDEX idx_legal_entity_type (legal_entity_type_id),
    INDEX idx_legal_entity_country (registration_country_id),
    INDEX idx_legal_entity_tax_id (tax_id),
    INDEX idx_legal_entity_vat (vat_number),
    INDEX idx_legal_entity_lei (lei_code),
    INDEX idx_legal_entity_duns (duns_number),
    INDEX idx_legal_entity_parent (parent_company_id),
    INDEX idx_legal_entity_public (is_public_company),
    INDEX idx_legal_entity_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Legal Representative: Authorized representatives
CREATE TABLE legal_representative (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    legal_entity_id BIGINT UNSIGNED NOT NULL,
    person_id BIGINT UNSIGNED NOT NULL,
    representative_type_id TINYINT NOT NULL,
    title VARCHAR(100) NULL,
    department VARCHAR(100) NULL,
    authority_scope TEXT NULL,
    signing_authority BOOLEAN DEFAULT FALSE,
    financial_limit DECIMAL(15,2) NULL,
    valid_from DATE NOT NULL,
    valid_to DATE NULL,
    power_of_attorney_file_id BIGINT UNSIGNED NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    notes TEXT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_legal_rep_entity FOREIGN KEY (legal_entity_id) REFERENCES legal_entity(id),
    CONSTRAINT fk_legal_rep_person FOREIGN KEY (person_id) REFERENCES person(id),
    CONSTRAINT fk_legal_rep_type FOREIGN KEY (representative_type_id) REFERENCES resource_db.representative_type(id),
    CONSTRAINT fk_legal_rep_file FOREIGN KEY (power_of_attorney_file_id) REFERENCES file(id),
    CONSTRAINT fk_legal_rep_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_legal_rep_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_legal_rep_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_legal_rep_entity (legal_entity_id),
    INDEX idx_legal_rep_person (person_id),
    INDEX idx_legal_rep_type (representative_type_id),
    INDEX idx_legal_rep_primary (is_primary),
    INDEX idx_legal_rep_signing (signing_authority),
    INDEX idx_legal_rep_valid_dates (valid_from, valid_to),
    INDEX idx_legal_rep_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Society Member: PRO/MRO memberships
CREATE TABLE society_member (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    society_id INT NOT NULL,
    member_type VARCHAR(50) NOT NULL,
    member_id BIGINT UNSIGNED NOT NULL,
    member_number VARCHAR(50) NOT NULL,
    membership_type_id TINYINT NOT NULL,
    territory_id INT NULL,
    ipi_name_number VARCHAR(11) NULL,
    ipi_base_number VARCHAR(13) NULL,
    cae_number VARCHAR(9) NULL,
    join_date DATE NOT NULL,
    termination_date DATE NULL,
    status VARCHAR(50) DEFAULT 'ACTIVE',
    rights_granted JSON NULL,
    share_percentage DECIMAL(5,2) NULL,
    is_exclusive BOOLEAN DEFAULT FALSE,
    voting_rights BOOLEAN DEFAULT TRUE,
    board_member BOOLEAN DEFAULT FALSE,
    notes TEXT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_society_member_society FOREIGN KEY (society_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_society_member_type FOREIGN KEY (membership_type_id) REFERENCES resource_db.membership_type(id),
    CONSTRAINT fk_society_member_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_society_member_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_society_member_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_society_member_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_society_member_society (society_id),
    INDEX idx_society_member_member (member_type, member_id),
    INDEX idx_society_member_number (member_number),
    INDEX idx_society_member_type (membership_type_id),
    INDEX idx_society_member_territory (territory_id),
    INDEX idx_society_member_dates (join_date, termination_date),
    INDEX idx_society_member_status (status),
    INDEX idx_society_member_exclusive (is_exclusive),
    INDEX idx_society_member_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Contributor: Generic contributor type
CREATE TABLE contributor (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    contributor_type VARCHAR(50) NOT NULL,
    contributor_id BIGINT UNSIGNED NOT NULL,
    name VARCHAR(300) NOT NULL,
    sort_name VARCHAR(300) NULL,
    role_category VARCHAR(50) NULL,
    credits_count INT DEFAULT 0,
    primary_genre_id INT NULL,
    notable_works JSON NULL,
    rating DECIMAL(3,2) NULL,
    is_featured BOOLEAN DEFAULT FALSE,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date DATETIME NULL,
    metadata JSON NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_contributor_genre FOREIGN KEY (primary_genre_id) REFERENCES resource_db.genre(id),
    CONSTRAINT fk_contributor_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_contributor_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_contributor_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_contributor_type_id (contributor_type, contributor_id),
    INDEX idx_contributor_name (name),
    INDEX idx_contributor_sort_name (sort_name),
    INDEX idx_contributor_genre (primary_genre_id),
    INDEX idx_contributor_featured (is_featured),
    INDEX idx_contributor_verified (is_verified),
    INDEX idx_contributor_active_deleted (is_active, is_deleted),
    INDEX idx_contributor_credits (credits_count)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- ENTITY SUPPORT TABLES
-- =============================================

-- Entity Alias: Multiple names/aliases for any entity
CREATE TABLE entity_alias (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    alias_type_id TINYINT NOT NULL,
    alias_name VARCHAR(200) NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    is_legal_name BOOLEAN DEFAULT FALSE,
    used_from DATE NULL,
    used_to DATE NULL,
    territory_id INT NULL,
    notes TEXT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_entity_alias_type FOREIGN KEY (alias_type_id) REFERENCES resource_db.alias_type(id),
    CONSTRAINT fk_entity_alias_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_entity_alias_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_entity_alias_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_entity_alias_entity (entity_type, entity_id),
    INDEX idx_entity_alias_name (alias_name),
    INDEX idx_entity_alias_type (alias_type_id),
    INDEX idx_entity_alias_dates (used_from, used_to),
    INDEX idx_entity_alias_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Entity Identifier: Flexible identifier storage
CREATE TABLE entity_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    identifier_type_id INT NOT NULL,
    identifier_value VARCHAR(50) NOT NULL,
    status VARCHAR(20) DEFAULT 'ACTIVE',
    issued_date DATE NULL,
    issued_by VARCHAR(100) NULL,
    territory_id INT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_entity_identifier_type FOREIGN KEY (identifier_type_id) REFERENCES resource_db.identifier_type(id),
    CONSTRAINT fk_entity_identifier_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_entity_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_entity_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_identifier (identifier_type_id, identifier_value),
    INDEX idx_entity_identifier_entity (entity_type, entity_id),
    INDEX idx_entity_identifier_value (identifier_value),
    INDEX idx_entity_identifier_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Entity Translation: Multi-language translations
CREATE TABLE entity_translation (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    field_name VARCHAR(50) NOT NULL,
    language_id CHAR(3) NOT NULL,
    translated_value TEXT NOT NULL,
    translation_type VARCHAR(20) DEFAULT 'MANUAL',
    translator_id BIGINT UNSIGNED NULL,
    translation_date DATE NULL,
    is_approved BOOLEAN DEFAULT FALSE,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_entity_translation_language FOREIGN KEY (language_id) REFERENCES resource_db.language(id),
    CONSTRAINT fk_entity_translation_translator FOREIGN KEY (translator_id) REFERENCES user(id),
    CONSTRAINT fk_entity_translation_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_entity_translation_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_entity_translation_entity (entity_type, entity_id, language_id),
    INDEX idx_entity_translation_field (field_name),
    INDEX idx_entity_translation_approved (is_approved)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Entity Metadata: DDEX/CWR metadata storage
CREATE TABLE entity_metadata (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    metadata_schema_id INT NOT NULL,
    metadata_version VARCHAR(10) NOT NULL,
    metadata_json JSON NOT NULL,
    validation_status VARCHAR(20) DEFAULT 'PENDING',
    validation_errors JSON NULL,
    last_validated DATETIME NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_entity_metadata_schema FOREIGN KEY (metadata_schema_id) REFERENCES resource_db.metadata_schema(id),
    CONSTRAINT fk_entity_metadata_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_entity_metadata_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_entity_metadata_entity (entity_type, entity_id),
    INDEX idx_entity_metadata_schema (metadata_schema_id),
    INDEX idx_entity_metadata_status (validation_status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- entity_credit - Detailed credits/liner notes
CREATE TABLE entity_credit (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE,
    entity_type VARCHAR(50) NOT NULL COMMENT 'recording, release, work, video',
    entity_id BIGINT UNSIGNED NOT NULL,
    credited_entity_type VARCHAR(50) NOT NULL COMMENT 'person, organization, artist',
    credited_entity_id BIGINT UNSIGNED NOT NULL,
    credit_role_id INT NOT NULL,
    instrument_id INT NULL,
    credit_text VARCHAR(500) NULL COMMENT 'As it appears on album',
    is_featured BOOLEAN DEFAULT FALSE,
    display_order INT DEFAULT 0,
    notes TEXT NULL,
    
    -- Audit columns
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    updated_by VARCHAR(255) NULL,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    deleted_by VARCHAR(255) NULL,
    archived_at TIMESTAMP NULL DEFAULT NULL,
    archived_by VARCHAR(255) NULL,
    archive_reason TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    version INT NOT NULL DEFAULT 1,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check TIMESTAMP NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_entity_credit_role FOREIGN KEY (credit_role_id) REFERENCES resource_db.credit_role(id),
    CONSTRAINT fk_entity_credit_instrument FOREIGN KEY (instrument_id) REFERENCES resource_db.instrument(id),
    
    -- Indexes
    INDEX idx_entity_credit (entity_type, entity_id),
    INDEX idx_credited_entity (credited_entity_type, credited_entity_id),
    INDEX idx_credit_role (credit_role_id),
    INDEX idx_display_order (display_order),
    INDEX idx_deleted_at (deleted_at),
    INDEX idx_archived_at (archived_at),
    INDEX idx_active (is_active),
    INDEX idx_active_deleted (is_active, deleted_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- entity_territory_data - Territory-specific data
CREATE TABLE entity_territory_data (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE,
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    territory_id INT NOT NULL,
    field_name VARCHAR(50) NOT NULL,
    field_value TEXT NULL,
    effective_date DATE NULL,
    expiry_date DATE NULL,
    
    -- Audit columns
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    updated_by VARCHAR(255) NULL,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    deleted_by VARCHAR(255) NULL,
    archived_at TIMESTAMP NULL DEFAULT NULL,
    archived_by VARCHAR(255) NULL,
    archive_reason TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    version INT NOT NULL DEFAULT 1,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check TIMESTAMP NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_entity_territory_data_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    
    -- Indexes
    INDEX idx_entity_territory (entity_type, entity_id, territory_id),
    INDEX idx_territory (territory_id),
    INDEX idx_field_name (field_name),
    INDEX idx_effective_dates (effective_date, expiry_date),
    INDEX idx_deleted_at (deleted_at),
    INDEX idx_archived_at (archived_at),
    INDEX idx_active (is_active),
    INDEX idx_active_deleted (is_active, deleted_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- entity_rating - Content ratings
CREATE TABLE entity_rating (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE,
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    rating_system_id INT NOT NULL,
    rating_value VARCHAR(20) NOT NULL,
    rating_reason TEXT NULL,
    rated_date DATE NULL,
    territory_id INT NULL,
    
    -- Audit columns
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    updated_by VARCHAR(255) NULL,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    deleted_by VARCHAR(255) NULL,
    archived_at TIMESTAMP NULL DEFAULT NULL,
    archived_by VARCHAR(255) NULL,
    archive_reason TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    version INT NOT NULL DEFAULT 1,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check TIMESTAMP NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_entity_rating_system FOREIGN KEY (rating_system_id) REFERENCES resource_db.rating_system(id),
    CONSTRAINT fk_entity_rating_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    
    -- Indexes
    INDEX idx_entity_rating (entity_type, entity_id),
    INDEX idx_rating_system (rating_system_id),
    INDEX idx_territory (territory_id),
    INDEX idx_deleted_at (deleted_at),
    INDEX idx_archived_at (archived_at),
    INDEX idx_active (is_active),
    INDEX idx_active_deleted (is_active, deleted_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- entity_relationship - Entity relationships (covers, samples)
CREATE TABLE entity_relationship (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE,
    source_type VARCHAR(50) NOT NULL,
    source_id BIGINT UNSIGNED NOT NULL,
    target_type VARCHAR(50) NOT NULL,
    target_id BIGINT UNSIGNED NOT NULL,
    relationship_type_id INT NOT NULL,
    relationship_status VARCHAR(20) DEFAULT 'ACTIVE',
    start_date DATE NULL,
    end_date DATE NULL,
    notes TEXT NULL,
    
    -- Audit columns
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    updated_by VARCHAR(255) NULL,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    deleted_by VARCHAR(255) NULL,
    archived_at TIMESTAMP NULL DEFAULT NULL,
    archived_by VARCHAR(255) NULL,
    archive_reason TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    version INT NOT NULL DEFAULT 1,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check TIMESTAMP NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_entity_relationship_type FOREIGN KEY (relationship_type_id) REFERENCES resource_db.relationship_type(id),
    
    -- Indexes
    INDEX idx_source (source_type, source_id),
    INDEX idx_target (target_type, target_id),
    INDEX idx_relationship_type (relationship_type_id),
    INDEX idx_dates (start_date, end_date),
    INDEX idx_deleted_at (deleted_at),
    INDEX idx_archived_at (archived_at),
    INDEX idx_active (is_active),
    INDEX idx_active_deleted (is_active, deleted_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- external_link - External platform links
CREATE TABLE external_link (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE,
    entity_type VARCHAR(50) NOT NULL COMMENT 'artist, work, recording, etc.',
    entity_id BIGINT UNSIGNED NOT NULL,
    link_type_id INT NOT NULL,
    url VARCHAR(500) NOT NULL,
    platform_id INT NULL COMMENT 'Auto-detected from URL',
    platform_identifier VARCHAR(100) NULL COMMENT 'Extracted ID from URL',
    is_verified BOOLEAN DEFAULT FALSE,
    is_primary BOOLEAN DEFAULT FALSE,
    
    -- Audit columns
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    updated_by VARCHAR(255) NULL,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    deleted_by VARCHAR(255) NULL,
    archived_at TIMESTAMP NULL DEFAULT NULL,
    archived_by VARCHAR(255) NULL,
    archive_reason TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    version INT NOT NULL DEFAULT 1,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check TIMESTAMP NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_external_link_type FOREIGN KEY (link_type_id) REFERENCES resource_db.link_type(id),
    CONSTRAINT fk_external_link_platform FOREIGN KEY (platform_id) REFERENCES resource_db.platform(id),
    
    -- Indexes
    INDEX idx_entity_link (entity_type, entity_id),
    INDEX idx_link_type (link_type_id),
    INDEX idx_platform (platform_id),
    INDEX idx_url (url),
    INDEX idx_verified (is_verified),
    INDEX idx_deleted_at (deleted_at),
    INDEX idx_archived_at (archived_at),
    INDEX idx_active (is_active),
    INDEX idx_active_deleted (is_active, deleted_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- user_control - User control over entities
CREATE TABLE user_control (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE,
    user_id BIGINT UNSIGNED NOT NULL,
    entity_type VARCHAR(50) NOT NULL COMMENT 'work, recording, person, etc.',
    entity_id BIGINT UNSIGNED NOT NULL,
    control_type_id TINYINT NOT NULL COMMENT 'Full Control, View Only, Edit, etc.',
    control_source VARCHAR(50) NULL COMMENT 'manual, agreement, role',
    source_id BIGINT UNSIGNED NULL COMMENT 'agreement_id if from agreement',
    granted_by BIGINT UNSIGNED NULL,
    granted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    expires_at DATETIME NULL,
    
    -- Audit columns
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    updated_by VARCHAR(255) NULL,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    deleted_by VARCHAR(255) NULL,
    archived_at TIMESTAMP NULL DEFAULT NULL,
    archived_by VARCHAR(255) NULL,
    archive_reason TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    version INT NOT NULL DEFAULT 1,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check TIMESTAMP NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_user_control_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_user_control_type FOREIGN KEY (control_type_id) REFERENCES resource_db.control_type(id),
    CONSTRAINT fk_user_control_granted_by FOREIGN KEY (granted_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_user_entity (user_id, entity_type, entity_id),
    INDEX idx_entity (entity_type, entity_id),
    INDEX idx_control_type (control_type_id),
    INDEX idx_expires_at (expires_at),
    INDEX idx_deleted_at (deleted_at),
    INDEX idx_archived_at (archived_at),
    INDEX idx_active (is_active),
    INDEX idx_active_deleted (is_active, deleted_at),
    INDEX idx_row_hash (row_hash),
    UNIQUE INDEX uk_user_control (user_id, entity_type, entity_id, control_type_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- management_relationship - Management connections
CREATE TABLE management_relationship (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE,
    manager_person_id BIGINT UNSIGNED NULL,
    management_company_id BIGINT UNSIGNED NULL,
    client_type VARCHAR(50) NOT NULL COMMENT 'artist, writer, producer',
    client_id BIGINT UNSIGNED NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    commission_percentage DECIMAL(5,2) NULL,
    territory_id INT NULL,
    is_exclusive BOOLEAN DEFAULT TRUE,
    
    -- Audit columns
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    updated_by VARCHAR(255) NULL,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    deleted_by VARCHAR(255) NULL,
    archived_at TIMESTAMP NULL DEFAULT NULL,
    archived_by VARCHAR(255) NULL,
    archive_reason TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    version INT NOT NULL DEFAULT 1,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check TIMESTAMP NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_management_manager FOREIGN KEY (manager_person_id) REFERENCES person(id),
    CONSTRAINT fk_management_company FOREIGN KEY (management_company_id) REFERENCES organization(id),
    CONSTRAINT fk_management_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    
    -- Constraints
    CONSTRAINT chk_management_entity CHECK (manager_person_id IS NOT NULL OR management_company_id IS NOT NULL),
    
    -- Indexes
    INDEX idx_manager_person (manager_person_id),
    INDEX idx_management_company (management_company_id),
    INDEX idx_client (client_type, client_id),
    INDEX idx_dates (start_date, end_date),
    INDEX idx_territory (territory_id),
    INDEX idx_deleted_at (deleted_at),
    INDEX idx_archived_at (archived_at),
    INDEX idx_active (is_active),
    INDEX idx_active_deleted (is_active, deleted_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- anr_relationship - A&R relationships
CREATE TABLE anr_relationship (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE,
    anr_person_id BIGINT UNSIGNED NOT NULL,
    label_id BIGINT UNSIGNED NOT NULL,
    artist_id BIGINT UNSIGNED NULL,
    project_type VARCHAR(50) NULL,
    start_date DATE NULL,
    end_date DATE NULL,
    notes TEXT NULL,
    
    -- Audit columns
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
    updated_by VARCHAR(255) NULL,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    deleted_by VARCHAR(255) NULL,
    archived_at TIMESTAMP NULL DEFAULT NULL,
    archived_by VARCHAR(255) NULL,
    archive_reason TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    version INT NOT NULL DEFAULT 1,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check TIMESTAMP NULL,
    encryption_version INT NULL,
    data_classification_id INT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_anr_person FOREIGN KEY (anr_person_id) REFERENCES person(id),
    CONSTRAINT fk_anr_label FOREIGN KEY (label_id) REFERENCES label(id),
    CONSTRAINT fk_anr_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    
    -- Indexes
    INDEX idx_anr_person (anr_person_id),
    INDEX idx_label (label_id),
    INDEX idx_artist (artist_id),
    INDEX idx_dates (start_date, end_date),
    INDEX idx_deleted_at (deleted_at),
    INDEX idx_archived_at (archived_at),
    INDEX idx_active (is_active),
    INDEX idx_active_deleted (is_active, deleted_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- SECTION 1: CORE ENTITY PROCEDURES & VIEWS
-- =====================================================


-- =====================================================
-- ENTITY SEARCH PROCEDURES (Fuzzy Matching)
-- =====================================================

DELIMITER $$

-- Universal Entity Search Procedure
CREATE PROCEDURE sp_search_entities(
    IN p_search_term VARCHAR(255),
    IN p_entity_type VARCHAR(50), -- 'person', 'organization', 'all'
    IN p_include_inactive BOOLEAN,
    IN p_limit INT,
    IN p_offset INT
)
BEGIN
    DECLARE v_search_pattern VARCHAR(255);
    
    -- Create search pattern for fuzzy matching
    SET v_search_pattern = CONCAT('%', REPLACE(LOWER(p_search_term), ' ', '%'), '%');
    
    -- Create temporary table for results
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_search_results (
        entity_id CHAR(36),
        entity_type VARCHAR(50),
        primary_name VARCHAR(255),
        legal_name VARCHAR(255),
        match_score DECIMAL(5,2),
        is_active BOOLEAN,
        verified_status VARCHAR(50),
        created_date DATETIME
    );
    
    -- Search persons
    IF p_entity_type IN ('person', 'all') THEN
        INSERT INTO temp_search_results
        SELECT 
            p.id,
            'person' as entity_type,
            p.display_name as primary_name,
            CONCAT_WS(' ', p.first_name, p.middle_name, p.last_name) as legal_name,
            CASE
                WHEN LOWER(p.display_name) = LOWER(p_search_term) THEN 100
                WHEN LOWER(p.display_name) LIKE CONCAT(LOWER(p_search_term), '%') THEN 90
                WHEN LOWER(p.display_name) LIKE v_search_pattern THEN 80
                WHEN LOWER(CONCAT_WS(' ', p.first_name, p.last_name)) LIKE v_search_pattern THEN 70
                ELSE 60
            END as match_score,
            p.is_active,
            p.verification_status,
            p.created_at
        FROM person p
        WHERE (p.is_active = 1 OR p_include_inactive = TRUE)
            AND (
                LOWER(p.display_name) LIKE v_search_pattern
                OR LOWER(p.first_name) LIKE v_search_pattern
                OR LOWER(p.last_name) LIKE v_search_pattern
                OR LOWER(p.stage_name) LIKE v_search_pattern
                OR p.id IN (
                    SELECT entity_id FROM person_alias 
                    WHERE LOWER(alias_name) LIKE v_search_pattern
                        AND (is_active = 1 OR p_include_inactive = TRUE)
                )
                OR p.id IN (
                    SELECT person_id FROM person_identifier
                    WHERE identifier_value LIKE v_search_pattern
                )
            );
    END IF;
    
    -- Search organizations
    IF p_entity_type IN ('organization', 'all') THEN
        INSERT INTO temp_search_results
        SELECT 
            o.id,
            'organization' as entity_type,
            o.name as primary_name,
            o.legal_name,
            CASE
                WHEN LOWER(o.name) = LOWER(p_search_term) THEN 100
                WHEN LOWER(o.name) LIKE CONCAT(LOWER(p_search_term), '%') THEN 90
                WHEN LOWER(o.name) LIKE v_search_pattern THEN 80
                WHEN LOWER(o.legal_name) LIKE v_search_pattern THEN 70
                ELSE 60
            END as match_score,
            o.is_active,
            o.verification_status,
            o.created_at
        FROM organization o
        WHERE (o.is_active = 1 OR p_include_inactive = TRUE)
            AND (
                LOWER(o.name) LIKE v_search_pattern
                OR LOWER(o.legal_name) LIKE v_search_pattern
                OR LOWER(o.trading_name) LIKE v_search_pattern
                OR o.id IN (
                    SELECT entity_id FROM organization_alias 
                    WHERE LOWER(alias_name) LIKE v_search_pattern
                        AND (is_active = 1 OR p_include_inactive = TRUE)
                )
                OR o.id IN (
                    SELECT organization_id FROM organization_identifier
                    WHERE identifier_value LIKE v_search_pattern
                )
            );
    END IF;
    
    -- Return results ordered by match score
    SELECT * FROM temp_search_results
    ORDER BY match_score DESC, created_date DESC
    LIMIT p_limit OFFSET p_offset;
    
    DROP TEMPORARY TABLE IF EXISTS temp_search_results;
END$$

-- Advanced Person Search with Multiple Criteria
CREATE PROCEDURE sp_search_persons_advanced(
    IN p_first_name VARCHAR(100),
    IN p_last_name VARCHAR(100),
    IN p_stage_name VARCHAR(255),
    IN p_ipi_number VARCHAR(50),
    IN p_isni_code VARCHAR(50),
    IN p_birth_date_from DATE,
    IN p_birth_date_to DATE,
    IN p_country_id CHAR(3),
    IN p_person_type_id INT,
    IN p_include_inactive BOOLEAN,
    IN p_limit INT,
    IN p_offset INT
)
BEGIN
    SELECT 
        p.*,
        pt.name as person_type_name,
        c.name as country_name,
        COUNT(DISTINCT w.id) as writer_count,
        COUNT(DISTINCT a.id) as artist_count,
        COUNT(DISTINCT pr.id) as producer_count
    FROM person p
    LEFT JOIN person_type pt ON p.person_type_id = pt.id
    LEFT JOIN country c ON p.nationality_country_id = c.id
    LEFT JOIN writer w ON w.person_id = p.id
    LEFT JOIN artist a ON a.person_id = p.id
    LEFT JOIN producer pr ON pr.person_id = p.id
    WHERE (p.is_active = 1 OR p_include_inactive = TRUE)
        AND (p_first_name IS NULL OR p.first_name LIKE CONCAT('%', p_first_name, '%'))
        AND (p_last_name IS NULL OR p.last_name LIKE CONCAT('%', p_last_name, '%'))
        AND (p_stage_name IS NULL OR p.stage_name LIKE CONCAT('%', p_stage_name, '%'))
        AND (p_ipi_number IS NULL OR EXISTS (
            SELECT 1 FROM person_identifier pi 
            WHERE pi.person_id = p.id 
                AND pi.identifier_type = 'IPI' 
                AND pi.identifier_value = p_ipi_number
        ))
        AND (p_isni_code IS NULL OR EXISTS (
            SELECT 1 FROM person_identifier pi 
            WHERE pi.person_id = p.id 
                AND pi.identifier_type = 'ISNI' 
                AND pi.identifier_value = p_isni_code
        ))
        AND (p_birth_date_from IS NULL OR p.birth_date >= p_birth_date_from)
        AND (p_birth_date_to IS NULL OR p.birth_date <= p_birth_date_to)
        AND (p_country_id IS NULL OR p.nationality_country_id = p_country_id)
        AND (p_person_type_id IS NULL OR p.person_type_id = p_person_type_id)
    GROUP BY p.id
    ORDER BY p.created_at DESC
    LIMIT p_limit OFFSET p_offset;
END$$

-- Search Organizations with Fuzzy Matching
CREATE PROCEDURE sp_search_organizations_advanced(
    IN p_name VARCHAR(255),
    IN p_organization_type_id INT,
    IN p_country_id CHAR(3),
    IN p_tax_id VARCHAR(50),
    IN p_include_inactive BOOLEAN,
    IN p_limit INT,
    IN p_offset INT
)
BEGIN
    SELECT 
        o.*,
        ot.name as organization_type_name,
        c.name as country_name,
        COUNT(DISTINCT l.id) as label_count,
        COUNT(DISTINCT p.id) as publisher_count,
        COUNT(DISTINCT d.id) as distributor_count
    FROM organization o
    LEFT JOIN organization_type ot ON o.organization_type_id = ot.id
    LEFT JOIN country c ON o.country_id = c.id
    LEFT JOIN label l ON l.organization_id = o.id
    LEFT JOIN publisher p ON p.organization_id = o.id
    LEFT JOIN distributor d ON d.organization_id = o.id
    WHERE (o.is_active = 1 OR p_include_inactive = TRUE)
        AND (p_name IS NULL OR (
            o.name LIKE CONCAT('%', p_name, '%')
            OR o.legal_name LIKE CONCAT('%', p_name, '%')
            OR o.trading_name LIKE CONCAT('%', p_name, '%')
        ))
        AND (p_organization_type_id IS NULL OR o.organization_type_id = p_organization_type_id)
        AND (p_country_id IS NULL OR o.country_id = p_country_id)
        AND (p_tax_id IS NULL OR o.tax_id = p_tax_id)
    GROUP BY o.id
    ORDER BY o.created_at DESC
    LIMIT p_limit OFFSET p_offset;
END$$

DELIMITER ;

-- =====================================================
-- OWNERSHIP CHAIN VIEWS
-- =====================================================

-- Writer Ownership Chain View
CREATE OR REPLACE VIEW vw_writer_ownership_chain AS
WITH RECURSIVE ownership_chain AS (
    -- Base case: Direct writer shares
    SELECT 
        ww.work_id,
        ww.writer_id,
        w.person_id,
        p.display_name as writer_name,
        ww.ownership_share,
        ww.role_id,
        wr.name as role_name,
        1 as chain_level,
        CAST(ww.writer_id AS CHAR(1000)) as chain_path
    FROM work_writer ww
    JOIN writer w ON ww.writer_id = w.id
    JOIN person p ON w.person_id = p.id
    LEFT JOIN writer_role wr ON ww.role_id = wr.id
    WHERE ww.is_active = 1
    
    UNION ALL
    
    -- Recursive case: Sub-publisher chains
    SELECT 
        oc.work_id,
        sp.writer_id,
        w.person_id,
        p.display_name as writer_name,
        oc.ownership_share * (sp.share_percentage / 100) as ownership_share,
        sp.role_id,
        wr.name as role_name,
        oc.chain_level + 1,
        CONCAT(oc.chain_path, '->', sp.writer_id)
    FROM ownership_chain oc
    JOIN sub_publisher sp ON sp.original_publisher_id = oc.writer_id
    JOIN writer w ON sp.writer_id = w.id
    JOIN person p ON w.person_id = p.id
    LEFT JOIN writer_role wr ON sp.role_id = wr.id
    WHERE sp.is_active = 1
        AND oc.chain_level < 10 -- Prevent infinite recursion
)
SELECT * FROM ownership_chain;

-- Publisher Ownership Chain View
CREATE OR REPLACE VIEW vw_publisher_ownership_chain AS
WITH RECURSIVE publisher_chain AS (
    -- Base case: Direct publisher shares
    SELECT 
        wp.work_id,
        wp.publisher_id,
        p.organization_id,
        o.name as publisher_name,
        wp.ownership_share,
        wp.role_id,
        pt.name as role_name,
        wp.territory_id,
        t.name as territory_name,
        1 as chain_level,
        CAST(wp.publisher_id AS CHAR(1000)) as chain_path
    FROM work_publisher wp
    JOIN publisher p ON wp.publisher_id = p.id
    JOIN organization o ON p.organization_id = o.id
    LEFT JOIN publisher_type pt ON wp.role_id = pt.id
    LEFT JOIN territory t ON wp.territory_id = t.id
    WHERE wp.is_active = 1
    
    UNION ALL
    
    -- Recursive case: Sub-publisher chains
    SELECT 
        pc.work_id,
        sp.sub_publisher_id,
        p.organization_id,
        o.name as publisher_name,
        pc.ownership_share * (sp.share_percentage / 100) as ownership_share,
        sp.role_id,
        pt.name as role_name,
        COALESCE(sp.territory_id, pc.territory_id) as territory_id,
        t.name as territory_name,
        pc.chain_level + 1,
        CONCAT(pc.chain_path, '->', sp.sub_publisher_id)
    FROM publisher_chain pc
    JOIN sub_publisher_agreement sp ON sp.original_publisher_id = pc.publisher_id
    JOIN publisher p ON sp.sub_publisher_id = p.id
    JOIN organization o ON p.organization_id = o.id
    LEFT JOIN publisher_type pt ON sp.role_id = pt.id
    LEFT JOIN territory t ON COALESCE(sp.territory_id, pc.territory_id) = t.id
    WHERE sp.is_active = 1
        AND pc.chain_level < 10
)
SELECT * FROM publisher_chain;

-- Master Recording Ownership View
CREATE OR REPLACE VIEW vw_recording_ownership_chain AS
SELECT 
    ro.recording_id,
    ro.owner_id,
    ro.owner_type,
    CASE 
        WHEN ro.owner_type = 'person' THEN p.display_name
        WHEN ro.owner_type = 'organization' THEN o.name
        WHEN ro.owner_type = 'label' THEN l_org.name
    END as owner_name,
    ro.ownership_share,
    ro.role_id,
    rr.name as role_name,
    ro.territory_id,
    t.name as territory_name,
    ro.start_date,
    ro.end_date,
    ro.is_active
FROM recording_ownership ro
LEFT JOIN person p ON ro.owner_type = 'person' AND ro.owner_id = p.id
LEFT JOIN organization o ON ro.owner_type = 'organization' AND ro.owner_id = o.id
LEFT JOIN label l ON ro.owner_type = 'label' AND ro.owner_id = l.id
LEFT JOIN organization l_org ON l.organization_id = l_org.id
LEFT JOIN recording_role rr ON ro.role_id = rr.id
LEFT JOIN territory t ON ro.territory_id = t.id
WHERE ro.is_active = 1;

-- =====================================================
-- CREDIT AGGREGATION VIEWS
-- =====================================================

-- Comprehensive Work Credits View
CREATE OR REPLACE VIEW vw_work_credits_summary AS
SELECT 
    w.id as work_id,
    w.title,
    w.iswc,
    -- Writer credits
    GROUP_CONCAT(DISTINCT CONCAT(
        pw.display_name, ' (', 
        COALESCE(wr.name, 'Writer'), ' - ',
        ww.ownership_share, '%)'
    ) ORDER BY ww.ownership_share DESC SEPARATOR ', ') as writers,
    -- Publisher credits
    GROUP_CONCAT(DISTINCT CONCAT(
        po.name, ' (',
        COALESCE(pt.name, 'Publisher'), ' - ',
        wp.ownership_share, '%)'
    ) ORDER BY wp.ownership_share DESC SEPARATOR ', ') as publishers,
    -- Total shares
    SUM(DISTINCT ww.ownership_share) as total_writer_share,
    SUM(DISTINCT wp.ownership_share) as total_publisher_share,
    -- Counts
    COUNT(DISTINCT ww.writer_id) as writer_count,
    COUNT(DISTINCT wp.publisher_id) as publisher_count,
    w.created_at,
    w.updated_at
FROM work w
LEFT JOIN work_writer ww ON w.id = ww.work_id AND ww.is_active = 1
LEFT JOIN writer wr_entity ON ww.writer_id = wr_entity.id
LEFT JOIN person pw ON wr_entity.person_id = pw.id
LEFT JOIN writer_role wr ON ww.role_id = wr.id
LEFT JOIN work_publisher wp ON w.id = wp.work_id AND wp.is_active = 1
LEFT JOIN publisher p ON wp.publisher_id = p.id
LEFT JOIN organization po ON p.organization_id = po.id
LEFT JOIN publisher_type pt ON wp.role_id = pt.id
WHERE w.is_active = 1
GROUP BY w.id;

-- Recording Credits View
CREATE OR REPLACE VIEW vw_recording_credits_summary AS
SELECT 
    r.id as recording_id,
    r.title,
    r.isrc,
    r.duration_ms,
    -- Primary artist
    pa_p.display_name as primary_artist,
    -- Featured artists
    GROUP_CONCAT(DISTINCT 
        CASE WHEN ra.role_id = 2 THEN fa_p.display_name END
        ORDER BY ra.display_order SEPARATOR ', '
    ) as featured_artists,
    -- Producers
    GROUP_CONCAT(DISTINCT prod_p.display_name 
        ORDER BY rp.display_order SEPARATOR ', '
    ) as producers,
    -- Engineers
    GROUP_CONCAT(DISTINCT CONCAT(
        eng_p.display_name, ' (', et.name, ')'
    ) ORDER BY re.display_order SEPARATOR ', ') as engineers,
    -- Musicians
    GROUP_CONCAT(DISTINCT CONCAT(
        mus_p.display_name, ' (', i.name, ')'
    ) ORDER BY rm.display_order SEPARATOR ', ') as musicians,
    r.created_at,
    r.updated_at
FROM recording r
-- Primary artist
LEFT JOIN recording_artist ra_primary ON r.id = ra_primary.recording_id 
    AND ra_primary.role_id = 1 AND ra_primary.is_active = 1
LEFT JOIN artist pa ON ra_primary.artist_id = pa.id
LEFT JOIN person pa_p ON pa.person_id = pa_p.id
-- All artists
LEFT JOIN recording_artist ra ON r.id = ra.recording_id AND ra.is_active = 1
LEFT JOIN artist fa ON ra.artist_id = fa.id
LEFT JOIN person fa_p ON fa.person_id = fa_p.id
-- Producers
LEFT JOIN recording_producer rp ON r.id = rp.recording_id AND rp.is_active = 1
LEFT JOIN producer prod ON rp.producer_id = prod.id
LEFT JOIN person prod_p ON prod.person_id = prod_p.id
-- Engineers
LEFT JOIN recording_engineer re ON r.id = re.recording_id AND re.is_active = 1
LEFT JOIN person eng_p ON re.person_id = eng_p.id
LEFT JOIN engineer_type et ON re.engineer_type_id = et.id
-- Musicians
LEFT JOIN recording_musician rm ON r.id = rm.recording_id AND rm.is_active = 1
LEFT JOIN person mus_p ON rm.person_id = mus_p.id
LEFT JOIN instrument i ON rm.instrument_id = i.id
WHERE r.is_active = 1
GROUP BY r.id;

-- Person Credits Summary View
CREATE OR REPLACE VIEW vw_person_credits_summary AS
SELECT 
    p.id as person_id,
    p.display_name,
    p.ipi_name_number,
    p.isni_code,
    -- Role counts
    COUNT(DISTINCT w.id) as writer_credit_count,
    COUNT(DISTINCT a.id) as artist_credit_count,
    COUNT(DISTINCT pr.id) as producer_credit_count,
    COUNT(DISTINCT CASE WHEN re.person_id IS NOT NULL THEN re.recording_id END) as engineer_credit_count,
    COUNT(DISTINCT CASE WHEN rm.person_id IS NOT NULL THEN rm.recording_id END) as musician_credit_count,
    -- Work counts
    COUNT(DISTINCT ww.work_id) as works_written,
    COUNT(DISTINCT ra.recording_id) as recordings_performed,
    COUNT(DISTINCT rp.recording_id) as recordings_produced,
    -- Latest activity
    GREATEST(
        COALESCE(MAX(ww.created_at), '1900-01-01'),
        COALESCE(MAX(ra.created_at), '1900-01-01'),
        COALESCE(MAX(rp.created_at), '1900-01-01'),
        COALESCE(MAX(re.created_at), '1900-01-01'),
        COALESCE(MAX(rm.created_at), '1900-01-01')
    ) as last_credit_date,
    p.created_at,
    p.updated_at
FROM person p
LEFT JOIN writer w ON p.id = w.person_id AND w.is_active = 1
LEFT JOIN artist a ON p.id = a.person_id AND a.is_active = 1
LEFT JOIN producer pr ON p.id = pr.person_id AND pr.is_active = 1
LEFT JOIN work_writer ww ON w.id = ww.writer_id AND ww.is_active = 1
LEFT JOIN recording_artist ra ON a.id = ra.artist_id AND ra.is_active = 1
LEFT JOIN recording_producer rp ON pr.id = rp.producer_id AND rp.is_active = 1
LEFT JOIN recording_engineer re ON p.id = re.person_id AND re.is_active = 1
LEFT JOIN recording_musician rm ON p.id = rm.person_id AND rm.is_active = 1
WHERE p.is_active = 1
GROUP BY p.id;

-- =====================================================
-- ENTITY RELATIONSHIP MAPPING VIEWS
-- =====================================================

-- Person Relationships Network View
CREATE OR REPLACE VIEW vw_person_relationships AS
SELECT 
    pr.person_id,
    p1.display_name as person_name,
    pr.related_person_id,
    p2.display_name as related_person_name,
    pr.relationship_type_id,
    rt.name as relationship_type,
    pr.start_date,
    pr.end_date,
    pr.is_active,
    -- Reverse relationship
    CASE 
        WHEN rt.reverse_type_id IS NOT NULL THEN rt2.name
        ELSE CONCAT('Related to ', rt.name)
    END as reverse_relationship_type
FROM person_relationship pr
JOIN person p1 ON pr.person_id = p1.id
JOIN person p2 ON pr.related_person_id = p2.id
JOIN relationship_type rt ON pr.relationship_type_id = rt.id
LEFT JOIN relationship_type rt2 ON rt.reverse_type_id = rt2.id
WHERE pr.is_active = 1
    AND p1.is_active = 1
    AND p2.is_active = 1;

-- Organization Relationships View
CREATE OR REPLACE VIEW vw_organization_relationships AS
SELECT 
    o1.id as organization_id,
    o1.name as organization_name,
    o1.organization_type_id,
    ot1.name as organization_type,
    o2.id as related_organization_id,
    o2.name as related_organization_name,
    o2.organization_type_id as related_organization_type_id,
    ot2.name as related_organization_type,
    orel.relationship_type,
    orel.start_date,
    orel.end_date,
    orel.is_active
FROM organization_relationship orel
JOIN organization o1 ON orel.organization_id = o1.id
JOIN organization o2 ON orel.related_organization_id = o2.id
JOIN organization_type ot1 ON o1.organization_type_id = ot1.id
JOIN organization_type ot2 ON o2.organization_type_id = ot2.id
WHERE orel.is_active = 1
    AND o1.is_active = 1
    AND o2.is_active = 1;

-- Entity Collaboration Network View
CREATE OR REPLACE VIEW vw_collaboration_network AS
-- Writers who have worked together
SELECT 
    w1.writer_id as entity1_id,
    'writer' as entity1_type,
    p1.display_name as entity1_name,
    w2.writer_id as entity2_id,
    'writer' as entity2_type,
    p2.display_name as entity2_name,
    'co-writer' as relationship_type,
    COUNT(DISTINCT w1.work_id) as collaboration_count,
    MIN(w1.created_at) as first_collaboration,
    MAX(w1.created_at) as last_collaboration
FROM work_writer w1
JOIN work_writer w2 ON w1.work_id = w2.work_id AND w1.writer_id < w2.writer_id
JOIN writer wr1 ON w1.writer_id = wr1.id
JOIN writer wr2 ON w2.writer_id = wr2.id
JOIN person p1 ON wr1.person_id = p1.id
JOIN person p2 ON wr2.person_id = p2.id
WHERE w1.is_active = 1 AND w2.is_active = 1
GROUP BY w1.writer_id, w2.writer_id

UNION ALL

-- Artists who have performed together
SELECT 
    a1.artist_id as entity1_id,
    'artist' as entity1_type,
    p1.display_name as entity1_name,
    a2.artist_id as entity2_id,
    'artist' as entity2_type,
    p2.display_name as entity2_name,
    'co-performer' as relationship_type,
    COUNT(DISTINCT a1.recording_id) as collaboration_count,
    MIN(a1.created_at) as first_collaboration,
    MAX(a1.created_at) as last_collaboration
FROM recording_artist a1
JOIN recording_artist a2 ON a1.recording_id = a2.recording_id AND a1.artist_id < a2.artist_id
JOIN artist ar1 ON a1.artist_id = ar1.id
JOIN artist ar2 ON a2.artist_id = ar2.id
JOIN person p1 ON ar1.person_id = p1.id
JOIN person p2 ON ar2.person_id = p2.id
WHERE a1.is_active = 1 AND a2.is_active = 1
GROUP BY a1.artist_id, a2.artist_id;

-- =====================================================
-- AUDIT TRAIL PROCEDURES
-- =====================================================

DELIMITER $$

-- Create Audit Log Entry
CREATE PROCEDURE sp_create_audit_log(
    IN p_table_name VARCHAR(100),
    IN p_record_id CHAR(36),
    IN p_action VARCHAR(50),
    IN p_user_id CHAR(36),
    IN p_old_values JSON,
    IN p_new_values JSON,
    IN p_ip_address VARCHAR(45),
    IN p_user_agent VARCHAR(500)
)
BEGIN
    INSERT INTO audit_log (
        id,
        table_name,
        record_id,
        action,
        user_id,
        old_values,
        new_values,
        ip_address,
        user_agent,
        created_at
    ) VALUES (
        UUID(),
        p_table_name,
        p_record_id,
        p_action,
        p_user_id,
        p_old_values,
        p_new_values,
        p_ip_address,
        p_user_agent,
        NOW()
    );
END$$

-- Get Audit History for a Record
CREATE PROCEDURE sp_get_audit_history(
    IN p_table_name VARCHAR(100),
    IN p_record_id CHAR(36),
    IN p_limit INT,
    IN p_offset INT
)
BEGIN
    SELECT 
        al.*,
        u.email as user_email,
        CONCAT_WS(' ', u.first_name, u.last_name) as user_name
    FROM audit_log al
    LEFT JOIN user u ON al.user_id = u.id
    WHERE al.table_name = p_table_name
        AND al.record_id = p_record_id
    ORDER BY al.created_at DESC
    LIMIT p_limit OFFSET p_offset;
END$$

-- Create Entity History Entry
CREATE PROCEDURE sp_create_entity_history(
    IN p_entity_type VARCHAR(50),
    IN p_entity_id CHAR(36),
    IN p_field_name VARCHAR(100),
    IN p_old_value TEXT,
    IN p_new_value TEXT,
    IN p_changed_by CHAR(36),
    IN p_change_reason TEXT
)
BEGIN
    INSERT INTO entity_history (
        id,
        entity_type,
        entity_id,
        field_name,
        old_value,
        new_value,
        changed_by,
        change_reason,
        changed_at
    ) VALUES (
        UUID(),
        p_entity_type,
        p_entity_id,
        p_field_name,
        p_old_value,
        p_new_value,
        p_changed_by,
        p_change_reason,
        NOW()
    );
END$$

DELIMITER ;

-- =====================================================
-- DATA VALIDATION PROCEDURES
-- =====================================================

DELIMITER $$

-- Validate Person Data
CREATE PROCEDURE sp_validate_person(
    IN p_person_id CHAR(36),
    OUT p_is_valid BOOLEAN,
    OUT p_validation_errors JSON
)
BEGIN
    DECLARE v_errors JSON DEFAULT JSON_ARRAY();
    DECLARE v_error_count INT DEFAULT 0;
    
    -- Check required fields
    SELECT 
        CASE WHEN first_name IS NULL OR first_name = '' 
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'first_name', 'error', 'First name is required'))
            ELSE v_errors
        END,
        CASE WHEN last_name IS NULL OR last_name = '' 
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'last_name', 'error', 'Last name is required'))
            ELSE v_errors
        END,
        CASE WHEN display_name IS NULL OR display_name = '' 
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'display_name', 'error', 'Display name is required'))
            ELSE v_errors
        END,
        CASE WHEN email IS NOT NULL AND email NOT REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'email', 'error', 'Invalid email format'))
            ELSE v_errors
        END,
        CASE WHEN birth_date IS NOT NULL AND birth_date > CURDATE()
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'birth_date', 'error', 'Birth date cannot be in the future'))
            ELSE v_errors
        END,
        CASE WHEN death_date IS NOT NULL AND birth_date IS NOT NULL AND death_date < birth_date
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'death_date', 'error', 'Death date cannot be before birth date'))
            ELSE v_errors
        END
    INTO v_errors, v_errors, v_errors, v_errors, v_errors, v_errors
    FROM person
    WHERE id = p_person_id;
    
    -- Check for duplicate IPI numbers
    IF EXISTS (
        SELECT 1 FROM person_identifier pi1
        JOIN person_identifier pi2 ON pi1.identifier_value = pi2.identifier_value
        WHERE pi1.person_id = p_person_id
            AND pi2.person_id != p_person_id
            AND pi1.identifier_type = 'IPI'
            AND pi2.identifier_type = 'IPI'
            AND pi1.is_active = 1
            AND pi2.is_active = 1
    ) THEN
        SET v_errors = JSON_ARRAY_APPEND(v_errors, '$', 
            JSON_OBJECT('field', 'ipi_number', 'error', 'IPI number already exists for another person'));
    END IF;
    
    SET v_error_count = JSON_LENGTH(v_errors);
    SET p_is_valid = (v_error_count = 0);
    SET p_validation_errors = v_errors;
END$$

-- Validate Organization Data
CREATE PROCEDURE sp_validate_organization(
    IN p_organization_id CHAR(36),
    OUT p_is_valid BOOLEAN,
    OUT p_validation_errors JSON
)
BEGIN
    DECLARE v_errors JSON DEFAULT JSON_ARRAY();
    DECLARE v_error_count INT DEFAULT 0;
    
    -- Check required fields
    SELECT 
        CASE WHEN name IS NULL OR name = '' 
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'name', 'error', 'Organization name is required'))
            ELSE v_errors
        END,
        CASE WHEN organization_type_id IS NULL 
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'organization_type_id', 'error', 'Organization type is required'))
            ELSE v_errors
        END,
        CASE WHEN country_id IS NULL 
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'country_id', 'error', 'Country is required'))
            ELSE v_errors
        END,
        CASE WHEN email IS NOT NULL AND email NOT REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'email', 'error', 'Invalid email format'))
            ELSE v_errors
        END,
        CASE WHEN website IS NOT NULL AND website NOT REGEXP '^https?://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
            THEN JSON_ARRAY_APPEND(v_errors, '$', JSON_OBJECT('field', 'website', 'error', 'Invalid website URL format'))
            ELSE v_errors
        END
    INTO v_errors, v_errors, v_errors, v_errors, v_errors
    FROM organization
    WHERE id = p_organization_id;
    
    -- Check for duplicate tax IDs in same country
    IF EXISTS (
        SELECT 1 FROM organization o1
        JOIN organization o2 ON o1.tax_id = o2.tax_id AND o1.country_id = o2.country_id
        WHERE o1.id = p_organization_id
            AND o2.id != p_organization_id
            AND o1.tax_id IS NOT NULL
            AND o1.is_active = 1
            AND o2.is_active = 1
    ) THEN
        SET v_errors = JSON_ARRAY_APPEND(v_errors, '$', 
            JSON_OBJECT('field', 'tax_id', 'error', 'Tax ID already exists for another organization in this country'));
    END IF;
    
    SET v_error_count = JSON_LENGTH(v_errors);
    SET p_is_valid = (v_error_count = 0);
    SET p_validation_errors = v_errors;
END$$

-- Validate Entity Relationships
CREATE PROCEDURE sp_validate_entity_relationships(
    IN p_entity_type VARCHAR(50),
    IN p_entity_id CHAR(36),
    OUT p_is_valid BOOLEAN,
    OUT p_validation_errors JSON
)
BEGIN
    DECLARE v_errors JSON DEFAULT JSON_ARRAY();
    DECLARE v_total_share DECIMAL(5,2);
    
    IF p_entity_type = 'work' THEN
        -- Check writer shares
        SELECT SUM(ownership_share) INTO v_total_share
        FROM work_writer
        WHERE work_id = p_entity_id AND is_active = 1;
        
        IF v_total_share != 100 THEN
            SET v_errors = JSON_ARRAY_APPEND(v_errors, '$', 
                JSON_OBJECT('field', 'writer_shares', 'error', 
                    CONCAT('Total writer shares must equal 100%. Current: ', COALESCE(v_total_share, 0), '%')));
        END IF;
        
        -- Check publisher shares
        SELECT SUM(ownership_share) INTO v_total_share
        FROM work_publisher
        WHERE work_id = p_entity_id AND is_active = 1;
        
        IF v_total_share > 100 THEN
            SET v_errors = JSON_ARRAY_APPEND(v_errors, '$', 
                JSON_OBJECT('field', 'publisher_shares', 'error', 
                    CONCAT('Total publisher shares cannot exceed 100%. Current: ', v_total_share, '%')));
        END IF;
        
    ELSEIF p_entity_type = 'recording' THEN
        -- Check for at least one primary artist
        IF NOT EXISTS (
            SELECT 1 FROM recording_artist
            WHERE recording_id = p_entity_id 
                AND role_id = 1 -- Primary artist
                AND is_active = 1
        ) THEN
            SET v_errors = JSON_ARRAY_APPEND(v_errors, '$', 
                JSON_OBJECT('field', 'primary_artist', 'error', 'Recording must have at least one primary artist'));
        END IF;
        
        -- Check ownership shares
        SELECT SUM(ownership_share) INTO v_total_share
        FROM recording_ownership
        WHERE recording_id = p_entity_id 
            AND is_active = 1
            AND (end_date IS NULL OR end_date > CURDATE());
        
        IF v_total_share != 100 AND v_total_share IS NOT NULL THEN
            SET v_errors = JSON_ARRAY_APPEND(v_errors, '$', 
                JSON_OBJECT('field', 'ownership_shares', 'error', 
                    CONCAT('Total ownership shares must equal 100%. Current: ', v_total_share, '%')));
        END IF;
    END IF;
    
    SET p_is_valid = (JSON_LENGTH(v_errors) = 0);
    SET p_validation_errors = v_errors;
END$$

DELIMITER ;

-- =====================================================
-- SOFT DELETE AND RESTORE PROCEDURES
-- =====================================================

DELIMITER $$

-- Generic Soft Delete Procedure
CREATE PROCEDURE sp_soft_delete(
    IN p_table_name VARCHAR(100),
    IN p_record_id CHAR(36),
    IN p_deleted_by CHAR(36),
    IN p_delete_reason TEXT
)
BEGIN
    DECLARE v_sql TEXT;
    DECLARE v_old_values JSON;
    
    -- Get current values for audit
    SET @sql = CONCAT('SELECT JSON_OBJECT(''is_active'', is_active, ''is_deleted'', is_deleted) INTO @old_values FROM ', p_table_name, ' WHERE id = ?');
    PREPARE stmt FROM @sql;
    EXECUTE stmt USING p_record_id;
    DEALLOCATE PREPARE stmt;
    
    -- Update the record
    SET @sql = CONCAT('UPDATE ', p_table_name, ' SET is_active = 0, is_deleted = 1, deleted_at = NOW(), deleted_by = ? WHERE id = ?');
    PREPARE stmt FROM @sql;
    EXECUTE stmt USING p_deleted_by, p_record_id;
    DEALLOCATE PREPARE stmt;
    
    -- Create audit log
    CALL sp_create_audit_log(
        p_table_name,
        p_record_id,
        'SOFT_DELETE',
        p_deleted_by,
        @old_values,
        JSON_OBJECT('is_active', 0, 'is_deleted', 1, 'reason', p_delete_reason),
        NULL,
        NULL
    );
    
    -- Create entity history
    CALL sp_create_entity_history(
        p_table_name,
        p_record_id,
        'is_deleted',
        '0',
        '1',
        p_deleted_by,
        p_delete_reason
    );
END$$

-- Generic Restore Procedure
CREATE PROCEDURE sp_restore_deleted(
    IN p_table_name VARCHAR(100),
    IN p_record_id CHAR(36),
    IN p_restored_by CHAR(36),
    IN p_restore_reason TEXT
)
BEGIN
    DECLARE v_sql TEXT;
    DECLARE v_old_values JSON;
    
    -- Check if record exists and is deleted
    SET @sql = CONCAT('SELECT JSON_OBJECT(''is_active'', is_active, ''is_deleted'', is_deleted) INTO @old_values FROM ', p_table_name, ' WHERE id = ? AND is_deleted = 1');
    PREPARE stmt FROM @sql;
    EXECUTE stmt USING p_record_id;
    DEALLOCATE PREPARE stmt;
    
    IF @old_values IS NOT NULL THEN
        -- Restore the record
        SET @sql = CONCAT('UPDATE ', p_table_name, ' SET is_active = 1, is_deleted = 0, deleted_at = NULL, deleted_by = NULL WHERE id = ?');
        PREPARE stmt FROM @sql;
        EXECUTE stmt USING p_record_id;
        DEALLOCATE PREPARE stmt;
        
        -- Create audit log
        CALL sp_create_audit_log(
            p_table_name,
            p_record_id,
            'RESTORE',
            p_restored_by,
            @old_values,
            JSON_OBJECT('is_active', 1, 'is_deleted', 0, 'reason', p_restore_reason),
            NULL,
            NULL
        );
        
        -- Create entity history
        CALL sp_create_entity_history(
            p_table_name,
            p_record_id,
            'is_deleted',
            '1',
            '0',
            p_restored_by,
            p_restore_reason
        );
    END IF;
END$$

-- Cascade Soft Delete for Person
CREATE PROCEDURE sp_soft_delete_person_cascade(
    IN p_person_id CHAR(36),
    IN p_deleted_by CHAR(36),
    IN p_delete_reason TEXT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Soft delete the person
    CALL sp_soft_delete('person', p_person_id, p_deleted_by, p_delete_reason);
    
    -- Soft delete related entities
    UPDATE writer SET is_active = 0, is_deleted = 1, deleted_at = NOW(), deleted_by = p_deleted_by 
    WHERE person_id = p_person_id;
    
    UPDATE artist SET is_active = 0, is_deleted = 1, deleted_at = NOW(), deleted_by = p_deleted_by 
    WHERE person_id = p_person_id;
    
    UPDATE producer SET is_active = 0, is_deleted = 1, deleted_at = NOW(), deleted_by = p_deleted_by 
    WHERE person_id = p_person_id;
    
    UPDATE person_alias SET is_active = 0 WHERE entity_id = p_person_id;
    UPDATE person_identifier SET is_active = 0 WHERE person_id = p_person_id;
    UPDATE person_contact SET is_active = 0 WHERE person_id = p_person_id;
    UPDATE person_social_media SET is_active = 0 WHERE person_id = p_person_id;
    
    COMMIT;
END$$

-- Cascade Soft Delete for Organization
CREATE PROCEDURE sp_soft_delete_organization_cascade(
    IN p_organization_id CHAR(36),
    IN p_deleted_by CHAR(36),
    IN p_delete_reason TEXT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Soft delete the organization
    CALL sp_soft_delete('organization', p_organization_id, p_deleted_by, p_delete_reason);
    
    -- Soft delete related entities
    UPDATE publisher SET is_active = 0, is_deleted = 1, deleted_at = NOW(), deleted_by = p_deleted_by 
    WHERE organization_id = p_organization_id;
    
    UPDATE label SET is_active = 0, is_deleted = 1, deleted_at = NOW(), deleted_by = p_deleted_by 
    WHERE organization_id = p_organization_id;
    
    UPDATE distributor SET is_active = 0, is_deleted = 1, deleted_at = NOW(), deleted_by = p_deleted_by 
    WHERE organization_id = p_organization_id;
    
    UPDATE organization_alias SET is_active = 0 WHERE entity_id = p_organization_id;
    UPDATE organization_identifier SET is_active = 0 WHERE organization_id = p_organization_id;
    UPDATE organization_contact SET is_active = 0 WHERE organization_id = p_organization_id;
    UPDATE organization_social_media SET is_active = 0 WHERE organization_id = p_organization_id;
    
    COMMIT;
END$$

DELIMITER ;

-- =====================================================
-- ADDITIONAL UTILITY VIEWS
-- =====================================================

-- Entity Verification Status View
CREATE OR REPLACE VIEW vw_entity_verification_status AS
SELECT 
    'person' as entity_type,
    p.id as entity_id,
    p.display_name as entity_name,
    p.verification_status,
    p.verification_date,
    p.verified_by,
    u.email as verified_by_email,
    p.verification_notes,
    p.created_at,
    p.updated_at
FROM person p
LEFT JOIN user u ON p.verified_by = u.id
WHERE p.is_active = 1

UNION ALL

SELECT 
    'organization' as entity_type,
    o.id as entity_id,
    o.name as entity_name,
    o.verification_status,
    o.verification_date,
    o.verified_by,
    u.email as verified_by_email,
    o.verification_notes,
    o.created_at,
    o.updated_at
FROM organization o
LEFT JOIN user u ON o.verified_by = u.id
WHERE o.is_active = 1;

-- Entity Activity Summary View
CREATE OR REPLACE VIEW vw_entity_activity_summary AS
SELECT 
    p.id as entity_id,
    'person' as entity_type,
    p.display_name as entity_name,
    COUNT(DISTINCT ww.work_id) as work_count,
    COUNT(DISTINCT ra.recording_id) as recording_count,
    COUNT(DISTINCT r.id) as release_count,
    COUNT(DISTINCT pr.project_id) as project_count,
    MAX(GREATEST(
        COALESCE(ww.created_at, '1900-01-01'),
        COALESCE(ra.created_at, '1900-01-01'),
        COALESCE(r.created_at, '1900-01-01'),
        COALESCE(pr.created_at, '1900-01-01')
    )) as last_activity_date
FROM person p
LEFT JOIN writer w ON p.id = w.person_id AND w.is_active = 1
LEFT JOIN work_writer ww ON w.id = ww.writer_id AND ww.is_active = 1
LEFT JOIN artist a ON p.id = a.person_id AND a.is_active = 1
LEFT JOIN recording_artist ra ON a.id = ra.artist_id AND ra.is_active = 1
LEFT JOIN release r ON r.primary_artist_id = a.id AND r.is_active = 1
LEFT JOIN person_role pr ON p.id = pr.person_id AND pr.is_active = 1
WHERE p.is_active = 1
GROUP BY p.id

UNION ALL

SELECT 
    o.id as entity_id,
    'organization' as entity_type,
    o.name as entity_name,
    COUNT(DISTINCT wp.work_id) as work_count,
    COUNT(DISTINCT ro.recording_id) as recording_count,
    COUNT(DISTINCT r.id) as release_count,
    COUNT(DISTINCT orr.project_id) as project_count,
    MAX(GREATEST(
        COALESCE(wp.created_at, '1900-01-01'),
        COALESCE(ro.created_at, '1900-01-01'),
        COALESCE(r.created_at, '1900-01-01'),
        COALESCE(orr.created_at, '1900-01-01')
    )) as last_activity_date
FROM organization o
LEFT JOIN publisher p ON o.id = p.organization_id AND p.is_active = 1
LEFT JOIN work_publisher wp ON p.id = wp.publisher_id AND wp.is_active = 1
LEFT JOIN label l ON o.id = l.organization_id AND l.is_active = 1
LEFT JOIN recording_ownership ro ON l.id = ro.owner_id AND ro.owner_type = 'label' AND ro.is_active = 1
LEFT JOIN release r ON r.label_id = l.id AND r.is_active = 1
LEFT JOIN organization_role orr ON o.id = orr.organization_id AND orr.is_active = 1
WHERE o.is_active = 1
GROUP BY o.id;

-- =====================================================
-- PERFORMANCE OPTIMIZATION INDEXES
-- =====================================================

-- Add indexes for frequently searched fields
CREATE INDEX idx_person_search ON person(display_name, first_name, last_name, stage_name);
CREATE INDEX idx_organization_search ON organization(name, legal_name, trading_name);
CREATE INDEX idx_person_alias_search ON person_alias(alias_name);
CREATE INDEX idx_organization_alias_search ON organization_alias(alias_name);
CREATE INDEX idx_person_identifier_search ON person_identifier(identifier_type, identifier_value);
CREATE INDEX idx_organization_identifier_search ON organization_identifier(identifier_type, identifier_value);

-- Add indexes for relationship queries
CREATE INDEX idx_work_writer_work ON work_writer(work_id, is_active);
CREATE INDEX idx_work_writer_writer ON work_writer(writer_id, is_active);
CREATE INDEX idx_work_publisher_work ON work_publisher(work_id, is_active);
CREATE INDEX idx_work_publisher_publisher ON work_publisher(publisher_id, is_active);
CREATE INDEX idx_recording_artist_recording ON recording_artist(recording_id, is_active);
CREATE INDEX idx_recording_artist_artist ON recording_artist(artist_id, is_active);

-- Add indexes for audit queries
CREATE INDEX idx_audit_log_lookup ON audit_log(table_name, record_id, created_at);
CREATE INDEX idx_entity_history_lookup ON entity_history(entity_type, entity_id, changed_at);

-- =============================================
-- SECTION 2: SECURITY
-- =============================================

-- encryption_key - Master encryption keys
CREATE TABLE encryption_key (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    key_name VARCHAR(100) NOT NULL,
    key_type_id INT NOT NULL COMMENT 'FK to resource_db.encryption_key_type',
    algorithm VARCHAR(50) NOT NULL DEFAULT 'AES-256-GCM',
    key_value VARBINARY(512) NOT NULL COMMENT 'Encrypted key material',
    key_salt VARBINARY(256) NOT NULL,
    key_version INT NOT NULL DEFAULT 1,
    purpose VARCHAR(200) NULL,
    created_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_date DATETIME NULL,
    last_used_date DATETIME NULL,
    rotation_schedule_days INT DEFAULT 90,
    next_rotation_date DATE NULL,
    is_primary BOOLEAN DEFAULT TRUE,
    status_id INT NOT NULL COMMENT 'FK to resource_db.encryption_key_status',
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    last_integrity_check DATETIME NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_encryption_key_type FOREIGN KEY (key_type_id) REFERENCES resource_db.encryption_key_type(id),
    CONSTRAINT fk_encryption_key_status FOREIGN KEY (status_id) REFERENCES resource_db.encryption_key_status(id),
    CONSTRAINT fk_encryption_key_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_encryption_key_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_encryption_key_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_encryption_key_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_key_type (key_type_id),
    INDEX idx_key_status (status_id),
    INDEX idx_key_primary (is_primary),
    INDEX idx_next_rotation (next_rotation_date),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- encryption_key_rotation - Key rotation history
CREATE TABLE encryption_key_rotation (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    old_key_id BIGINT UNSIGNED NOT NULL,
    new_key_id BIGINT UNSIGNED NOT NULL,
    rotation_type_id INT NOT NULL COMMENT 'FK to resource_db.key_rotation_type',
    rotation_reason VARCHAR(500) NULL,
    started_at DATETIME NOT NULL,
    completed_at DATETIME NULL,
    records_affected BIGINT DEFAULT 0,
    records_processed BIGINT DEFAULT 0,
    status_id INT NOT NULL COMMENT 'FK to resource_db.rotation_status',
    error_message TEXT NULL,
    rollback_performed BOOLEAN DEFAULT FALSE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_key_rotation_old_key FOREIGN KEY (old_key_id) REFERENCES encryption_key(id),
    CONSTRAINT fk_key_rotation_new_key FOREIGN KEY (new_key_id) REFERENCES encryption_key(id),
    CONSTRAINT fk_key_rotation_type FOREIGN KEY (rotation_type_id) REFERENCES resource_db.key_rotation_type(id),
    CONSTRAINT fk_key_rotation_status FOREIGN KEY (status_id) REFERENCES resource_db.rotation_status(id),
    CONSTRAINT fk_key_rotation_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_key_rotation_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_rotation_status (status_id),
    INDEX idx_rotation_dates (started_at, completed_at),
    INDEX idx_old_key (old_key_id),
    INDEX idx_new_key (new_key_id),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- field_encryption - Which fields are encrypted
CREATE TABLE field_encryption (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    table_name VARCHAR(100) NOT NULL,
    column_name VARCHAR(100) NOT NULL,
    encryption_type_id INT NOT NULL COMMENT 'FK to resource_db.field_encryption_type',
    encryption_key_id BIGINT UNSIGNED NOT NULL,
    algorithm VARCHAR(50) NOT NULL DEFAULT 'AES-256-GCM',
    is_searchable BOOLEAN DEFAULT FALSE,
    search_index_type VARCHAR(50) NULL COMMENT 'blind index, phonetic, etc',
    mask_pattern VARCHAR(100) NULL COMMENT 'e.g. XXX-XX-#### for SSN',
    sensitivity_level_id INT NOT NULL COMMENT 'FK to resource_db.data_sensitivity_level',
    compliance_tags JSON NULL COMMENT '["GDPR", "PCI", "HIPAA"]',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_field_encryption_type FOREIGN KEY (encryption_type_id) REFERENCES resource_db.field_encryption_type(id),
    CONSTRAINT fk_field_encryption_key FOREIGN KEY (encryption_key_id) REFERENCES encryption_key(id),
    CONSTRAINT fk_field_encryption_sensitivity FOREIGN KEY (sensitivity_level_id) REFERENCES resource_db.data_sensitivity_level(id),
    CONSTRAINT fk_field_encryption_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_field_encryption_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_field_encryption_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_table_column (table_name, column_name),
    INDEX idx_encryption_key (encryption_key_id),
    INDEX idx_sensitivity (sensitivity_level_id),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- data_masking_rule - Data masking policies
CREATE TABLE data_masking_rule (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    rule_name VARCHAR(100) NOT NULL,
    table_name VARCHAR(100) NOT NULL,
    column_name VARCHAR(100) NOT NULL,
    masking_type_id INT NOT NULL COMMENT 'FK to resource_db.data_masking_type',
    mask_pattern VARCHAR(100) NULL,
    mask_character CHAR(1) DEFAULT 'X',
    preserve_length BOOLEAN DEFAULT TRUE,
    preserve_format BOOLEAN DEFAULT TRUE,
    role_exceptions JSON NULL COMMENT 'Roles that can see unmasked data',
    user_exceptions JSON NULL COMMENT 'User IDs that can see unmasked data',
    condition_sql TEXT NULL COMMENT 'Additional WHERE clause conditions',
    priority INT DEFAULT 100,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_masking_rule_type FOREIGN KEY (masking_type_id) REFERENCES resource_db.data_masking_type(id),
    CONSTRAINT fk_masking_rule_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_masking_rule_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_masking_rule_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_masking_rule_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_table_column (table_name, column_name),
    INDEX idx_priority (priority),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- access_control_list - Fine-grained permissions
CREATE TABLE access_control_list (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    resource_type VARCHAR(50) NOT NULL COMMENT 'table, api_endpoint, feature, etc',
    resource_identifier VARCHAR(200) NOT NULL,
    principal_type_id INT NOT NULL COMMENT 'FK to resource_db.principal_type',
    principal_id BIGINT UNSIGNED NOT NULL,
    permission_type_id INT NOT NULL COMMENT 'FK to resource_db.permission_type',
    grant_type_id INT NOT NULL COMMENT 'FK to resource_db.grant_type',
    conditions JSON NULL COMMENT 'Additional conditions for access',
    valid_from DATETIME NULL,
    valid_until DATETIME NULL,
    priority INT DEFAULT 100 COMMENT 'Higher priority rules override lower',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_acl_principal_type FOREIGN KEY (principal_type_id) REFERENCES resource_db.principal_type(id),
    CONSTRAINT fk_acl_permission_type FOREIGN KEY (permission_type_id) REFERENCES resource_db.permission_type(id),
    CONSTRAINT fk_acl_grant_type FOREIGN KEY (grant_type_id) REFERENCES resource_db.grant_type(id),
    CONSTRAINT fk_acl_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_acl_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_acl_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_acl_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_resource (resource_type, resource_identifier),
    INDEX idx_principal (principal_type_id, principal_id),
    INDEX idx_permission (permission_type_id),
    INDEX idx_grant_type (grant_type_id),
    INDEX idx_valid_dates (valid_from, valid_until),
    INDEX idx_priority (priority),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- row_level_security - Row-level access rules
CREATE TABLE row_level_security (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    policy_name VARCHAR(100) NOT NULL,
    table_name VARCHAR(100) NOT NULL,
    policy_type_id INT NOT NULL COMMENT 'FK to resource_db.rls_policy_type',
    applies_to_id INT NOT NULL COMMENT 'FK to resource_db.rls_applies_to',
    role_id BIGINT UNSIGNED NULL,
    user_id BIGINT UNSIGNED NULL,
    filter_predicate TEXT NOT NULL COMMENT 'SQL WHERE clause',
    check_predicate TEXT NULL COMMENT 'SQL CHECK constraint',
    error_message VARCHAR(500) NULL,
    bypass_rls BOOLEAN DEFAULT FALSE COMMENT 'For admin override',
    priority INT DEFAULT 100,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_rls_policy_type FOREIGN KEY (policy_type_id) REFERENCES resource_db.rls_policy_type(id),
    CONSTRAINT fk_rls_applies_to FOREIGN KEY (applies_to_id) REFERENCES resource_db.rls_applies_to(id),
    CONSTRAINT fk_rls_role FOREIGN KEY (role_id) REFERENCES role(id),
    CONSTRAINT fk_rls_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_rls_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_rls_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_rls_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rls_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_table_name (table_name),
    INDEX idx_role_id (role_id),
    INDEX idx_user_id (user_id),
    INDEX idx_priority (priority),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- column_level_security - Column-level access rules
CREATE TABLE column_level_security (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    table_name VARCHAR(100) NOT NULL,
    column_name VARCHAR(100) NOT NULL,
    role_id BIGINT UNSIGNED NULL,
    user_id BIGINT UNSIGNED NULL,
    permission_id INT NOT NULL COMMENT 'FK to resource_db.column_permission_type',
    mask_on_read BOOLEAN DEFAULT FALSE,
    audit_access BOOLEAN DEFAULT TRUE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_cls_permission FOREIGN KEY (permission_id) REFERENCES resource_db.column_permission_type(id),
    CONSTRAINT fk_cls_role FOREIGN KEY (role_id) REFERENCES role(id),
    CONSTRAINT fk_cls_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_cls_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_cls_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_cls_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_cls_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_column_principal (table_name, column_name, role_id, user_id),
    INDEX idx_table_column (table_name, column_name),
    INDEX idx_role_id (role_id),
    INDEX idx_user_id (user_id),
    INDEX idx_permission (permission_id),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- security_audit_log - Security-specific events
CREATE TABLE security_audit_log (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    event_type VARCHAR(50) NOT NULL,
    severity_id INT NOT NULL COMMENT 'FK to resource_db.security_severity',
    user_id BIGINT UNSIGNED NULL,
    session_id VARCHAR(128) NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    resource_type VARCHAR(50) NULL,
    resource_id VARCHAR(100) NULL,
    action VARCHAR(100) NOT NULL,
    result_id INT NOT NULL COMMENT 'FK to resource_db.security_result',
    failure_reason VARCHAR(500) NULL,
    request_data JSON NULL,
    response_data JSON NULL,
    stack_trace TEXT NULL,
    correlation_id VARCHAR(100) NULL,
    
    -- Geolocation
    country_code CHAR(2) NULL,
    region VARCHAR(100) NULL,
    city VARCHAR(100) NULL,
    latitude DECIMAL(10,8) NULL,
    longitude DECIMAL(11,8) NULL,
    
    -- Threat detection
    threat_score INT NULL,
    threat_indicators JSON NULL,
    is_suspicious BOOLEAN DEFAULT FALSE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Keys
    CONSTRAINT fk_security_audit_severity FOREIGN KEY (severity_id) REFERENCES resource_db.security_severity(id),
    CONSTRAINT fk_security_audit_result FOREIGN KEY (result_id) REFERENCES resource_db.security_result(id),
    CONSTRAINT fk_security_audit_user FOREIGN KEY (user_id) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_event_type (event_type),
    INDEX idx_severity (severity_id),
    INDEX idx_user_id (user_id),
    INDEX idx_session_id (session_id),
    INDEX idx_ip_address (ip_address),
    INDEX idx_result (result_id),
    INDEX idx_created_at (created_at),
    INDEX idx_suspicious (is_suspicious),
    INDEX idx_correlation_id (correlation_id),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- suspicious_activity - Anomaly detection
CREATE TABLE suspicious_activity (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    activity_type VARCHAR(50) NOT NULL,
    threat_level_id INT NOT NULL COMMENT 'FK to resource_db.threat_level',
    user_id BIGINT UNSIGNED NULL,
    ip_address VARCHAR(45) NULL,
    session_id VARCHAR(128) NULL,
    description TEXT NOT NULL,
    indicators JSON NOT NULL COMMENT 'Specific indicators that triggered alert',
    score INT NOT NULL COMMENT 'Threat score 0-100',
    pattern_matched VARCHAR(200) NULL,
    false_positive BOOLEAN DEFAULT FALSE,
    investigation_status_id INT NOT NULL COMMENT 'FK to resource_db.investigation_status',
    investigation_notes TEXT NULL,
    resolved_by BIGINT UNSIGNED NULL,
    resolved_at DATETIME NULL,
    action_taken VARCHAR(500) NULL,
    automated_response JSON NULL COMMENT 'Automated actions taken',
    
    -- Related data
    related_activities JSON NULL COMMENT 'UUIDs of related suspicious activities',
    affected_resources JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_suspicious_threat_level FOREIGN KEY (threat_level_id) REFERENCES resource_db.threat_level(id),
    CONSTRAINT fk_suspicious_investigation_status FOREIGN KEY (investigation_status_id) REFERENCES resource_db.investigation_status(id),
    CONSTRAINT fk_suspicious_activity_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_suspicious_activity_resolved_by FOREIGN KEY (resolved_by) REFERENCES user(id),
    CONSTRAINT fk_suspicious_activity_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_activity_type (activity_type),
    INDEX idx_threat_level (threat_level_id),
    INDEX idx_user_id (user_id),
    INDEX idx_ip_address (ip_address),
    INDEX idx_session_id (session_id),
    INDEX idx_score (score),
    INDEX idx_investigation_status (investigation_status_id),
    INDEX idx_created_at (created_at),
    INDEX idx_false_positive (false_positive),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ip_whitelist - Allowed IP addresses
CREATE TABLE ip_whitelist (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    ip_address VARCHAR(45) NOT NULL,
    ip_range_start VARCHAR(45) NULL,
    ip_range_end VARCHAR(45) NULL,
    subnet_mask VARCHAR(45) NULL,
    description VARCHAR(500) NOT NULL,
    owner_type_id INT NOT NULL COMMENT 'FK to resource_db.ip_owner_type',
    owner_id BIGINT UNSIGNED NULL,
    valid_from DATETIME NULL,
    valid_until DATETIME NULL,
    auto_renew BOOLEAN DEFAULT FALSE,
    last_seen DATETIME NULL,
    hit_count BIGINT DEFAULT 0,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_ip_whitelist_owner_type FOREIGN KEY (owner_type_id) REFERENCES resource_db.ip_owner_type(id),
    CONSTRAINT fk_ip_whitelist_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_ip_whitelist_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_ip_whitelist_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_ip_whitelist_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_ip_address (ip_address),
    INDEX idx_ip_range (ip_range_start, ip_range_end),
    INDEX idx_owner (owner_type_id, owner_id),
    INDEX idx_valid_dates (valid_from, valid_until),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ip_blacklist - Blocked IP addresses
CREATE TABLE ip_blacklist (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    ip_address VARCHAR(45) NOT NULL,
    ip_range_start VARCHAR(45) NULL,
    ip_range_end VARCHAR(45) NULL,
    subnet_mask VARCHAR(45) NULL,
    block_reason VARCHAR(500) NOT NULL,
    threat_type VARCHAR(100) NULL,
    threat_source VARCHAR(200) NULL COMMENT 'Where threat intel came from',
    severity_id INT NOT NULL COMMENT 'FK to resource_db.security_severity',
    block_type_id INT NOT NULL COMMENT 'FK to resource_db.block_type',
    expires_at DATETIME NULL,
    hit_count BIGINT DEFAULT 0,
    last_blocked DATETIME NULL,
    auto_expire BOOLEAN DEFAULT TRUE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_ip_blacklist_severity FOREIGN KEY (severity_id) REFERENCES resource_db.security_severity(id),
    CONSTRAINT fk_ip_blacklist_block_type FOREIGN KEY (block_type_id) REFERENCES resource_db.block_type(id),
    CONSTRAINT fk_ip_blacklist_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_ip_blacklist_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_ip_blacklist_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_ip_blacklist_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_ip_address (ip_address),
    INDEX idx_ip_range (ip_range_start, ip_range_end),
    INDEX idx_severity (severity_id),
    INDEX idx_block_type (block_type_id),
    INDEX idx_expires_at (expires_at),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- geo_restriction - Geographic access rules
CREATE TABLE geo_restriction (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    restriction_name VARCHAR(100) NOT NULL,
    restriction_type_id INT NOT NULL COMMENT 'FK to resource_db.geo_restriction_type',
    applies_to_id INT NOT NULL COMMENT 'FK to resource_db.geo_applies_to',
    country_code CHAR(2) NULL,
    region_code VARCHAR(10) NULL,
    city VARCHAR(100) NULL,
    postal_code VARCHAR(20) NULL,
    latitude_min DECIMAL(10,8) NULL,
    latitude_max DECIMAL(10,8) NULL,
    longitude_min DECIMAL(11,8) NULL,
    longitude_max DECIMAL(11,8) NULL,
    role_exceptions JSON NULL COMMENT 'Roles exempt from this restriction',
    user_exceptions JSON NULL COMMENT 'User IDs exempt from this restriction',
    valid_from DATETIME NULL,
    valid_until DATETIME NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_geo_restriction_type FOREIGN KEY (restriction_type_id) REFERENCES resource_db.geo_restriction_type(id),
    CONSTRAINT fk_geo_restriction_applies_to FOREIGN KEY (applies_to_id) REFERENCES resource_db.geo_applies_to(id),
    CONSTRAINT fk_geo_restriction_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_geo_restriction_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_geo_restriction_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_geo_restriction_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_restriction_type (restriction_type_id),
    INDEX idx_country_code (country_code),
    INDEX idx_applies_to (applies_to_id),
    INDEX idx_valid_dates (valid_from, valid_until),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- device_fingerprint - Trusted devices
CREATE TABLE device_fingerprint (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    user_id BIGINT UNSIGNED NOT NULL,
    fingerprint_hash VARCHAR(128) NOT NULL,
    device_name VARCHAR(100) NULL,
    device_type_id INT NOT NULL COMMENT 'FK to resource_db.device_type',
    browser_name VARCHAR(50) NULL,
    browser_version VARCHAR(50) NULL,
    os_name VARCHAR(50) NULL,
    os_version VARCHAR(50) NULL,
    screen_resolution VARCHAR(20) NULL,
    timezone VARCHAR(50) NULL,
    language VARCHAR(10) NULL,
    canvas_fingerprint VARCHAR(128) NULL,
    webgl_fingerprint VARCHAR(128) NULL,
    audio_fingerprint VARCHAR(128) NULL,
    font_list_hash VARCHAR(128) NULL,
    plugin_list_hash VARCHAR(128) NULL,
    trust_score INT DEFAULT 50 COMMENT '0-100 trust level',
    is_trusted BOOLEAN DEFAULT FALSE,
    last_seen DATETIME NULL,
    seen_count INT DEFAULT 1,
    
    -- Security flags
    vpn_detected BOOLEAN DEFAULT FALSE,
    proxy_detected BOOLEAN DEFAULT FALSE,
    tor_detected BOOLEAN DEFAULT FALSE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_device_fingerprint_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_device_fingerprint_device_type FOREIGN KEY (device_type_id) REFERENCES resource_db.device_type(id),
    CONSTRAINT fk_device_fingerprint_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_device_fingerprint_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_device_fingerprint_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_device_fingerprint_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_user_fingerprint (user_id, fingerprint_hash),
    INDEX idx_user_id (user_id),
    INDEX idx_fingerprint_hash (fingerprint_hash),
    INDEX idx_device_type (device_type_id),
    INDEX idx_is_trusted (is_trusted),
    INDEX idx_last_seen (last_seen),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- security_question - User security questions
CREATE TABLE security_question (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    user_id BIGINT UNSIGNED NOT NULL,
    question_id INT NOT NULL COMMENT 'FK to resource_db.security_question_type',
    answer_hash VARCHAR(255) NOT NULL COMMENT 'Hashed answer',
    hint VARCHAR(100) NULL COMMENT 'Optional hint',
    last_used DATETIME NULL,
    use_count INT DEFAULT 0,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_security_question_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_security_question_type FOREIGN KEY (question_id) REFERENCES resource_db.security_question_type(id),
    CONSTRAINT fk_security_question_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_security_question_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_security_question_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_security_question_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_user_id (user_id),
    INDEX idx_question_id (question_id),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- password_history - Prevent password reuse
CREATE TABLE password_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT UNSIGNED NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    set_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expired_date DATETIME NULL,
    change_reason_id INT NOT NULL COMMENT 'FK to resource_db.password_change_reason',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_password_history_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_password_history_change_reason FOREIGN KEY (change_reason_id) REFERENCES resource_db.password_change_reason(id),
    CONSTRAINT fk_password_history_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_user_id (user_id),
    INDEX idx_set_date (set_date),
    INDEX idx_password_hash (password_hash),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- mfa_device - Multi-factor authentication devices
CREATE TABLE mfa_device (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    user_id BIGINT UNSIGNED NOT NULL,
    device_name VARCHAR(100) NOT NULL,
    device_type_id INT NOT NULL COMMENT 'FK to resource_db.mfa_device_type',
    secret_encrypted VARBINARY(512) NULL COMMENT 'Encrypted secret for TOTP',
    phone_number VARCHAR(50) NULL COMMENT 'For SMS, encrypted',
    email_address VARCHAR(255) NULL COMMENT 'For email MFA, encrypted',
    hardware_id VARCHAR(100) NULL COMMENT 'For hardware tokens',
    is_primary BOOLEAN DEFAULT FALSE,
    is_backup BOOLEAN DEFAULT FALSE,
    last_used DATETIME NULL,
    use_count INT DEFAULT 0,
    trust_expires_at DATETIME NULL COMMENT 'Remember this device until',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_mfa_device_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_mfa_device_type FOREIGN KEY (device_type_id) REFERENCES resource_db.mfa_device_type(id),
    CONSTRAINT fk_mfa_device_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_mfa_device_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_mfa_device_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_mfa_device_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_user_id (user_id),
    INDEX idx_device_type (device_type_id),
    INDEX idx_is_primary (is_primary),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- session_security - Enhanced session tracking
CREATE TABLE session_security (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    session_id VARCHAR(128) NOT NULL UNIQUE,
    user_id BIGINT UNSIGNED NOT NULL,
    ip_address VARCHAR(45) NOT NULL,
    user_agent VARCHAR(500) NULL,
    device_fingerprint_id BIGINT UNSIGNED NULL,
    started_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_activity DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at DATETIME NOT NULL,
    terminated_at DATETIME NULL,
    termination_reason VARCHAR(100) NULL,
    
    -- Session data
    auth_method VARCHAR(50) NOT NULL COMMENT 'password, sso, mfa, etc',
    mfa_verified BOOLEAN DEFAULT FALSE,
    risk_score INT DEFAULT 0 COMMENT '0-100 risk level',
    
    -- Location tracking
    country_code CHAR(2) NULL,
    region VARCHAR(100) NULL,
    city VARCHAR(100) NULL,
    latitude DECIMAL(10,8) NULL,
    longitude DECIMAL(11,8) NULL,
    
    -- Security flags
    is_suspicious BOOLEAN DEFAULT FALSE,
    vpn_detected BOOLEAN DEFAULT FALSE,
    location_mismatch BOOLEAN DEFAULT FALSE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Foreign Keys
    CONSTRAINT fk_session_security_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_session_security_device FOREIGN KEY (device_fingerprint_id) REFERENCES device_fingerprint(id),
    
    -- Indexes
    INDEX idx_session_id (session_id),
    INDEX idx_user_id (user_id),
    INDEX idx_ip_address (ip_address),
    INDEX idx_expires_at (expires_at),
    INDEX idx_terminated_at (terminated_at),
    INDEX idx_last_activity (last_activity),
    INDEX idx_is_suspicious (is_suspicious),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- api_key_permission - Granular API permissions
CREATE TABLE api_key_permission (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    api_key_id BIGINT UNSIGNED NOT NULL,
    endpoint_pattern VARCHAR(200) NOT NULL COMMENT 'e.g. /api/v1/works/*',
    http_method VARCHAR(10) NOT NULL COMMENT 'GET, POST, PUT, DELETE, *',
    rate_limit INT NULL COMMENT 'Requests per hour',
    ip_whitelist JSON NULL COMMENT 'Allowed IPs for this endpoint',
    required_headers JSON NULL COMMENT 'Headers that must be present',
    allowed_parameters JSON NULL COMMENT 'Allowed query/body parameters',
    response_fields JSON NULL COMMENT 'Fields to include/exclude in response',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_api_key_permission_key FOREIGN KEY (api_key_id) REFERENCES api_key(id),
    CONSTRAINT fk_api_key_permission_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_api_key_permission_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_api_key_permission_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_api_key_id (api_key_id),
    INDEX idx_endpoint_method (endpoint_pattern, http_method),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- data_classification - Sensitivity levels
CREATE TABLE data_classification (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    classification_name VARCHAR(50) NOT NULL UNIQUE,
    classification_level INT NOT NULL COMMENT '1=Public, 2=Internal, 3=Confidential, 4=Restricted',
    description TEXT NULL,
    handling_requirements TEXT NULL,
    encryption_required BOOLEAN DEFAULT TRUE,
    audit_access BOOLEAN DEFAULT TRUE,
    retention_days INT NULL,
    disposal_method VARCHAR(100) NULL,
    compliance_frameworks JSON NULL COMMENT '["GDPR", "PCI", "HIPAA"]',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_data_classification_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_data_classification_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_data_classification_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_classification_level (classification_level),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- privacy_shield - GDPR/CCPA compliance
CREATE TABLE privacy_shield (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    user_id BIGINT UNSIGNED NOT NULL,
    request_type_id INT NOT NULL COMMENT 'FK to resource_db.privacy_request_type',
    status_id INT NOT NULL COMMENT 'FK to resource_db.privacy_request_status',
    requested_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    processed_at DATETIME NULL,
    processed_by BIGINT UNSIGNED NULL,
    
    -- Request details
    request_details JSON NOT NULL,
    verification_method VARCHAR(100) NULL,
    verification_completed BOOLEAN DEFAULT FALSE,
    
    -- Response
    response_data JSON NULL,
    rejection_reason VARCHAR(500) NULL,
    data_export_url VARCHAR(500) NULL,
    export_expires_at DATETIME NULL,
    
    -- Compliance tracking
    regulation VARCHAR(50) NOT NULL COMMENT 'GDPR, CCPA, etc',
    article_reference VARCHAR(50) NULL COMMENT 'e.g. GDPR Article 17',
    deadline_date DATE NOT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_privacy_shield_user FOREIGN KEY (user_id) REFERENCES user(id),
    CONSTRAINT fk_privacy_shield_request_type FOREIGN KEY (request_type_id) REFERENCES resource_db.privacy_request_type(id),
    CONSTRAINT fk_privacy_shield_status FOREIGN KEY (status_id) REFERENCES resource_db.privacy_request_status(id),
    CONSTRAINT fk_privacy_shield_processed_by FOREIGN KEY (processed_by) REFERENCES user(id),
    CONSTRAINT fk_privacy_shield_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_user_id (user_id),
    INDEX idx_request_type (request_type_id),
    INDEX idx_status (status_id),
    INDEX idx_regulation (regulation),
    INDEX idx_deadline_date (deadline_date),
    INDEX idx_requested_at (requested_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- SECTION 2: SECURITY PROCEDURES & VIEWS
-- =============================================

-- =============================================
-- ENCRYPTION KEY MANAGEMENT PROCEDURES
-- =============================================

DELIMITER $$

-- Rotate encryption key
CREATE PROCEDURE sp_rotate_encryption_key(
    IN p_old_key_id BIGINT UNSIGNED,
    IN p_rotation_reason VARCHAR(500),
    IN p_user_id BIGINT UNSIGNED
)
BEGIN
    DECLARE v_new_key_id BIGINT UNSIGNED;
    DECLARE v_rotation_id BIGINT UNSIGNED;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Create new key
    INSERT INTO encryption_key (
        key_name,
        key_type_id,
        algorithm,
        key_value,
        key_salt,
        key_version,
        purpose,
        rotation_schedule_days,
        status_id,
        created_by
    )
    SELECT 
        CONCAT(key_name, '_ROTATED_', DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')),
        key_type_id,
        algorithm,
        -- Generate new key (placeholder - actual implementation would use crypto function)
        RANDOM_BYTES(64),
        RANDOM_BYTES(32),
        key_version + 1,
        purpose,
        rotation_schedule_days,
        (SELECT id FROM resource_db.encryption_key_status WHERE code = 'ACTIVE'),
        p_user_id
    FROM encryption_key
    WHERE id = p_old_key_id;
    
    SET v_new_key_id = LAST_INSERT_ID();
    
    -- Update old key status
    UPDATE encryption_key 
    SET status_id = (SELECT id FROM resource_db.encryption_key_status WHERE code = 'ROTATING'),
        is_primary = FALSE,
        updated_by = p_user_id
    WHERE id = p_old_key_id;
    
    -- Create rotation record
    INSERT INTO encryption_key_rotation (
        old_key_id,
        new_key_id,
        rotation_type_id,
        rotation_reason,
        started_at,
        status_id,
        created_by
    ) VALUES (
        p_old_key_id,
        v_new_key_id,
        (SELECT id FROM resource_db.key_rotation_type WHERE code = 'MANUAL'),
        p_rotation_reason,
        NOW(),
        (SELECT id FROM resource_db.rotation_status WHERE code = 'IN_PROGRESS'),
        p_user_id
    );
    
    SET v_rotation_id = LAST_INSERT_ID();
    
    COMMIT;
    
    SELECT v_new_key_id AS new_key_id, v_rotation_id AS rotation_id;
END$$

-- Check for keys needing rotation
CREATE PROCEDURE sp_check_key_rotation_needed()
BEGIN
    SELECT 
        k.id,
        k.key_name,
        k.created_date,
        k.rotation_schedule_days,
        DATEDIFF(NOW(), k.created_date) AS days_since_creation,
        k.next_rotation_date,
        CASE 
            WHEN k.next_rotation_date <= NOW() THEN 'OVERDUE'
            WHEN k.next_rotation_date <= DATE_ADD(NOW(), INTERVAL 7 DAY) THEN 'DUE_SOON'
            ELSE 'OK'
        END AS rotation_status
    FROM encryption_key k
    WHERE k.is_active = TRUE
        AND k.is_primary = TRUE
        AND k.status_id = (SELECT id FROM resource_db.encryption_key_status WHERE code = 'ACTIVE')
    ORDER BY k.next_rotation_date ASC;
END$$

DELIMITER ;

-- =============================================
-- ACCESS CONTROL PROCEDURES
-- =============================================

DELIMITER $$

-- Check user access to resource
CREATE FUNCTION fn_check_user_access(
    p_user_id BIGINT UNSIGNED,
    p_resource_type VARCHAR(50),
    p_resource_id VARCHAR(200),
    p_permission_type VARCHAR(50)
) RETURNS BOOLEAN
READS SQL DATA
DETERMINISTIC
BEGIN
    DECLARE v_has_access BOOLEAN DEFAULT FALSE;
    DECLARE v_user_roles JSON;
    
    -- Get user's roles
    SELECT JSON_ARRAYAGG(role_id) INTO v_user_roles
    FROM user_role
    WHERE user_id = p_user_id 
        AND is_active = TRUE
        AND (expires_at IS NULL OR expires_at > NOW());
    
    -- Check direct user permissions
    SELECT COUNT(*) > 0 INTO v_has_access
    FROM access_control_list acl
    WHERE acl.resource_type = p_resource_type
        AND acl.resource_identifier = p_resource_id
        AND acl.principal_type_id = (SELECT id FROM resource_db.principal_type WHERE code = 'USER')
        AND acl.principal_id = p_user_id
        AND acl.permission_type_id = (SELECT id FROM resource_db.permission_type WHERE code = p_permission_type)
        AND acl.grant_type_id = (SELECT id FROM resource_db.grant_type WHERE code = 'ALLOW')
        AND acl.is_active = TRUE
        AND (acl.valid_from IS NULL OR acl.valid_from <= NOW())
        AND (acl.valid_until IS NULL OR acl.valid_until >= NOW());
    
    -- If no direct access, check role-based permissions
    IF NOT v_has_access AND v_user_roles IS NOT NULL THEN
        SELECT COUNT(*) > 0 INTO v_has_access
        FROM access_control_list acl
        WHERE acl.resource_type = p_resource_type
            AND acl.resource_identifier = p_resource_id
            AND acl.principal_type_id = (SELECT id FROM resource_db.principal_type WHERE code = 'ROLE')
            AND JSON_CONTAINS(v_user_roles, CAST(acl.principal_id AS JSON), '$')
            AND acl.permission_type_id = (SELECT id FROM resource_db.permission_type WHERE code = p_permission_type)
            AND acl.grant_type_id = (SELECT id FROM resource_db.grant_type WHERE code = 'ALLOW')
            AND acl.is_active = TRUE
            AND (acl.valid_from IS NULL OR acl.valid_from <= NOW())
            AND (acl.valid_until IS NULL OR acl.valid_until >= NOW());
    END IF;
    
    -- Check for explicit deny (overrides allow)
    IF v_has_access THEN
        SELECT COUNT(*) > 0 INTO v_has_access
        FROM access_control_list acl
        WHERE acl.resource_type = p_resource_type
            AND acl.resource_identifier = p_resource_id
            AND (
                (acl.principal_type_id = (SELECT id FROM resource_db.principal_type WHERE code = 'USER') 
                 AND acl.principal_id = p_user_id)
                OR 
                (acl.principal_type_id = (SELECT id FROM resource_db.principal_type WHERE code = 'ROLE') 
                 AND JSON_CONTAINS(v_user_roles, CAST(acl.principal_id AS JSON), '$'))
            )
            AND acl.permission_type_id = (SELECT id FROM resource_db.permission_type WHERE code = p_permission_type)
            AND acl.grant_type_id = (SELECT id FROM resource_db.grant_type WHERE code = 'DENY')
            AND acl.is_active = TRUE
            AND (acl.valid_from IS NULL OR acl.valid_from <= NOW())
            AND (acl.valid_until IS NULL OR acl.valid_until >= NOW());
        
        SET v_has_access = NOT v_has_access;
    END IF;
    
    RETURN v_has_access;
END$$

-- Apply row-level security filter
CREATE PROCEDURE sp_apply_row_level_security(
    IN p_table_name VARCHAR(100),
    IN p_user_id BIGINT UNSIGNED,
    IN p_operation VARCHAR(50),
    OUT p_filter_predicate TEXT
)
BEGIN
    DECLARE v_filters TEXT DEFAULT '';
    DECLARE v_role_filters TEXT DEFAULT '';
    
    -- Get user-specific filters
    SELECT GROUP_CONCAT(
        filter_predicate 
        SEPARATOR ' OR '
    ) INTO v_filters
    FROM row_level_security
    WHERE table_name = p_table_name
        AND user_id = p_user_id
        AND applies_to_id IN (
            SELECT id FROM resource_db.rls_applies_to 
            WHERE code IN (p_operation, 'ALL')
        )
        AND is_active = TRUE
        AND bypass_rls = FALSE;
    
    -- Get role-based filters
    SELECT GROUP_CONCAT(
        rls.filter_predicate 
        SEPARATOR ' OR '
    ) INTO v_role_filters
    FROM row_level_security rls
    JOIN user_role ur ON rls.role_id = ur.role_id
    WHERE rls.table_name = p_table_name
        AND ur.user_id = p_user_id
        AND ur.is_active = TRUE
        AND rls.applies_to_id IN (
            SELECT id FROM resource_db.rls_applies_to 
            WHERE code IN (p_operation, 'ALL')
        )
        AND rls.is_active = TRUE
        AND rls.bypass_rls = FALSE;
    
    -- Combine filters
    IF v_filters IS NOT NULL AND v_role_filters IS NOT NULL THEN
        SET p_filter_predicate = CONCAT('(', v_filters, ') OR (', v_role_filters, ')');
    ELSEIF v_filters IS NOT NULL THEN
        SET p_filter_predicate = v_filters;
    ELSEIF v_role_filters IS NOT NULL THEN
        SET p_filter_predicate = v_role_filters;
    ELSE
        SET p_filter_predicate = '1=0'; -- No access
    END IF;
END$$

DELIMITER ;

-- =============================================
-- THREAT DETECTION PROCEDURES
-- =============================================

DELIMITER $$

-- Record suspicious activity
CREATE PROCEDURE sp_record_suspicious_activity(
    IN p_activity_type VARCHAR(50),
    IN p_user_id BIGINT UNSIGNED,
    IN p_ip_address VARCHAR(45),
    IN p_session_id VARCHAR(128),
    IN p_description TEXT,
    IN p_indicators JSON,
    IN p_threat_score INT
)
BEGIN
    DECLARE v_threat_level_id INT;
    DECLARE v_user_blocked BOOLEAN DEFAULT FALSE;
    
    -- Determine threat level based on score
    SELECT id INTO v_threat_level_id
    FROM resource_db.threat_level
    WHERE p_threat_score >= min_score 
        AND p_threat_score <= max_score
    LIMIT 1;
    
    -- Insert suspicious activity
    INSERT INTO suspicious_activity (
        activity_type,
        threat_level_id,
        user_id,
        ip_address,
        session_id,
        description,
        indicators,
        score,
        investigation_status_id,
        created_at
    ) VALUES (
        p_activity_type,
        v_threat_level_id,
        p_user_id,
        p_ip_address,
        p_session_id,
        p_description,
        p_indicators,
        p_threat_score,
        (SELECT id FROM resource_db.investigation_status WHERE code = 'NEW'),
        NOW()
    );
    
    -- Auto-block if threat score is critical
    IF p_threat_score >= 80 THEN
        -- Block IP
        IF p_ip_address IS NOT NULL THEN
            INSERT INTO ip_blacklist (
                ip_address,
                block_reason,
                threat_type,
                severity_id,
                block_type_id,
                expires_at,
                created_by
            ) VALUES (
                p_ip_address,
                CONCAT('Auto-blocked: ', p_description),
                p_activity_type,
                (SELECT id FROM resource_db.security_severity WHERE code = 'CRITICAL'),
                (SELECT id FROM resource_db.block_type WHERE code = 'TEMPORARY'),
                DATE_ADD(NOW(), INTERVAL 24 HOUR),
                1 -- System user
            );
        END IF;
        
        -- Suspend user
        IF p_user_id IS NOT NULL THEN
            UPDATE user 
            SET account_status_id = (SELECT id FROM resource_db.account_status WHERE code = 'SUSPENDED'),
                suspension_reason = CONCAT('Security threat detected: ', p_activity_type),
                suspended_at = NOW(),
                suspended_by = 1 -- System user
            WHERE id = p_user_id;
            
            SET v_user_blocked = TRUE;
        END IF;
        
        -- Terminate session
        IF p_session_id IS NOT NULL THEN
            UPDATE session_security
            SET terminated_at = NOW(),
                termination_reason = 'Security threat detected'
            WHERE session_id = p_session_id;
        END IF;
    END IF;
    
    -- Log security event
    INSERT INTO security_audit_log (
        event_type,
        severity_id,
        user_id,
        session_id,
        ip_address,
        action,
        result_id,
        threat_score,
        is_suspicious,
        created_at
    ) VALUES (
        p_activity_type,
        (SELECT id FROM resource_db.security_severity WHERE code = 
            CASE 
                WHEN p_threat_score >= 80 THEN 'CRITICAL'
                WHEN p_threat_score >= 60 THEN 'HIGH'
                WHEN p_threat_score >= 40 THEN 'MEDIUM'
                ELSE 'LOW'
            END
        ),
        p_user_id,
        p_session_id,
        p_ip_address,
        'THREAT_DETECTED',
        (SELECT id FROM resource_db.security_result WHERE code = 'BLOCKED'),
        p_threat_score,
        TRUE,
        NOW()
    );
    
    SELECT v_user_blocked AS user_blocked, LAST_INSERT_ID() AS activity_id;
END$$

-- Check IP reputation
CREATE FUNCTION fn_check_ip_reputation(
    p_ip_address VARCHAR(45)
) RETURNS INT
READS SQL DATA
DETERMINISTIC
BEGIN
    DECLARE v_reputation_score INT DEFAULT 50; -- Neutral starting score
    DECLARE v_blacklist_count INT;
    DECLARE v_whitelist_exists BOOLEAN;
    DECLARE v_recent_threats INT;
    
    -- Check if whitelisted
    SELECT COUNT(*) > 0 INTO v_whitelist_exists
    FROM ip_whitelist
    WHERE ip_address = p_ip_address
        AND is_active = TRUE
        AND (valid_from IS NULL OR valid_from <= NOW())
        AND (valid_until IS NULL OR valid_until >= NOW());
    
    IF v_whitelist_exists THEN
        RETURN 100; -- Perfect score for whitelisted IPs
    END IF;
    
    -- Check if blacklisted
    SELECT COUNT(*) INTO v_blacklist_count
    FROM ip_blacklist
    WHERE ip_address = p_ip_address
        AND is_active = TRUE
        AND (expires_at IS NULL OR expires_at > NOW());
    
    IF v_blacklist_count > 0 THEN
        RETURN 0; -- Worst score for blacklisted IPs
    END IF;
    
    -- Check recent suspicious activities
    SELECT COUNT(*) INTO v_recent_threats
    FROM suspicious_activity
    WHERE ip_address = p_ip_address
        AND created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        AND false_positive = FALSE;
    
    -- Adjust score based on recent threats
    SET v_reputation_score = GREATEST(0, v_reputation_score - (v_recent_threats * 10));
    
    -- Check successful authentications
    SELECT v_reputation_score + (COUNT(*) * 2) INTO v_reputation_score
    FROM security_audit_log
    WHERE ip_address = p_ip_address
        AND event_type = 'LOGIN'
        AND result_id = (SELECT id FROM resource_db.security_result WHERE code = 'SUCCESS')
        AND created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY);
    
    -- Cap at 100
    RETURN LEAST(100, v_reputation_score);
END$$

DELIMITER ;

-- =============================================
-- SESSION SECURITY PROCEDURES
-- =============================================

DELIMITER $$

-- Validate session security
CREATE PROCEDURE sp_validate_session_security(
    IN p_session_id VARCHAR(128),
    IN p_ip_address VARCHAR(45),
    IN p_user_agent VARCHAR(500),
    OUT p_is_valid BOOLEAN,
    OUT p_risk_score INT
)
BEGIN
    DECLARE v_user_id BIGINT UNSIGNED;
    DECLARE v_original_ip VARCHAR(45);
    DECLARE v_location_changed BOOLEAN DEFAULT FALSE;
    DECLARE v_suspicious_indicators JSON DEFAULT JSON_ARRAY();
    
    SET p_is_valid = FALSE;
    SET p_risk_score = 0;
    
    -- Get session info
    SELECT 
        user_id,
        ip_address,
        CASE WHEN ip_address != p_ip_address THEN TRUE ELSE FALSE END
    INTO 
        v_user_id,
        v_original_ip,
        v_location_changed
    FROM session_security
    WHERE session_id = p_session_id
        AND expires_at > NOW()
        AND terminated_at IS NULL;
    
    IF v_user_id IS NULL THEN
        SET p_risk_score = 100; -- Invalid session
        RETURN;
    END IF;
    
    -- Update last activity
    UPDATE session_security
    SET last_activity = NOW()
    WHERE session_id = p_session_id;
    
    -- Check IP change
    IF v_location_changed THEN
        SET p_risk_score = p_risk_score + 30;
        SET v_suspicious_indicators = JSON_ARRAY_APPEND(v_suspicious_indicators, '$', 'IP_CHANGED');
    END IF;
    
    -- Check IP reputation
    SET p_risk_score = p_risk_score + (100 - fn_check_ip_reputation(p_ip_address));
    
    -- Check for rapid location changes (impossible travel)
    IF EXISTS (
        SELECT 1 
        FROM session_security
        WHERE user_id = v_user_id
            AND session_id != p_session_id
            AND terminated_at IS NULL
            AND country_code != (
                SELECT country_code 
                FROM session_security 
                WHERE session_id = p_session_id
            )
            AND ABS(TIMESTAMPDIFF(MINUTE, last_activity, NOW())) < 30
    ) THEN
        SET p_risk_score = p_risk_score + 40;
        SET v_suspicious_indicators = JSON_ARRAY_APPEND(v_suspicious_indicators, '$', 'IMPOSSIBLE_TRAVEL');
    END IF;
    
    -- Record activity if suspicious
    IF p_risk_score > 50 THEN
        CALL sp_record_suspicious_activity(
            'SESSION_ANOMALY',
            v_user_id,
            p_ip_address,
            p_session_id,
            'Suspicious session activity detected',
            v_suspicious_indicators,
            p_risk_score
        );
    END IF;
    
    SET p_is_valid = (p_risk_score < 80); -- Block if risk too high
END$$

DELIMITER ;

-- =============================================
-- PRIVACY COMPLIANCE PROCEDURES
-- =============================================

DELIMITER $$

-- Process GDPR data request
CREATE PROCEDURE sp_process_privacy_request(
    IN p_request_id BIGINT UNSIGNED,
    IN p_processor_id BIGINT UNSIGNED
)
BEGIN
    DECLARE v_user_id BIGINT UNSIGNED;
    DECLARE v_request_type_id INT;
    DECLARE v_request_type_code VARCHAR(50);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        UPDATE privacy_shield
        SET status_id = (SELECT id FROM resource_db.privacy_request_status WHERE code = 'FAILED'),
            updated_by = p_processor_id
        WHERE id = p_request_id;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Get request details
    SELECT 
        ps.user_id,
        ps.request_type_id,
        prt.code
    INTO 
        v_user_id,
        v_request_type_id,
        v_request_type_code
    FROM privacy_shield ps
    JOIN resource_db.privacy_request_type prt ON ps.request_type_id = prt.id
    WHERE ps.id = p_request_id;
    
    -- Update status to in progress
    UPDATE privacy_shield
    SET status_id = (SELECT id FROM resource_db.privacy_request_status WHERE code = 'IN_PROGRESS'),
        processed_by = p_processor_id,
        updated_by = p_processor_id
    WHERE id = p_request_id;
    
    -- Process based on request type
    CASE v_request_type_code
        WHEN 'ACCESS' THEN
            -- Generate data export
            CALL sp_export_user_data(v_user_id, p_request_id);
            
        WHEN 'ERASURE' THEN
            -- Anonymize user data
            CALL sp_anonymize_user_data(v_user_id, p_request_id);
            
        WHEN 'RECTIFICATION' THEN
            -- Flag for manual review
            UPDATE privacy_shield
            SET status_id = (SELECT id FROM resource_db.privacy_request_status WHERE code = 'PENDING_REVIEW')
            WHERE id = p_request_id;
            
        WHEN 'PORTABILITY' THEN
            -- Generate portable data format
            CALL sp_export_portable_data(v_user_id, p_request_id);
            
        ELSE
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Unknown privacy request type';
    END CASE;
    
    COMMIT;
END$$

-- Anonymize user data for GDPR erasure
CREATE PROCEDURE sp_anonymize_user_data(
    IN p_user_id BIGINT UNSIGNED,
    IN p_request_id BIGINT UNSIGNED
)
BEGIN
    DECLARE v_anon_id VARCHAR(50);
    SET v_anon_id = CONCAT('ANON_', UUID());
    
    -- Anonymize user table
    UPDATE user
    SET 
        email = CONCAT(v_anon_id, '@anonymized.local'),
        username = v_anon_id,
        first_name = 'Anonymous',
        last_name = 'User',
        phone = NULL,
        date_of_birth = NULL,
        is_deleted = TRUE,
        deleted_at = NOW(),
        deleted_by = p_user_id
    WHERE id = p_user_id;
    
    -- Anonymize related person records
    UPDATE person
    SET 
        first_name = 'Anonymous',
        middle_name = NULL,
        last_name = 'User',
        email = NULL,
        phone = NULL,
        birth_date = NULL,
        tax_id = NULL,
        is_deleted = TRUE,
        deleted_at = NOW()
    WHERE id IN (
        SELECT person_id 
        FROM user_person 
        WHERE user_id = p_user_id
    );
    
    -- Remove sensitive data from audit logs
    UPDATE security_audit_log
    SET 
        ip_address = 'XXX.XXX.XXX.XXX',
        user_agent = 'ANONYMIZED',
        request_data = NULL,
        response_data = NULL
    WHERE user_id = p_user_id;
    
    -- Update privacy request
    UPDATE privacy_shield
    SET 
        status_id = (SELECT id FROM resource_db.privacy_request_status WHERE code = 'COMPLETED'),
        processed_at = NOW(),
        response_data = JSON_OBJECT(
            'anonymization_id', v_anon_id,
            'completed_at', NOW()
        )
    WHERE id = p_request_id;
END$$

DELIMITER ;

-- =============================================
-- SECURITY MONITORING VIEWS
-- =============================================

-- Active threat overview
CREATE OR REPLACE VIEW vw_active_threats AS
SELECT 
    sa.id,
    sa.activity_type,
    tl.name AS threat_level,
    tl.severity_score,
    sa.user_id,
    u.username,
    sa.ip_address,
    sa.score AS threat_score,
    sa.description,
    sa.indicators,
    ist.name AS investigation_status,
    sa.created_at,
    TIMESTAMPDIFF(HOUR, sa.created_at, NOW()) AS hours_since_detection
FROM suspicious_activity sa
JOIN resource_db.threat_level tl ON sa.threat_level_id = tl.id
JOIN resource_db.investigation_status ist ON sa.investigation_status_id = ist.id
LEFT JOIN user u ON sa.user_id = u.id
WHERE sa.false_positive = FALSE
    AND sa.investigation_status_id IN (
        SELECT id FROM resource_db.investigation_status 
        WHERE code IN ('NEW', 'INVESTIGATING', 'ESCALATED')
    )
    AND sa.created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
ORDER BY tl.severity_score DESC, sa.created_at DESC;

-- User security profile
CREATE OR REPLACE VIEW vw_user_security_profile AS
SELECT 
    u.id AS user_id,
    u.username,
    u.email,
    ast.name AS account_status,
    u.last_login,
    u.failed_login_attempts,
    u.locked_until,
    -- MFA status
    CASE WHEN EXISTS (
        SELECT 1 FROM mfa_device 
        WHERE user_id = u.id AND is_active = TRUE
    ) THEN 'ENABLED' ELSE 'DISABLED' END AS mfa_status,
    -- Recent suspicious activities
    (
        SELECT COUNT(*) 
        FROM suspicious_activity 
        WHERE user_id = u.id 
            AND created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
            AND false_positive = FALSE
    ) AS recent_threats,
    -- Active sessions
    (
        SELECT COUNT(*) 
        FROM session_security 
        WHERE user_id = u.id 
            AND terminated_at IS NULL 
            AND expires_at > NOW()
    ) AS active_sessions,
    -- Trusted devices
    (
        SELECT COUNT(*) 
        FROM device_fingerprint 
        WHERE user_id = u.id 
            AND is_trusted = TRUE 
            AND is_active = TRUE
    ) AS trusted_devices,
    -- Risk score
    COALESCE((
        SELECT AVG(score) 
        FROM suspicious_activity 
        WHERE user_id = u.id 
            AND created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
    ), 0) AS avg_risk_score
FROM user u
JOIN resource_db.account_status ast ON u.account_status_id = ast.id
WHERE u.is_active = TRUE;

-- IP address reputation summary
CREATE OR REPLACE VIEW vw_ip_reputation AS
SELECT 
    ip.ip_address,
    CASE 
        WHEN wl.id IS NOT NULL THEN 'WHITELISTED'
        WHEN bl.id IS NOT NULL THEN 'BLACKLISTED'
        ELSE 'UNKNOWN'
    END AS status,
    wl.description AS whitelist_reason,
    bl.block_reason AS blacklist_reason,
    bl.threat_type,
    COUNT(DISTINCT sa.id) AS suspicious_activities,
    COUNT(DISTINCT sal.id) AS total_events,
    SUM(CASE WHEN sal.result_id = (
        SELECT id FROM resource_db.security_result WHERE code = 'SUCCESS'
    ) THEN 1 ELSE 0 END) AS successful_events,
    SUM(CASE WHEN sal.result_id = (
        SELECT id FROM resource_db.security_result WHERE code = 'FAILURE'
    ) THEN 1 ELSE 0 END) AS failed_events,
    MAX(sal.created_at) AS last_seen,
    fn_check_ip_reputation(ip.ip_address) AS reputation_score
FROM (
    SELECT DISTINCT ip_address 
    FROM security_audit_log 
    WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
) ip
LEFT JOIN ip_whitelist wl ON ip.ip_address = wl.ip_address 
    AND wl.is_active = TRUE
LEFT JOIN ip_blacklist bl ON ip.ip_address = bl.ip_address 
    AND bl.is_active = TRUE
LEFT JOIN suspicious_activity sa ON ip.ip_address = sa.ip_address
LEFT JOIN security_audit_log sal ON ip.ip_address = sal.ip_address
GROUP BY ip.ip_address, wl.id, bl.id;

-- Encryption key status dashboard
CREATE OR REPLACE VIEW vw_encryption_key_status AS
SELECT 
    k.id,
    k.key_name,
    kt.name AS key_type,
    k.algorithm,
    ks.name AS status,
    k.created_date,
    k.expires_date,
    k.rotation_schedule_days,
    k.next_rotation_date,
    DATEDIFF(k.next_rotation_date, NOW()) AS days_until_rotation,
    CASE 
        WHEN k.next_rotation_date <= NOW() THEN 'OVERDUE'
        WHEN k.next_rotation_date <= DATE_ADD(NOW(), INTERVAL 7 DAY) THEN 'DUE_SOON'
        WHEN k.expires_date IS NOT NULL AND k.expires_date <= DATE_ADD(NOW(), INTERVAL 30 DAY) THEN 'EXPIRING'
        ELSE 'OK'
    END AS rotation_status,
    k.is_primary,
    -- Usage stats
    (
        SELECT COUNT(*) 
        FROM field_encryption 
        WHERE encryption_key_id = k.id AND is_active = TRUE
    ) AS encrypted_fields_count,
    k.last_used_date,
    u.username AS created_by_username
FROM encryption_key k
JOIN resource_db.encryption_key_type kt ON k.key_type_id = kt.id
JOIN resource_db.encryption_key_status ks ON k.status_id = ks.id
JOIN user u ON k.created_by = u.id
WHERE k.is_active = TRUE
ORDER BY k.is_primary DESC, k.next_rotation_date ASC;

-- Access control matrix view
CREATE OR REPLACE VIEW vw_access_control_matrix AS
SELECT 
    acl.id,
    acl.resource_type,
    acl.resource_identifier,
    pt.name AS principal_type,
    CASE 
        WHEN pt.code = 'USER' THEN u.username
        WHEN pt.code = 'ROLE' THEN r.name
        ELSE CAST(acl.principal_id AS CHAR)
    END AS principal_name,
    perm.name AS permission,
    gt.name AS grant_type,
    acl.conditions,
    acl.valid_from,
    acl.valid_until,
    CASE 
        WHEN acl.valid_from > NOW() THEN 'FUTURE'
        WHEN acl.valid_until IS NOT NULL AND acl.valid_until < NOW() THEN 'EXPIRED'
        ELSE 'ACTIVE'
    END AS status,
    acl.priority
FROM access_control_list acl
JOIN resource_db.principal_type pt ON acl.principal_type_id = pt.id
JOIN resource_db.permission_type perm ON acl.permission_type_id = perm.id
JOIN resource_db.grant_type gt ON acl.grant_type_id = gt.id
LEFT JOIN user u ON pt.code = 'USER' AND acl.principal_id = u.id
LEFT JOIN role r ON pt.code = 'ROLE' AND acl.principal_id = r.id
WHERE acl.is_active = TRUE
ORDER BY acl.resource_type, acl.resource_identifier, acl.priority DESC;

-- Privacy compliance dashboard
CREATE OR REPLACE VIEW vw_privacy_compliance_status AS
SELECT 
    ps.id,
    ps.user_id,
    u.username,
    u.email,
    prt.name AS request_type,
    prs.name AS status,
    ps.regulation,
    ps.article_reference,
    ps.requested_at,
    ps.deadline_date,
    DATEDIFF(ps.deadline_date, NOW()) AS days_until_deadline,
    CASE 
        WHEN ps.deadline_date < NOW() AND prs.code != 'COMPLETED' THEN 'OVERDUE'
        WHEN DATEDIFF(ps.deadline_date, NOW()) <= 3 THEN 'URGENT'
        ELSE 'ON_TRACK'
    END AS compliance_status,
    ps.processed_at,
    ps.processed_by,
    pu.username AS processor_username,
    TIMESTAMPDIFF(HOUR, ps.requested_at, COALESCE(ps.processed_at, NOW())) AS processing_hours
FROM privacy_shield ps
JOIN user u ON ps.user_id = u.id
JOIN resource_db.privacy_request_type prt ON ps.request_type_id = prt.id
JOIN resource_db.privacy_request_status prs ON ps.status_id = prs.id
LEFT JOIN user pu ON ps.processed_by = pu.id
WHERE ps.created_at >= DATE_SUB(NOW(), INTERVAL 90 DAY)
ORDER BY 
    CASE WHEN prs.code != 'COMPLETED' THEN 0 ELSE 1 END,
    ps.deadline_date ASC;

-- Session security monitoring
CREATE OR REPLACE VIEW vw_active_sessions AS
SELECT 
    ss.id,
    ss.session_id,
    ss.user_id,
    u.username,
    ss.ip_address,
    ss.started_at,
    ss.last_activity,
    TIMESTAMPDIFF(MINUTE, ss.last_activity, NOW()) AS minutes_inactive,
    ss.expires_at,
    ss.auth_method,
    ss.mfa_verified,
    ss.risk_score,
    ss.country_code,
    ss.city,
    df.device_name,
    dt.name AS device_type,
    ss.is_suspicious,
    ss.vpn_detected,
    ss.location_mismatch
FROM session_security ss
JOIN user u ON ss.user_id = u.id
LEFT JOIN device_fingerprint df ON ss.device_fingerprint_id = df.id
LEFT JOIN resource_db.device_type dt ON df.device_type_id = dt.id
WHERE ss.terminated_at IS NULL
    AND ss.expires_at > NOW()
ORDER BY ss.risk_score DESC, ss.last_activity DESC;

-- Data classification usage
CREATE OR REPLACE VIEW vw_data_classification_usage AS
SELECT 
    dc.id,
    dc.classification_name,
    dc.classification_level,
    dc.description,
    dc.encryption_required,
    dc.retention_days,
    COUNT(DISTINCT fe.id) AS encrypted_fields,
    COUNT(DISTINCT dmr.id) AS masking_rules,
    dc.compliance_frameworks,
    dc.is_active
FROM data_classification dc
LEFT JOIN field_encryption fe ON fe.sensitivity_level_id = dc.id
LEFT JOIN data_masking_rule dmr ON dmr.table_name IN (
    SELECT DISTINCT table_name 
    FROM field_encryption 
    WHERE sensitivity_level_id = dc.id
)
GROUP BY dc.id
ORDER BY dc.classification_level DESC;

-- =============================================
-- SECURITY AUDIT TRIGGERS
-- =============================================

DELIMITER $$

-- Trigger: Log encryption key access
CREATE TRIGGER tr_encryption_key_access
AFTER UPDATE ON encryption_key
FOR EACH ROW
BEGIN
    IF OLD.last_used_date != NEW.last_used_date THEN
        INSERT INTO security_audit_log (
            event_type,
            severity_id,
            user_id,
            resource_type,
            resource_id,
            action,
            result_id,
            created_at
        ) VALUES (
            'ENCRYPTION_KEY_ACCESS',
            (SELECT id FROM resource_db.security_severity WHERE code = 'LOW'),
            NEW.updated_by,
            'encryption_key',
            NEW.id,
            'KEY_ACCESSED',
            (SELECT id FROM resource_db.security_result WHERE code = 'SUCCESS'),
            NOW()
        );
    END IF;
END$$

-- Trigger: Monitor failed login attempts
CREATE TRIGGER tr_monitor_failed_logins
AFTER UPDATE ON user
FOR EACH ROW
BEGIN
    IF NEW.failed_login_attempts > OLD.failed_login_attempts THEN
        -- Check for brute force pattern
        IF NEW.failed_login_attempts >= 3 THEN
            CALL sp_record_suspicious_activity(
                'BRUTE_FORCE_ATTEMPT',
                NEW.id,
                NEW.last_login_ip,
                NULL,
                CONCAT('Failed login attempts: ', NEW.failed_login_attempts),
                JSON_OBJECT('failed_attempts', NEW.failed_login_attempts),
                LEAST(NEW.failed_login_attempts * 20, 100)
            );
        END IF;
    END IF;
END$$

-- Trigger: Validate IP whitelist/blacklist overlap
CREATE TRIGGER tr_validate_ip_whitelist
BEFORE INSERT ON ip_whitelist
FOR EACH ROW
BEGIN
    IF EXISTS (
        SELECT 1 FROM ip_blacklist
        WHERE ip_address = NEW.ip_address
            AND is_active = TRUE
            AND (expires_at IS NULL OR expires_at > NOW())
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'IP address is currently blacklisted';
    END IF;
END$$

DELIMITER ;

-- =============================================
-- SECURITY MAINTENANCE PROCEDURES
-- =============================================

DELIMITER $$

-- Clean up expired security data
CREATE PROCEDURE sp_cleanup_security_data()
BEGIN
    DECLARE v_deleted_count INT DEFAULT 0;
    
    -- Remove expired blacklist entries
    UPDATE ip_blacklist
    SET is_active = FALSE,
        updated_at = NOW(),
        updated_by = 1 -- System user
    WHERE is_active = TRUE
        AND expires_at IS NOT NULL
        AND expires_at < NOW()
        AND auto_expire = TRUE;
    
    SET v_deleted_count = v_deleted_count + ROW_COUNT();
    
    -- Archive old security audit logs
    INSERT INTO security_audit_log_archive
    SELECT * FROM security_audit_log
    WHERE created_at < DATE_SUB(NOW(), INTERVAL 90 DAY);
    
    DELETE FROM security_audit_log
    WHERE created_at < DATE_SUB(NOW(), INTERVAL 90 DAY);
    
    SET v_deleted_count = v_deleted_count + ROW_COUNT();
    
    -- Clean up terminated sessions
    DELETE FROM session_security
    WHERE terminated_at IS NOT NULL
        AND terminated_at < DATE_SUB(NOW(), INTERVAL 30 DAY);
    
    SET v_deleted_count = v_deleted_count + ROW_COUNT();
    
    -- Remove old password history (keep last 12)
    DELETE ph1 FROM password_history ph1
    INNER JOIN (
        SELECT user_id, set_date
        FROM password_history ph2
        WHERE (
            SELECT COUNT(*)
            FROM password_history ph3
            WHERE ph3.user_id = ph2.user_id
                AND ph3.set_date > ph2.set_date
        ) >= 12
    ) ph4 ON ph1.user_id = ph4.user_id AND ph1.set_date = ph4.set_date;
    
    SET v_deleted_count = v_deleted_count + ROW_COUNT();
    
    SELECT v_deleted_count AS total_records_cleaned;
END$$

DELIMITER ;
    
-- ======================================
-- SECTION 3: IDENTIFIER
-- ======================================

-- ======================================
-- ENTITY CODE DEFINITION
-- Master list of all entity types in the system
-- ======================================

CREATE TABLE entity_code_definition (
    id INT AUTO_INCREMENT PRIMARY KEY,
    entity_code VARCHAR(10) NOT NULL UNIQUE COMMENT 'WOR, REC, REL, etc.',
    entity_name VARCHAR(100) NOT NULL COMMENT 'Work, Recording, Release, etc.',
    table_name VARCHAR(100) NOT NULL COMMENT 'Actual table name in database',
    external_id_field VARCHAR(100) DEFAULT 'external_id' COMMENT 'Field name for external ID',
    description TEXT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    display_order INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    KEY idx_entity_code (entity_code),
    KEY idx_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Master list of all entity types and their codes for ID generation';

-- ======================================
-- TENANT ID SEQUENCE
-- Manages unique ID generation per tenant
-- ======================================

CREATE TABLE tenant_id_sequence (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tenant_id INT NOT NULL,
    entity_code VARCHAR(10) NOT NULL,
    prefix_letter CHAR(1) NOT NULL COMMENT 'Tenant-specific prefix (A-Z)',
    last_id INT DEFAULT 0 COMMENT 'Last used sequence number',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uk_tenant_entity (tenant_id, entity_code),
    KEY idx_tenant_prefix (tenant_id, prefix_letter),
    FOREIGN KEY (entity_code) REFERENCES entity_code_definition(entity_code) ON UPDATE CASCADE,
    CONSTRAINT chk_prefix_letter CHECK (prefix_letter REGEXP '^[A-Z]$')
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Manages sequential ID generation for each tenant and entity type';

-- ======================================
-- POPULATE ENTITY CODE DEFINITIONS
-- All entity types that need unique IDs
-- ======================================

INSERT INTO entity_code_definition (entity_code, entity_name, table_name, display_order) VALUES
-- Core Entities
('PER', 'Person', 'person', 10),
('ORG', 'Organization', 'organization', 20),
('WOR', 'Work', 'work', 30),
('REC', 'Recording', 'recording', 40),
('REL', 'Release', 'release', 50),
('TRK', 'Track', 'track', 60),
('VID', 'Video', 'video', 70),
('ART', 'Artist', 'artist', 80),
('WRI', 'Writer', 'writer', 90),
('PUB', 'Publisher', 'publisher', 100),
('LAB', 'Label', 'label', 110),
('RGH', 'Rights Holder', 'rights_holder', 120),
('LEG', 'Legal Entity', 'legal_entity', 130),

-- Agreement & Contract
('AGR', 'Agreement', 'agreement', 140),
('SPL', 'Split Sheet', 'split_sheet', 150),
('SMC', 'Smart Contract', 'smart_contract', 160),

-- NFT & Blockchain
('NFC', 'NFT Collection', 'nft_collection', 170),
('NFT', 'NFT Asset', 'nft_asset', 180),
('WAL', 'Wallet', 'wallet_address', 190),

-- Registration & Society
('RGB', 'Registration Batch', 'registration_batch', 200),
('WRG', 'Work Registration', 'work_registration', 210),
('RRG', 'Recording Registration', 'recording_registration', 220),

-- Financial & Royalty
('RST', 'Royalty Statement', 'royalty_statement', 230),
('PAY', 'Payment Batch', 'payment_batch', 240),
('ADV', 'Advance', 'agreement_advance', 250),

-- CWR & DDEX
('CWT', 'CWR Transmission', 'cwr_transmission', 260),
('DDX', 'DDEX Message', 'ddex_message', 270),

-- DSP & Platform
('DSP', 'DSP Account', 'dsp_account', 280),
('DSD', 'DSP Delivery', 'dsp_delivery', 290),

-- Sync & Licensing
('SYN', 'Sync Opportunity', 'sync_opportunity', 300),
('LIC', 'License Agreement', 'license_agreement', 310),

-- User & Access
('USR', 'User', 'user', 320),
('API', 'API Key', 'api_key', 330),

-- Content & Files
('FIL', 'File', 'file', 340),
('MMA', 'Multimedia Asset', 'multimedia_asset', 350),

-- Workflow & Tasks
('WFL', 'Workflow', 'workflow', 360),
('TSK', 'Task', 'task', 370),

-- Reports & Analytics
('RPT', 'Report', 'report_template', 380),
('EXP', 'Export Job', 'export_job', 390),
('IMP', 'Import Job', 'import_job', 400);

-- =============================================
-- SECTION 3: IDENTIFIER TABLES
-- =============================================
-- Comprehensive identifier management for music industry
-- standard codes (ISWC, ISRC, IPI, ISNI, etc.) and 
-- proprietary platform identifiers
-- =============================================

-- work_identifier - ISWC, society work numbers
CREATE TABLE work_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    work_id BIGINT UNSIGNED NOT NULL,
    identifier_type_id INT NOT NULL COMMENT 'FK to resource_db.work_identifier_type',
    identifier_value VARCHAR(50) NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    society_id INT NULL COMMENT 'FK to resource_db.society',
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    issued_date DATE NULL,
    verified_date DATE NULL,
    verified_by VARCHAR(100) NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_work_identifier_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_work_identifier_type FOREIGN KEY (identifier_type_id) REFERENCES resource_db.work_identifier_type(id),
    CONSTRAINT fk_work_identifier_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_work_identifier_society FOREIGN KEY (society_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_work_identifier_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_work_identifier_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_work_identifier_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_work_identifier_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_work_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_work_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_work_identifier (identifier_type_id, identifier_value, society_id),
    INDEX idx_work_id (work_id),
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_identifier_type (identifier_type_id),
    INDEX idx_society (society_id),
    INDEX idx_territory (territory_id),
    INDEX idx_status (identifier_status_id),
    INDEX idx_primary (is_primary),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- work_identifier_history - Identifier changes
CREATE TABLE work_identifier_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    work_identifier_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    change_type_id INT NOT NULL COMMENT 'FK to resource_db.identifier_change_type',
    old_identifier_value VARCHAR(50) NULL,
    new_identifier_value VARCHAR(50) NULL,
    old_status_id INT NULL,
    new_status_id INT NULL,
    change_reason TEXT NULL,
    changed_by_user_id BIGINT UNSIGNED NULL,
    changed_by_system VARCHAR(100) NULL,
    change_source VARCHAR(100) NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Keys
    CONSTRAINT fk_work_id_history_identifier FOREIGN KEY (work_identifier_id) REFERENCES work_identifier(id),
    CONSTRAINT fk_work_id_history_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_work_id_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.identifier_change_type(id),
    CONSTRAINT fk_work_id_history_old_status FOREIGN KEY (old_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_work_id_history_new_status FOREIGN KEY (new_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_work_id_history_user FOREIGN KEY (changed_by_user_id) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_work_identifier_id (work_identifier_id),
    INDEX idx_work_id (work_id),
    INDEX idx_change_type (change_type_id),
    INDEX idx_created_at (created_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- recording_identifier - ISRC, catalog numbers
CREATE TABLE recording_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    recording_id BIGINT UNSIGNED NOT NULL,
    identifier_type_id INT NOT NULL COMMENT 'FK to resource_db.recording_identifier_type',
    identifier_value VARCHAR(50) NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    issued_by_id BIGINT UNSIGNED NULL COMMENT 'Label/organization that issued',
    issued_date DATE NULL,
    verified_date DATE NULL,
    verified_by VARCHAR(100) NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_recording_identifier_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_recording_identifier_type FOREIGN KEY (identifier_type_id) REFERENCES resource_db.recording_identifier_type(id),
    CONSTRAINT fk_recording_identifier_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_recording_identifier_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_recording_identifier_issued_by FOREIGN KEY (issued_by_id) REFERENCES organization(id),
    CONSTRAINT fk_recording_identifier_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_recording_identifier_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_recording_identifier_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_recording_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_recording_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_recording_identifier (identifier_type_id, identifier_value),
    INDEX idx_recording_id (recording_id),
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_identifier_type (identifier_type_id),
    INDEX idx_territory (territory_id),
    INDEX idx_issued_by (issued_by_id),
    INDEX idx_status (identifier_status_id),
    INDEX idx_primary (is_primary),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- recording_identifier_history - Recording ID changes
CREATE TABLE recording_identifier_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    recording_identifier_id BIGINT UNSIGNED NOT NULL,
    recording_id BIGINT UNSIGNED NOT NULL,
    change_type_id INT NOT NULL COMMENT 'FK to resource_db.identifier_change_type',
    old_identifier_value VARCHAR(50) NULL,
    new_identifier_value VARCHAR(50) NULL,
    old_status_id INT NULL,
    new_status_id INT NULL,
    change_reason TEXT NULL,
    changed_by_user_id BIGINT UNSIGNED NULL,
    changed_by_system VARCHAR(100) NULL,
    change_source VARCHAR(100) NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Keys
    CONSTRAINT fk_recording_id_history_identifier FOREIGN KEY (recording_identifier_id) REFERENCES recording_identifier(id),
    CONSTRAINT fk_recording_id_history_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_recording_id_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.identifier_change_type(id),
    CONSTRAINT fk_recording_id_history_old_status FOREIGN KEY (old_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_recording_id_history_new_status FOREIGN KEY (new_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_recording_id_history_user FOREIGN KEY (changed_by_user_id) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_recording_identifier_id (recording_identifier_id),
    INDEX idx_recording_id (recording_id),
    INDEX idx_change_type (change_type_id),
    INDEX idx_created_at (created_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- release_identifier - UPC, EAN, catalog numbers
CREATE TABLE release_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    release_id BIGINT UNSIGNED NOT NULL,
    identifier_type_id INT NOT NULL COMMENT 'FK to resource_db.release_identifier_type',
    identifier_value VARCHAR(50) NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    format_id INT NULL COMMENT 'FK to resource_db.release_format',
    issued_date DATE NULL,
    verified_date DATE NULL,
    verified_by VARCHAR(100) NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_release_identifier_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_release_identifier_type FOREIGN KEY (identifier_type_id) REFERENCES resource_db.release_identifier_type(id),
    CONSTRAINT fk_release_identifier_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_release_identifier_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_release_identifier_format FOREIGN KEY (format_id) REFERENCES resource_db.release_format(id),
    CONSTRAINT fk_release_identifier_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_release_identifier_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_release_identifier_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_release_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_release_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_release_identifier (identifier_type_id, identifier_value, territory_id),
    INDEX idx_release_id (release_id),
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_identifier_type (identifier_type_id),
    INDEX idx_territory (territory_id),
    INDEX idx_format (format_id),
    INDEX idx_status (identifier_status_id),
    INDEX idx_primary (is_primary),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- person_identifier - IPI, ISNI
CREATE TABLE person_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    person_id BIGINT UNSIGNED NOT NULL,
    identifier_type_id INT NOT NULL COMMENT 'FK to resource_db.person_identifier_type',
    identifier_value VARCHAR(50) NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    society_id INT NULL COMMENT 'FK to resource_db.society',
    role_code VARCHAR(10) NULL COMMENT 'CA, PA, etc.',
    issued_date DATE NULL,
    verified_date DATE NULL,
    verified_by VARCHAR(100) NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_person_identifier_person FOREIGN KEY (person_id) REFERENCES person(id),
    CONSTRAINT fk_person_identifier_type FOREIGN KEY (identifier_type_id) REFERENCES resource_db.person_identifier_type(id),
    CONSTRAINT fk_person_identifier_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_person_identifier_society FOREIGN KEY (society_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_person_identifier_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_person_identifier_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_person_identifier_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_person_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_person_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_person_identifier (identifier_type_id, identifier_value),
    INDEX idx_person_id (person_id),
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_identifier_type (identifier_type_id),
    INDEX idx_society (society_id),
    INDEX idx_status (identifier_status_id),
    INDEX idx_primary (is_primary),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- organization_identifier - IPI, ISNI, society codes
CREATE TABLE organization_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    organization_id BIGINT UNSIGNED NOT NULL,
    identifier_type_id INT NOT NULL COMMENT 'FK to resource_db.organization_identifier_type',
    identifier_value VARCHAR(50) NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    society_id INT NULL COMMENT 'FK to resource_db.society',
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    issued_date DATE NULL,
    verified_date DATE NULL,
    verified_by VARCHAR(100) NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_organization_identifier_org FOREIGN KEY (organization_id) REFERENCES organization(id),
    CONSTRAINT fk_organization_identifier_type FOREIGN KEY (identifier_type_id) REFERENCES resource_db.organization_identifier_type(id),
    CONSTRAINT fk_organization_identifier_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_organization_identifier_society FOREIGN KEY (society_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_organization_identifier_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_organization_identifier_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_organization_identifier_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_organization_identifier_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_organization_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_organization_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_organization_identifier (identifier_type_id, identifier_value, society_id),
    INDEX idx_organization_id (organization_id),
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_identifier_type (identifier_type_id),
    INDEX idx_society (society_id),
    INDEX idx_territory (territory_id),
    INDEX idx_status (identifier_status_id),
    INDEX idx_primary (is_primary),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- video_identifier - ISAN, YouTube IDs
CREATE TABLE video_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    video_id BIGINT UNSIGNED NOT NULL,
    identifier_type_id INT NOT NULL COMMENT 'FK to resource_db.video_identifier_type',
    identifier_value VARCHAR(100) NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    platform_id INT NULL COMMENT 'FK to resource_db.platform',
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    issued_date DATE NULL,
    verified_date DATE NULL,
    verified_by VARCHAR(100) NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_video_identifier_video FOREIGN KEY (video_id) REFERENCES video(id),
    CONSTRAINT fk_video_identifier_type FOREIGN KEY (identifier_type_id) REFERENCES resource_db.video_identifier_type(id),
    CONSTRAINT fk_video_identifier_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_video_identifier_platform FOREIGN KEY (platform_id) REFERENCES resource_db.platform(id),
    CONSTRAINT fk_video_identifier_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_video_identifier_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_video_identifier_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_video_identifier_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_video_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_video_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_video_identifier (identifier_type_id, identifier_value, platform_id),
    INDEX idx_video_id (video_id),
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_identifier_type (identifier_type_id),
    INDEX idx_platform (platform_id),
    INDEX idx_territory (territory_id),
    INDEX idx_status (identifier_status_id),
    INDEX idx_primary (is_primary),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- asset_identifier - Generic identifier storage
CREATE TABLE asset_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    asset_type VARCHAR(50) NOT NULL COMMENT 'work, recording, release, etc.',
    asset_id BIGINT UNSIGNED NOT NULL,
    identifier_type_id INT NOT NULL COMMENT 'FK to resource_db.asset_identifier_type',
    identifier_value VARCHAR(100) NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    issuing_organization VARCHAR(100) NULL,
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    issued_date DATE NULL,
    expires_date DATE NULL,
    verified_date DATE NULL,
    verified_by VARCHAR(100) NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_asset_identifier_type FOREIGN KEY (identifier_type_id) REFERENCES resource_db.asset_identifier_type(id),
    CONSTRAINT fk_asset_identifier_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_asset_identifier_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_asset_identifier_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_asset_identifier_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_asset_identifier_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_asset_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_asset_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_asset (asset_type, asset_id),
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_identifier_type (identifier_type_id),
    INDEX idx_territory (territory_id),
    INDEX idx_status (identifier_status_id),
    INDEX idx_primary (is_primary),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- society_work_id - Society-specific work IDs
CREATE TABLE society_work_id (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    work_id BIGINT UNSIGNED NOT NULL,
    society_id INT NOT NULL COMMENT 'FK to resource_db.society',
    society_work_code VARCHAR(50) NOT NULL,
    registration_status_id INT NOT NULL COMMENT 'FK to resource_db.registration_status',
    registration_date DATE NULL,
    acknowledgment_date DATE NULL,
    last_update_date DATE NULL,
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    share_percentage DECIMAL(5,2) NULL,
    is_origin_society BOOLEAN DEFAULT FALSE,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_society_work_id_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_society_work_id_society FOREIGN KEY (society_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_society_work_id_status FOREIGN KEY (registration_status_id) REFERENCES resource_db.registration_status(id),
    CONSTRAINT fk_society_work_id_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_society_work_id_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_society_work_id_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_society_work_id_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_society_work_id_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_society_work (society_id, society_work_code),
    INDEX idx_work_id (work_id),
    INDEX idx_society_id (society_id),
    INDEX idx_society_work_code (society_work_code),
    INDEX idx_status (registration_status_id),
    INDEX idx_territory (territory_id),
    INDEX idx_origin_society (is_origin_society),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- society_recording_id - Society-specific recording IDs
CREATE TABLE society_recording_id (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    recording_id BIGINT UNSIGNED NOT NULL,
    society_id INT NOT NULL COMMENT 'FK to resource_db.society',
    society_recording_code VARCHAR(50) NOT NULL,
    registration_status_id INT NOT NULL COMMENT 'FK to resource_db.registration_status',
    registration_date DATE NULL,
    acknowledgment_date DATE NULL,
    last_update_date DATE NULL,
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_society_recording_id_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_society_recording_id_society FOREIGN KEY (society_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_society_recording_id_status FOREIGN KEY (registration_status_id) REFERENCES resource_db.registration_status(id),
    CONSTRAINT fk_society_recording_id_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_society_recording_id_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_society_recording_id_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_society_recording_id_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_society_recording_id_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_society_recording (society_id, society_recording_code),
    INDEX idx_recording_id (recording_id),
    INDEX idx_society_id (society_id),
    INDEX idx_society_recording_code (society_recording_code),
    INDEX idx_status (registration_status_id),
    INDEX idx_territory (territory_id),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- grid_identifier - GRid (Global Release Identifier)
CREATE TABLE grid_identifier (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    release_id BIGINT UNSIGNED NOT NULL,
    grid_value VARCHAR(18) NOT NULL COMMENT 'A1-2425G-ABC1234567-M',
    grid_version VARCHAR(10) NULL,
    issuer_code VARCHAR(10) NOT NULL,
    issue_date DATE NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_grid_identifier_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_grid_identifier_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_grid_identifier_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_grid_identifier_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_grid_identifier_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_grid_identifier_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_grid_identifier_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_grid_value (grid_value),
    INDEX idx_release_id (release_id),
    INDEX idx_issuer_code (issuer_code),
    INDEX idx_issue_date (issue_date),
    INDEX idx_status (identifier_status_id),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ddex_party_id - DDEX DPID
CREATE TABLE ddex_party_id (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL COMMENT 'person, organization, label, publisher',
    entity_id BIGINT UNSIGNED NOT NULL,
    dpid_value VARCHAR(20) NOT NULL COMMENT 'PADPIDA2014120301A',
    dpid_version VARCHAR(10) NULL,
    role_type_id INT NULL COMMENT 'FK to resource_db.ddex_role_type',
    issued_date DATE NOT NULL,
    identifier_status_id INT NOT NULL COMMENT 'FK to resource_db.identifier_status',
    validation_status_id INT NULL COMMENT 'FK to resource_db.validation_status',
    validation_message TEXT NULL,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_ddex_party_id_role_type FOREIGN KEY (role_type_id) REFERENCES resource_db.ddex_role_type(id),
    CONSTRAINT fk_ddex_party_id_status FOREIGN KEY (identifier_status_id) REFERENCES resource_db.identifier_status(id),
    CONSTRAINT fk_ddex_party_id_validation_status FOREIGN KEY (validation_status_id) REFERENCES resource_db.validation_status(id),
    CONSTRAINT fk_ddex_party_id_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_ddex_party_id_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_ddex_party_id_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_ddex_party_id_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_dpid_value (dpid_value),
    INDEX idx_entity (entity_type, entity_id),
    INDEX idx_role_type (role_type_id),
    INDEX idx_issued_date (issued_date),
    INDEX idx_status (identifier_status_id),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- proprietary_id - Platform-specific IDs
CREATE TABLE proprietary_id (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    platform_id INT NOT NULL COMMENT 'FK to resource_db.platform',
    platform_identifier VARCHAR(100) NOT NULL,
    identifier_type VARCHAR(50) NULL COMMENT 'track_id, artist_id, album_id, etc.',
    territory_id INT NULL COMMENT 'FK to resource_db.territory',
    issued_date DATE NULL,
    last_verified DATE NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    metadata JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_proprietary_id_platform FOREIGN KEY (platform_id) REFERENCES resource_db.platform(id),
    CONSTRAINT fk_proprietary_id_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_proprietary_id_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_proprietary_id_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_proprietary_id_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_proprietary_id_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_platform_identifier (platform_id, platform_identifier, entity_type, entity_id),
    INDEX idx_entity (entity_type, entity_id),
    INDEX idx_platform_identifier (platform_identifier),
    INDEX idx_territory (territory_id),
    INDEX idx_verified (is_verified),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- identifier_validation_log - Validation history
CREATE TABLE identifier_validation_log (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    identifier_table VARCHAR(50) NOT NULL COMMENT 'Source table name',
    identifier_id BIGINT UNSIGNED NOT NULL COMMENT 'ID in source table',
    identifier_type VARCHAR(50) NOT NULL,
    identifier_value VARCHAR(100) NOT NULL,
    validation_type_id INT NOT NULL COMMENT 'FK to resource_db.identifier_validation_type',
    validation_result_id INT NOT NULL COMMENT 'FK to resource_db.validation_result',
    validation_method VARCHAR(100) NULL,
    validation_service VARCHAR(100) NULL,
    error_code VARCHAR(50) NULL,
    error_message TEXT NULL,
    suggested_value VARCHAR(100) NULL,
    confidence_score DECIMAL(5,2) NULL,
    response_data JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_id_validation_type FOREIGN KEY (validation_type_id) REFERENCES resource_db.identifier_validation_type(id),
    CONSTRAINT fk_id_validation_result FOREIGN KEY (validation_result_id) REFERENCES resource_db.validation_result(id),
    CONSTRAINT fk_id_validation_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_identifier (identifier_table, identifier_id),
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_validation_type (validation_type_id),
    INDEX idx_validation_result (validation_result_id),
    INDEX idx_created_at (created_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- identifier_conflict - Conflicting identifiers
CREATE TABLE identifier_conflict (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    conflict_type_id INT NOT NULL COMMENT 'FK to resource_db.identifier_conflict_type',
    identifier_type VARCHAR(50) NOT NULL,
    identifier_value VARCHAR(100) NOT NULL,
    entity1_type VARCHAR(50) NOT NULL,
    entity1_id BIGINT UNSIGNED NOT NULL,
    entity2_type VARCHAR(50) NOT NULL,
    entity2_id BIGINT UNSIGNED NOT NULL,
    detection_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    detection_method VARCHAR(100) NULL,
    conflict_status_id INT NOT NULL COMMENT 'FK to resource_db.conflict_status',
    resolution_date DATETIME NULL,
    resolution_method_id INT NULL COMMENT 'FK to resource_db.resolution_method',
    resolved_by BIGINT UNSIGNED NULL,
    resolution_notes TEXT NULL,
    winning_entity_type VARCHAR(50) NULL,
    winning_entity_id BIGINT UNSIGNED NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_id_conflict_type FOREIGN KEY (conflict_type_id) REFERENCES resource_db.identifier_conflict_type(id),
    CONSTRAINT fk_id_conflict_status FOREIGN KEY (conflict_status_id) REFERENCES resource_db.conflict_status(id),
    CONSTRAINT fk_id_conflict_resolution_method FOREIGN KEY (resolution_method_id) REFERENCES resource_db.resolution_method(id),
    CONSTRAINT fk_id_conflict_resolved_by FOREIGN KEY (resolved_by) REFERENCES user(id),
    CONSTRAINT fk_id_conflict_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_id_conflict_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_identifier_value (identifier_value),
    INDEX idx_identifier_type (identifier_type),
    INDEX idx_entity1 (entity1_type, entity1_id),
    INDEX idx_entity2 (entity2_type, entity2_id),
    INDEX idx_conflict_status (conflict_status_id),
    INDEX idx_detection_date (detection_date),
    INDEX idx_resolution_date (resolution_date),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- identifier_merge - Merged identifiers
CREATE TABLE identifier_merge (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    merge_type_id INT NOT NULL COMMENT 'FK to resource_db.identifier_merge_type',
    source_identifier_table VARCHAR(50) NOT NULL,
    source_identifier_id BIGINT UNSIGNED NOT NULL,
    source_identifier_value VARCHAR(100) NOT NULL,
    target_identifier_table VARCHAR(50) NOT NULL,
    target_identifier_id BIGINT UNSIGNED NOT NULL,
    target_identifier_value VARCHAR(100) NOT NULL,
    merge_reason_id INT NOT NULL COMMENT 'FK to resource_db.merge_reason',
    merge_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    merge_metadata JSON NULL,
    reversal_date DATETIME NULL,
    reversal_reason TEXT NULL,
    reversed_by BIGINT UNSIGNED NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_id_merge_type FOREIGN KEY (merge_type_id) REFERENCES resource_db.identifier_merge_type(id),
    CONSTRAINT fk_id_merge_reason FOREIGN KEY (merge_reason_id) REFERENCES resource_db.merge_reason(id),
    CONSTRAINT fk_id_merge_reversed_by FOREIGN KEY (reversed_by) REFERENCES user(id),
    CONSTRAINT fk_id_merge_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_id_merge_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_source_identifier (source_identifier_table, source_identifier_id),
    INDEX idx_target_identifier (target_identifier_table, target_identifier_id),
    INDEX idx_source_value (source_identifier_value),
    INDEX idx_target_value (target_identifier_value),
    INDEX idx_merge_date (merge_date),
    INDEX idx_reversal_date (reversal_date),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


-- =============================================
-- SECTION 3: IDENTIFIER PROCEDURES & VIEWS
-- =============================================
-- Validation and management for music industry identifiers
-- ISWC, ISRC, IPI, ISNI, UPC, EAN, etc.
-- =============================================

-- ======================================
-- STORED PROCEDURES
-- ======================================

DELIMITER $$

-- Initialize sequences for a new tenant
DROP PROCEDURE IF EXISTS initialize_tenant_sequences$$

CREATE PROCEDURE initialize_tenant_sequences(
    IN p_tenant_id INT,
    IN p_prefix_letter CHAR(1)
)
COMMENT 'Creates sequence entries for all entity types for a new tenant'
BEGIN
    DECLARE v_count INT;
    
    -- Validate prefix letter
    IF p_prefix_letter NOT REGEXP '^[A-Z]$' THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Prefix letter must be A-Z';
    END IF;
    
    -- Check if sequences already exist for this tenant
    SELECT COUNT(*) INTO v_count
    FROM tenant_id_sequence
    WHERE tenant_id = p_tenant_id;
    
    IF v_count > 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Sequences already exist for this tenant';
    END IF;
    
    -- Insert all sequences for the tenant
    INSERT INTO tenant_id_sequence (tenant_id, entity_code, prefix_letter)
    SELECT p_tenant_id, entity_code, p_prefix_letter
    FROM entity_code_definition
    WHERE is_active = TRUE;
    
    SELECT CONCAT('Initialized ', ROW_COUNT(), ' sequences for tenant ', p_tenant_id) AS result;
END$$

-- Reset a sequence to a specific value
DROP PROCEDURE IF EXISTS reset_sequence$$

CREATE PROCEDURE reset_sequence(
    IN p_tenant_id INT,
    IN p_entity_code VARCHAR(10),
    IN p_new_value INT
)
COMMENT 'Resets a sequence to a specific value (use with caution)'
BEGIN
    UPDATE tenant_id_sequence
    SET last_id = p_new_value
    WHERE tenant_id = p_tenant_id 
    AND entity_code = p_entity_code;
    
    IF ROW_COUNT() = 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Sequence not found for tenant/entity combination';
    END IF;
    
    SELECT CONCAT('Reset ', p_entity_code, ' sequence to ', p_new_value) AS result;
END$$

DELIMITER ;

-- ======================================
-- ID GENERATION FUNCTION
-- ======================================

DELIMITER $$

DROP FUNCTION IF EXISTS generate_external_id$$

CREATE FUNCTION generate_external_id(
    p_tenant_id INT,
    p_entity_code VARCHAR(10)
) RETURNS VARCHAR(12)
DETERMINISTIC
MODIFIES SQL DATA
COMMENT 'Generates the next unique external ID for an entity'
BEGIN
    DECLARE v_next_id INT;
    DECLARE v_prefix CHAR(1);
    DECLARE v_formatted_id VARCHAR(12);
    
    -- Get and increment the sequence atomically
    UPDATE tenant_id_sequence
    SET last_id = last_id + 1
    WHERE tenant_id = p_tenant_id AND entity_code = p_entity_code;
    
    IF ROW_COUNT() = 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Sequence not found - ensure tenant sequences are initialized';
    END IF;
    
    -- Get the new values
    SELECT last_id, prefix_letter INTO v_next_id, v_prefix
    FROM tenant_id_sequence
    WHERE tenant_id = p_tenant_id AND entity_code = p_entity_code;
    
    -- Format the ID: PREFIX + ENTITY_CODE + 6-digit padded number
    SET v_formatted_id = CONCAT(v_prefix, p_entity_code, LPAD(v_next_id, 6, '0'));
    
    RETURN v_formatted_id;
END$$

-- Peek at next ID without incrementing
DROP FUNCTION IF EXISTS peek_next_external_id$$

CREATE FUNCTION peek_next_external_id(
    p_tenant_id INT,
    p_entity_code VARCHAR(10)
) RETURNS VARCHAR(12)
READS SQL DATA
COMMENT 'Shows what the next ID would be without incrementing'
BEGIN
    DECLARE v_next_id INT;
    DECLARE v_prefix CHAR(1);
    DECLARE v_formatted_id VARCHAR(12);
    
    -- Get current values without incrementing
    SELECT last_id + 1, prefix_letter INTO v_next_id, v_prefix
    FROM tenant_id_sequence
    WHERE tenant_id = p_tenant_id AND entity_code = p_entity_code;
    
    IF v_next_id IS NULL THEN
        RETURN NULL;
    END IF;
    
    -- Format the ID
    SET v_formatted_id = CONCAT(v_prefix, p_entity_code, LPAD(v_next_id, 6, '0'));
    
    RETURN v_formatted_id;
END$$

DELIMITER ;

-- =============================================
-- IDENTIFIER VALIDATION FUNCTIONS
-- =============================================

DELIMITER $$

-- Validate ISWC (International Standard Musical Work Code)
-- Format: T-123.456.789-C (T-9 digits-check digit)
CREATE FUNCTION fn_validate_iswc(
    p_iswc VARCHAR(15)
) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE v_clean_iswc VARCHAR(15);
    DECLARE v_digits VARCHAR(9);
    DECLARE v_check_digit INT;
    DECLARE v_calculated_check INT;
    DECLARE v_sum INT DEFAULT 0;
    DECLARE i INT DEFAULT 1;
    
    -- Clean and standardize format
    SET v_clean_iswc = UPPER(REPLACE(REPLACE(p_iswc, '.', ''), '-', ''));
    
    -- Check basic format
    IF LENGTH(v_clean_iswc) != 11 OR LEFT(v_clean_iswc, 1) != 'T' THEN
        RETURN FALSE;
    END IF;
    
    -- Extract digits and check digit
    SET v_digits = SUBSTRING(v_clean_iswc, 2, 9);
    SET v_check_digit = CAST(RIGHT(v_clean_iswc, 1) AS UNSIGNED);
    
    -- Validate all numeric
    IF v_digits NOT REGEXP '^[0-9]{9}$' THEN
        RETURN FALSE;
    END IF;
    
    -- Calculate check digit (MOD 10)
    WHILE i <= 9 DO
        SET v_sum = v_sum + CAST(SUBSTRING(v_digits, i, 1) AS UNSIGNED) * (10 - i);
        SET i = i + 1;
    END WHILE;
    
    SET v_calculated_check = MOD(v_sum, 10);
    
    RETURN v_calculated_check = v_check_digit;
END$$

-- Validate ISRC (International Standard Recording Code)
-- Format: CC-XXX-YY-NNNNN (Country-Registrant-Year-Number)
CREATE FUNCTION fn_validate_isrc(
    p_isrc VARCHAR(15)
) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE v_clean_isrc VARCHAR(12);
    DECLARE v_country CHAR(2);
    DECLARE v_registrant CHAR(3);
    DECLARE v_year CHAR(2);
    DECLARE v_number CHAR(5);
    
    -- Clean format
    SET v_clean_isrc = UPPER(REPLACE(p_isrc, '-', ''));
    
    -- Check length
    IF LENGTH(v_clean_isrc) != 12 THEN
        RETURN FALSE;
    END IF;
    
    -- Parse components
    SET v_country = SUBSTRING(v_clean_isrc, 1, 2);
    SET v_registrant = SUBSTRING(v_clean_isrc, 3, 3);
    SET v_year = SUBSTRING(v_clean_isrc, 6, 2);
    SET v_number = SUBSTRING(v_clean_isrc, 8, 5);
    
    -- Validate format
    IF v_country NOT REGEXP '^[A-Z]{2}$' THEN
        RETURN FALSE;
    END IF;
    
    IF v_registrant NOT REGEXP '^[A-Z0-9]{3}$' THEN
        RETURN FALSE;
    END IF;
    
    IF v_year NOT REGEXP '^[0-9]{2}$' THEN
        RETURN FALSE;
    END IF;
    
    IF v_number NOT REGEXP '^[0-9]{5}$' THEN
        RETURN FALSE;
    END IF;
    
    RETURN TRUE;
END$$

-- Validate IPI (Interested Party Information) Name Number
-- Format: 00000000000 (11 digits with check digit)
CREATE FUNCTION fn_validate_ipi_name_number(
    p_ipi VARCHAR(15)
) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE v_clean_ipi VARCHAR(15);
    DECLARE v_digits VARCHAR(10);
    DECLARE v_check_digit INT;
    DECLARE v_sum INT DEFAULT 0;
    DECLARE v_weight INT;
    DECLARE i INT DEFAULT 1;
    
    -- Clean format
    SET v_clean_ipi = REPLACE(REPLACE(REPLACE(p_ipi, '-', ''), '.', ''), ' ', '');
    
    -- Check length
    IF LENGTH(v_clean_ipi) != 11 OR v_clean_ipi NOT REGEXP '^[0-9]{11}$' THEN
        RETURN FALSE;
    END IF;
    
    -- Extract digits and check digit
    SET v_digits = LEFT(v_clean_ipi, 10);
    SET v_check_digit = CAST(RIGHT(v_clean_ipi, 1) AS UNSIGNED);
    
    -- Calculate check digit (weighted sum mod 10)
    WHILE i <= 10 DO
        SET v_weight = IF(MOD(i, 2) = 1, 3, 1);
        SET v_sum = v_sum + (CAST(SUBSTRING(v_digits, i, 1) AS UNSIGNED) * v_weight);
        SET i = i + 1;
    END WHILE;
    
    SET v_sum = MOD(10 - MOD(v_sum, 10), 10);
    
    RETURN v_sum = v_check_digit;
END$$

-- Validate ISNI (International Standard Name Identifier)
-- Format: 0000 0000 0000 000X (16 characters)
CREATE FUNCTION fn_validate_isni(
    p_isni VARCHAR(20)
) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE v_clean_isni VARCHAR(16);
    DECLARE v_digits VARCHAR(15);
    DECLARE v_check_char CHAR(1);
    DECLARE v_sum INT DEFAULT 0;
    DECLARE i INT DEFAULT 1;
    DECLARE v_remainder INT;
    
    -- Clean format
    SET v_clean_isni = REPLACE(REPLACE(p_isni, ' ', ''), '-', '');
    
    -- Check length
    IF LENGTH(v_clean_isni) != 16 THEN
        RETURN FALSE;
    END IF;
    
    -- Extract digits and check character
    SET v_digits = LEFT(v_clean_isni, 15);
    SET v_check_char = RIGHT(v_clean_isni, 1);
    
    -- Validate format
    IF v_digits NOT REGEXP '^[0-9]{15}$' THEN
        RETURN FALSE;
    END IF;
    
    -- Calculate check character (MOD 11)
    WHILE i <= 15 DO
        SET v_sum = (v_sum + CAST(SUBSTRING(v_digits, i, 1) AS UNSIGNED)) * 2;
        SET i = i + 1;
    END WHILE;
    
    SET v_remainder = MOD(v_sum, 11);
    SET v_remainder = MOD(12 - v_remainder, 11);
    
    -- Check character is either digit or 'X' for 10
    IF v_remainder = 10 THEN
        RETURN v_check_char = 'X';
    ELSE
        RETURN v_check_char = CAST(v_remainder AS CHAR);
    END IF;
END$$

-- Validate UPC (Universal Product Code)
-- Format: 12 digits with check digit
CREATE FUNCTION fn_validate_upc(
    p_upc VARCHAR(15)
) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE v_clean_upc VARCHAR(12);
    DECLARE v_sum_odd INT DEFAULT 0;
    DECLARE v_sum_even INT DEFAULT 0;
    DECLARE v_check_digit INT;
    DECLARE v_calculated_check INT;
    DECLARE i INT DEFAULT 1;
    
    -- Clean format
    SET v_clean_upc = REPLACE(REPLACE(p_upc, '-', ''), ' ', '');
    
    -- Check length and format
    IF LENGTH(v_clean_upc) != 12 OR v_clean_upc NOT REGEXP '^[0-9]{12}$' THEN
        RETURN FALSE;
    END IF;
    
    -- Calculate check digit
    WHILE i <= 11 DO
        IF MOD(i, 2) = 1 THEN
            SET v_sum_odd = v_sum_odd + CAST(SUBSTRING(v_clean_upc, i, 1) AS UNSIGNED);
        ELSE
            SET v_sum_even = v_sum_even + CAST(SUBSTRING(v_clean_upc, i, 1) AS UNSIGNED);
        END IF;
        SET i = i + 1;
    END WHILE;
    
    SET v_calculated_check = MOD(10 - MOD((v_sum_odd * 3) + v_sum_even, 10), 10);
    SET v_check_digit = CAST(RIGHT(v_clean_upc, 1) AS UNSIGNED);
    
    RETURN v_calculated_check = v_check_digit;
END$$

-- Validate EAN-13
CREATE FUNCTION fn_validate_ean13(
    p_ean VARCHAR(15)
) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE v_clean_ean VARCHAR(13);
    DECLARE v_sum INT DEFAULT 0;
    DECLARE v_check_digit INT;
    DECLARE i INT DEFAULT 1;
    
    -- Clean format
    SET v_clean_ean = REPLACE(REPLACE(p_ean, '-', ''), ' ', '');
    
    -- Check length and format
    IF LENGTH(v_clean_ean) != 13 OR v_clean_ean NOT REGEXP '^[0-9]{13}$' THEN
        RETURN FALSE;
    END IF;
    
    -- Calculate check digit
    WHILE i <= 12 DO
        IF MOD(i, 2) = 1 THEN
            SET v_sum = v_sum + CAST(SUBSTRING(v_clean_ean, i, 1) AS UNSIGNED);
        ELSE
            SET v_sum = v_sum + (CAST(SUBSTRING(v_clean_ean, i, 1) AS UNSIGNED) * 3);
        END IF;
        SET i = i + 1;
    END WHILE;
    
    SET v_check_digit = MOD(10 - MOD(v_sum, 10), 10);
    
    RETURN v_check_digit = CAST(RIGHT(v_clean_ean, 1) AS UNSIGNED);
END$$

DELIMITER ;

-- =============================================
-- IDENTIFIER MANAGEMENT PROCEDURES
-- =============================================

DELIMITER $$

-- Add or update work identifier with validation
CREATE PROCEDURE sp_upsert_work_identifier(
    IN p_work_id BIGINT UNSIGNED,
    IN p_identifier_type VARCHAR(50),
    IN p_identifier_value VARCHAR(50),
    IN p_society_id INT,
    IN p_territory_id INT,
    IN p_user_id BIGINT UNSIGNED,
    OUT p_identifier_id BIGINT UNSIGNED,
    OUT p_validation_result VARCHAR(50),
    OUT p_validation_message TEXT
)
BEGIN
    DECLARE v_identifier_type_id INT;
    DECLARE v_is_valid BOOLEAN DEFAULT FALSE;
    DECLARE v_existing_id BIGINT UNSIGNED;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_validation_result = 'ERROR';
        SET p_validation_message = 'Database error occurred';
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Get identifier type
    SELECT id INTO v_identifier_type_id
    FROM resource_db.work_identifier_type
    WHERE code = p_identifier_type;
    
    -- Validate based on type
    CASE p_identifier_type
        WHEN 'ISWC' THEN
            SET v_is_valid = fn_validate_iswc(p_identifier_value);
            IF NOT v_is_valid THEN
                SET p_validation_message = 'Invalid ISWC format. Expected: T-123.456.789-C';
            END IF;
            
        WHEN 'SOCIETY_WORK_CODE' THEN
            -- Society-specific validation
            SET v_is_valid = TRUE; -- Placeholder for society-specific rules
            
        ELSE
            SET v_is_valid = TRUE; -- Other types
    END CASE;
    
    IF NOT v_is_valid THEN
        SET p_validation_result = 'INVALID';
        ROLLBACK;
        RETURN;
    END IF;
    
    -- Check for existing identifier
    SELECT id INTO v_existing_id
    FROM work_identifier
    WHERE work_id = p_work_id
        AND identifier_type_id = v_identifier_type_id
        AND (society_id = p_society_id OR (society_id IS NULL AND p_society_id IS NULL))
        AND is_active = TRUE
    LIMIT 1;
    
    IF v_existing_id IS NOT NULL THEN
        -- Update existing
        UPDATE work_identifier
        SET identifier_value = p_identifier_value,
            identifier_status_id = (SELECT id FROM resource_db.identifier_status WHERE code = 'ACTIVE'),
            territory_id = p_territory_id,
            validation_status_id = (SELECT id FROM resource_db.validation_status WHERE code = 'VALID'),
            validation_message = NULL,
            updated_by = p_user_id,
            version = version + 1
        WHERE id = v_existing_id;
        
        SET p_identifier_id = v_existing_id;
        
        -- Log history
        INSERT INTO work_identifier_history (
            work_identifier_id,
            work_id,
            change_type_id,
            new_identifier_value,
            changed_by_user_id,
            change_source
        ) VALUES (
            v_existing_id,
            p_work_id,
            (SELECT id FROM resource_db.identifier_change_type WHERE code = 'UPDATE'),
            p_identifier_value,
            p_user_id,
            'MANUAL'
        );
    ELSE
        -- Insert new
        INSERT INTO work_identifier (
            work_id,
            identifier_type_id,
            identifier_value,
            identifier_status_id,
            society_id,
            territory_id,
            issued_date,
            validation_status_id,
            is_primary,
            created_by
        ) VALUES (
            p_work_id,
            v_identifier_type_id,
            p_identifier_value,
            (SELECT id FROM resource_db.identifier_status WHERE code = 'ACTIVE'),
            p_society_id,
            p_territory_id,
            CURDATE(),
            (SELECT id FROM resource_db.validation_status WHERE code = 'VALID'),
            p_identifier_type = 'ISWC',
            p_user_id
        );
        
        SET p_identifier_id = LAST_INSERT_ID();
        
        -- Log history
        INSERT INTO work_identifier_history (
            work_identifier_id,
            work_id,
            change_type_id,
            new_identifier_value,
            changed_by_user_id,
            change_source
        ) VALUES (
            p_identifier_id,
            p_work_id,
            (SELECT id FROM resource_db.identifier_change_type WHERE code = 'CREATE'),
            p_identifier_value,
            p_user_id,
            'MANUAL'
        );
    END IF;
    
    -- Log validation
    INSERT INTO identifier_validation_log (
        identifier_table,
        identifier_id,
        identifier_type,
        identifier_value,
        validation_type_id,
        validation_result_id,
        validation_method,
        created_by
    ) VALUES (
        'work_identifier',
        p_identifier_id,
        p_identifier_type,
        p_identifier_value,
        (SELECT id FROM resource_db.identifier_validation_type WHERE code = 'FORMAT'),
        (SELECT id FROM resource_db.validation_result WHERE code = 'PASS'),
        'fn_validate_' || LOWER(p_identifier_type),
        p_user_id
    );
    
    SET p_validation_result = 'VALID';
    SET p_validation_message = 'Identifier validated and saved successfully';
    
    COMMIT;
END$$

-- Check for identifier conflicts
CREATE PROCEDURE sp_check_identifier_conflicts(
    IN p_identifier_type VARCHAR(50),
    IN p_identifier_value VARCHAR(100)
)
BEGIN
    DECLARE v_conflict_count INT DEFAULT 0;
    
    -- Check works
    IF p_identifier_type IN ('ISWC', 'SOCIETY_WORK_CODE') THEN
        SELECT COUNT(DISTINCT work_id) INTO v_conflict_count
        FROM work_identifier wi
        JOIN resource_db.work_identifier_type wit ON wi.identifier_type_id = wit.id
        WHERE wit.code = p_identifier_type
            AND wi.identifier_value = p_identifier_value
            AND wi.is_active = TRUE;
        
        IF v_conflict_count > 1 THEN
            -- Log conflict
            INSERT INTO identifier_conflict (
                conflict_type_id,
                identifier_type,
                identifier_value,
                entity1_type,
                entity1_id,
                entity2_type,
                entity2_id,
                detection_method,
                conflict_status_id,
                created_by
            )
            SELECT DISTINCT
                (SELECT id FROM resource_db.identifier_conflict_type WHERE code = 'DUPLICATE'),
                p_identifier_type,
                p_identifier_value,
                'work',
                w1.work_id,
                'work',
                w2.work_id,
                'SYSTEM_CHECK',
                (SELECT id FROM resource_db.conflict_status WHERE code = 'UNRESOLVED'),
                1 -- System user
            FROM work_identifier w1
            JOIN work_identifier w2 ON w1.identifier_value = w2.identifier_value
                AND w1.work_id < w2.work_id
            JOIN resource_db.work_identifier_type wit ON w1.identifier_type_id = wit.id
            WHERE wit.code = p_identifier_type
                AND w1.identifier_value = p_identifier_value
                AND w1.is_active = TRUE
                AND w2.is_active = TRUE;
        END IF;
    END IF;
    
    -- Check recordings
    IF p_identifier_type IN ('ISRC', 'CATALOG_NUMBER') THEN
        SELECT COUNT(DISTINCT recording_id) INTO v_conflict_count
        FROM recording_identifier ri
        JOIN resource_db.recording_identifier_type rit ON ri.identifier_type_id = rit.id
        WHERE rit.code = p_identifier_type
            AND ri.identifier_value = p_identifier_value
            AND ri.is_active = TRUE;
        
        IF v_conflict_count > 1 THEN
            -- Similar conflict logging for recordings
            -- ... (abbreviated for space)
        END IF;
    END IF;
    
    SELECT v_conflict_count AS conflicts_found;
END$$

-- Merge duplicate identifiers
CREATE PROCEDURE sp_merge_identifiers(
    IN p_source_table VARCHAR(50),
    IN p_source_id BIGINT UNSIGNED,
    IN p_target_table VARCHAR(50),
    IN p_target_id BIGINT UNSIGNED,
    IN p_merge_reason VARCHAR(50),
    IN p_user_id BIGINT UNSIGNED
)
BEGIN
    DECLARE v_merge_reason_id INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Get merge reason
    SELECT id INTO v_merge_reason_id
    FROM resource_db.merge_reason
    WHERE code = p_merge_reason;
    
    -- Log the merge
    INSERT INTO identifier_merge (
        merge_type_id,
        source_identifier_table,
        source_identifier_id,
        source_identifier_value,
        target_identifier_table,
        target_identifier_id,
        target_identifier_value,
        merge_reason_id,
        created_by
    )
    SELECT
        (SELECT id FROM resource_db.identifier_merge_type WHERE code = 'DUPLICATE_RESOLUTION'),
        p_source_table,
        p_source_id,
        si.identifier_value,
        p_target_table,
        p_target_id,
        ti.identifier_value,
        v_merge_reason_id,
        p_user_id
    FROM (
        SELECT identifier_value 
        FROM work_identifier 
        WHERE id = p_source_id AND p_source_table = 'work_identifier'
        UNION
        SELECT identifier_value 
        FROM recording_identifier 
        WHERE id = p_source_id AND p_source_table = 'recording_identifier'
        -- Add other identifier tables...
    ) si,
    (
        SELECT identifier_value 
        FROM work_identifier 
        WHERE id = p_target_id AND p_target_table = 'work_identifier'
        UNION
        SELECT identifier_value 
        FROM recording_identifier 
        WHERE id = p_target_id AND p_target_table = 'recording_identifier'
        -- Add other identifier tables...
    ) ti;
    
    -- Deactivate source identifier
    CASE p_source_table
        WHEN 'work_identifier' THEN
            UPDATE work_identifier
            SET is_active = FALSE,
                is_deleted = TRUE,
                deleted_at = NOW(),
                deleted_by = p_user_id
            WHERE id = p_source_id;
            
        WHEN 'recording_identifier' THEN
            UPDATE recording_identifier
            SET is_active = FALSE,
                is_deleted = TRUE,
                deleted_at = NOW(),
                deleted_by = p_user_id
            WHERE id = p_source_id;
            
        -- Add other tables...
    END CASE;
    
    COMMIT;
END$$

DELIMITER ;

-- =============================================
-- IDENTIFIER LOOKUP VIEWS
-- =============================================

-- Comprehensive work identifier view
CREATE OR REPLACE VIEW vw_work_identifiers AS
SELECT 
    w.id AS work_id,
    w.title AS work_title,
    wit.code AS identifier_type,
    wit.name AS identifier_type_name,
    wi.identifier_value,
    wi.is_primary,
    s.code AS society_code,
    s.name AS society_name,
    t.code AS territory_code,
    t.name AS territory_name,
    ist.name AS identifier_status,
    vs.name AS validation_status,
    wi.issued_date,
    wi.verified_date,
    wi.verified_by,
    wi.created_at,
    u.username AS created_by_username
FROM work_identifier wi
JOIN work w ON wi.work_id = w.id
JOIN resource_db.work_identifier_type wit ON wi.identifier_type_id = wit.id
JOIN resource_db.identifier_status ist ON wi.identifier_status_id = ist.id
LEFT JOIN resource_db.validation_status vs ON wi.validation_status_id = vs.id
LEFT JOIN resource_db.society s ON wi.society_id = s.id
LEFT JOIN resource_db.territory t ON wi.territory_id = t.id
JOIN user u ON wi.created_by = u.id
WHERE wi.is_active = TRUE
ORDER BY w.id, wi.is_primary DESC, wit.display_order;

-- Recording identifier summary
CREATE OR REPLACE VIEW vw_recording_identifiers AS
SELECT 
    r.id AS recording_id,
    r.title AS recording_title,
    rit.code AS identifier_type,
    rit.name AS identifier_type_name,
    ri.identifier_value,
    ri.is_primary,
    o.name AS issued_by_name,
    t.code AS territory_code,
    ist.name AS identifier_status,
    ri.issued_date,
    ri.verified_date
FROM recording_identifier ri
JOIN recording r ON ri.recording_id = r.id
JOIN resource_db.recording_identifier_type rit ON ri.identifier_type_id = rit.id
JOIN resource_db.identifier_status ist ON ri.identifier_status_id = ist.id
LEFT JOIN organization o ON ri.issued_by_id = o.id
LEFT JOIN resource_db.territory t ON ri.territory_id = t.id
WHERE ri.is_active = TRUE;

-- Person identifier summary (IPI, ISNI)
CREATE OR REPLACE VIEW vw_person_identifiers AS
SELECT 
    p.id AS person_id,
    p.full_name AS person_name,
    pit.code AS identifier_type,
    pit.name AS identifier_type_name,
    pi.identifier_value,
    pi.role_code,
    s.code AS society_code,
    s.name AS society_name,
    ist.name AS identifier_status,
    pi.is_primary,
    pi.issued_date,
    pi.verified_date
FROM person_identifier pi
JOIN person p ON pi.person_id = p.id
JOIN resource_db.person_identifier_type pit ON pi.identifier_type_id = pit.id
JOIN resource_db.identifier_status ist ON pi.identifier_status_id = ist.id
LEFT JOIN resource_db.society s ON pi.society_id = s.id
WHERE pi.is_active = TRUE
    AND p.is_active = TRUE;

-- Identifier conflict dashboard
CREATE OR REPLACE VIEW vw_identifier_conflicts AS
SELECT 
    ic.id AS conflict_id,
    ict.name AS conflict_type,
    ic.identifier_type,
    ic.identifier_value,
    ic.entity1_type,
    ic.entity1_id,
    CASE ic.entity1_type
        WHEN 'work' THEN (SELECT title FROM work WHERE id = ic.entity1_id)
        WHEN 'recording' THEN (SELECT title FROM recording WHERE id = ic.entity1_id)
        WHEN 'person' THEN (SELECT full_name FROM person WHERE id = ic.entity1_id)
        ELSE 'Unknown'
    END AS entity1_name,
    ic.entity2_type,
    ic.entity2_id,
    CASE ic.entity2_type
        WHEN 'work' THEN (SELECT title FROM work WHERE id = ic.entity2_id)
        WHEN 'recording' THEN (SELECT title FROM recording WHERE id = ic.entity2_id)
        WHEN 'person' THEN (SELECT full_name FROM person WHERE id = ic.entity2_id)
        ELSE 'Unknown'
    END AS entity2_name,
    cs.name AS conflict_status,
    ic.detection_date,
    ic.resolution_date,
    rm.name AS resolution_method,
    u.username AS resolved_by_username
FROM identifier_conflict ic
JOIN resource_db.identifier_conflict_type ict ON ic.conflict_type_id = ict.id
JOIN resource_db.conflict_status cs ON ic.conflict_status_id = cs.id
LEFT JOIN resource_db.resolution_method rm ON ic.resolution_method_id = rm.id
LEFT JOIN user u ON ic.resolved_by = u.id
WHERE ic.detection_date >= DATE_SUB(NOW(), INTERVAL 90 DAY)
ORDER BY ic.detection_date DESC;

-- Identifier validation history
CREATE OR REPLACE VIEW vw_identifier_validation_history AS
SELECT 
    ivl.id,
    ivl.identifier_table,
    ivl.identifier_type,
    ivl.identifier_value,
    ivt.name AS validation_type,
    vr.name AS validation_result,
    ivl.validation_method,
    ivl.validation_service,
    ivl.error_code,
    ivl.error_message,
    ivl.suggested_value,
    ivl.confidence_score,
    ivl.created_at,
    u.username AS validated_by
FROM identifier_validation_log ivl
JOIN resource_db.identifier_validation_type ivt ON ivl.validation_type_id = ivt.id
JOIN resource_db.validation_result vr ON ivl.validation_result_id = vr.id
JOIN user u ON ivl.created_by = u.id
ORDER BY ivl.created_at DESC;

-- Society work identifier mapping
CREATE OR REPLACE VIEW vw_society_work_mappings AS
SELECT 
    w.id AS work_id,
    w.title AS work_title,
    w.iswc,
    s.code AS society_code,
    s.name AS society_name,
    swi.society_work_code,
    rs.name AS registration_status,
    swi.registration_date,
    swi.acknowledgment_date,
    swi.share_percentage,
    swi.is_origin_society,
    t.code AS territory_code,
    t.name AS territory_name
FROM society_work_id swi
JOIN work w ON swi.work_id = w.id
JOIN resource_db.society s ON swi.society_id = s.id
JOIN resource_db.registration_status rs ON swi.registration_status_id = rs.id
LEFT JOIN resource_db.territory t ON swi.territory_id = t.id
WHERE swi.is_active = TRUE
    AND w.is_active = TRUE
ORDER BY w.id, swi.is_origin_society DESC, s.code;

-- Platform-specific identifier mapping
CREATE OR REPLACE VIEW vw_platform_identifiers AS
SELECT 
    pi.entity_type,
    pi.entity_id,
    CASE pi.entity_type
        WHEN 'work' THEN (SELECT title FROM work WHERE id = pi.entity_id)
        WHEN 'recording' THEN (SELECT title FROM recording WHERE id = pi.entity_id)
        WHEN 'release' THEN (SELECT title FROM release WHERE id = pi.entity_id)
        WHEN 'artist' THEN (SELECT name FROM artist WHERE id = pi.entity_id)
        ELSE 'Unknown'
    END AS entity_name,
    p.code AS platform_code,
    p.name AS platform_name,
    pi.platform_identifier,
    pi.identifier_type,
    t.code AS territory_code,
    pi.is_verified,
    pi.last_verified,
    pi.created_at
FROM proprietary_id pi
JOIN resource_db.platform p ON pi.platform_id = p.id
LEFT JOIN resource_db.territory t ON pi.territory_id = t.id
WHERE pi.is_active = TRUE
ORDER BY pi.entity_type, pi.entity_id, p.display_order;

-- =============================================
-- IDENTIFIER ANALYTICS PROCEDURES
-- =============================================

DELIMITER $$

-- Generate identifier coverage report
CREATE PROCEDURE sp_identifier_coverage_report(
    IN p_entity_type VARCHAR(50)
)
BEGIN
    IF p_entity_type = 'work' THEN
        SELECT 
            COUNT(DISTINCT w.id) AS total_works,
            COUNT(DISTINCT wi_iswc.work_id) AS works_with_iswc,
            ROUND(COUNT(DISTINCT wi_iswc.work_id) * 100.0 / COUNT(DISTINCT w.id), 2) AS iswc_coverage_percent,
            COUNT(DISTINCT swi.work_id) AS works_with_society_ids,
            ROUND(COUNT(DISTINCT swi.work_id) * 100.0 / COUNT(DISTINCT w.id), 2) AS society_id_coverage_percent
        FROM work w
        LEFT JOIN work_identifier wi_iswc ON w.id = wi_iswc.work_id 
            AND wi_iswc.identifier_type_id = (
                SELECT id FROM resource_db.work_identifier_type WHERE code = 'ISWC'
            )
            AND wi_iswc.is_active = TRUE
        LEFT JOIN society_work_id swi ON w.id = swi.work_id 
            AND swi.is_active = TRUE
        WHERE w.is_active = TRUE;
        
    ELSEIF p_entity_type = 'recording' THEN
        SELECT 
            COUNT(DISTINCT r.id) AS total_recordings,
            COUNT(DISTINCT ri_isrc.recording_id) AS recordings_with_isrc,
            ROUND(COUNT(DISTINCT ri_isrc.recording_id) * 100.0 / COUNT(DISTINCT r.id), 2) AS isrc_coverage_percent,
            COUNT(DISTINCT ri_cat.recording_id) AS recordings_with_catalog,
            ROUND(COUNT(DISTINCT ri_cat.recording_id) * 100.0 / COUNT(DISTINCT r.id), 2) AS catalog_coverage_percent
        FROM recording r
        LEFT JOIN recording_identifier ri_isrc ON r.id = ri_isrc.recording_id 
            AND ri_isrc.identifier_type_id = (
                SELECT id FROM resource_db.recording_identifier_type WHERE code = 'ISRC'
            )
            AND ri_isrc.is_active = TRUE
        LEFT JOIN recording_identifier ri_cat ON r.id = ri_cat.recording_id 
            AND ri_cat.identifier_type_id = (
                SELECT id FROM resource_db.recording_identifier_type WHERE code = 'CATALOG_NUMBER'
            )
            AND ri_cat.is_active = TRUE
        WHERE r.is_active = TRUE;
    END IF;
END$$

DELIMITER ;

-- =============================================
-- IDENTIFIER MAINTENANCE
-- =============================================

DELIMITER $$

-- Clean up duplicate identifiers
CREATE PROCEDURE sp_cleanup_duplicate_identifiers()
BEGIN
    DECLARE v_cleaned_count INT DEFAULT 0;
    
    -- Deactivate duplicate ISWCs (keep oldest)
    UPDATE work_identifier wi1
    JOIN (
        SELECT 
            identifier_value,
            MIN(id) AS keep_id
        FROM work_identifier
        WHERE identifier_type_id = (
            SELECT id FROM resource_db.work_identifier_type WHERE code = 'ISWC'
        )
        AND is_active = TRUE
        GROUP BY identifier_value
        HAVING COUNT(*) > 1
    ) dups ON wi1.identifier_value = dups.identifier_value
    SET wi1.is_active = FALSE,
        wi1.is_deleted = TRUE,
        wi1.deleted_at = NOW(),
        wi1.deleted_by = 1, -- System user
        wi1.archive_reason = 'Duplicate ISWC cleanup'
    WHERE wi1.id != dups.keep_id
        AND wi1.identifier_type_id = (
            SELECT id FROM resource_db.work_identifier_type WHERE code = 'ISWC'
        );
    
    SET v_cleaned_count = v_cleaned_count + ROW_COUNT();
    
    -- Similar cleanup for ISRCs
    -- ... (abbreviated for space)
    
    SELECT v_cleaned_count AS identifiers_cleaned;
END$$

DELIMITER ;

-- =============================================
-- SECTION 4: OWNERSHIP & SHARE
-- =============================================

-- =============================================
-- MASTER RECORDING OWNERSHIP
-- =============================================

-- master_ownership - Current recording ownership
CREATE TABLE master_ownership (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    recording_id BIGINT UNSIGNED NOT NULL,
    owner_type VARCHAR(50) NOT NULL COMMENT 'person, organization, label, artist',
    owner_id BIGINT UNSIGNED NOT NULL,
    ownership_type_id INT NOT NULL COMMENT 'FK to resource_db.master_ownership_type',
    share_percentage DECIMAL(7,4) NOT NULL COMMENT 'Supports up to 99.9999%',
    territory_id INT NULL COMMENT 'FK to resource_db.territory - NULL means worldwide',
    start_date DATE NOT NULL,
    end_date DATE NULL,
    acquisition_type_id INT NOT NULL COMMENT 'FK to resource_db.acquisition_type',
    acquisition_date DATE NOT NULL,
    acquisition_price DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    contract_id BIGINT UNSIGNED NULL,
    
    -- Rights details
    exploitation_rights JSON NULL COMMENT 'Specific rights owned',
    excluded_rights JSON NULL COMMENT 'Rights specifically excluded',
    reversion_date DATE NULL,
    reversion_conditions TEXT NULL,
    
    -- Validation
    is_verified BOOLEAN DEFAULT FALSE,
    verified_date DATETIME NULL,
    verified_by BIGINT UNSIGNED NULL,
    validation_notes TEXT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_master_ownership_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_master_ownership_type FOREIGN KEY (ownership_type_id) REFERENCES resource_db.master_ownership_type(id),
    CONSTRAINT fk_master_ownership_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_master_ownership_acquisition FOREIGN KEY (acquisition_type_id) REFERENCES resource_db.acquisition_type(id),
    CONSTRAINT fk_master_ownership_contract FOREIGN KEY (contract_id) REFERENCES agreement(id),
    CONSTRAINT fk_master_ownership_verified_by FOREIGN KEY (verified_by) REFERENCES user(id),
    CONSTRAINT fk_master_ownership_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_master_ownership_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_master_ownership_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_master_ownership_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_master_share_percentage CHECK (share_percentage >= 0 AND share_percentage <= 100),
    CONSTRAINT chk_master_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_master_recording (recording_id),
    INDEX idx_master_owner (owner_type, owner_id),
    INDEX idx_master_territory (territory_id),
    INDEX idx_master_dates (start_date, end_date),
    INDEX idx_master_share (share_percentage),
    INDEX idx_master_verified (is_verified),
    INDEX idx_master_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- master_ownership_history - Track all ownership changes
CREATE TABLE master_ownership_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    master_ownership_id BIGINT UNSIGNED NOT NULL,
    recording_id BIGINT UNSIGNED NOT NULL,
    change_type_id INT NOT NULL COMMENT 'FK to resource_db.ownership_change_type',
    
    -- Old values
    old_owner_type VARCHAR(50) NULL,
    old_owner_id BIGINT UNSIGNED NULL,
    old_share_percentage DECIMAL(7,4) NULL,
    old_territory_id INT NULL,
    old_start_date DATE NULL,
    old_end_date DATE NULL,
    
    -- New values
    new_owner_type VARCHAR(50) NULL,
    new_owner_id BIGINT UNSIGNED NULL,
    new_share_percentage DECIMAL(7,4) NULL,
    new_territory_id INT NULL,
    new_start_date DATE NULL,
    new_end_date DATE NULL,
    
    -- Change details
    change_reason TEXT NULL,
    change_document_id BIGINT UNSIGNED NULL,
    effective_date DATE NOT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_master_history_ownership FOREIGN KEY (master_ownership_id) REFERENCES master_ownership(id),
    CONSTRAINT fk_master_history_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_master_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.ownership_change_type(id),
    CONSTRAINT fk_master_history_document FOREIGN KEY (change_document_id) REFERENCES file(id),
    CONSTRAINT fk_master_history_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_master_history_ownership (master_ownership_id),
    INDEX idx_master_history_recording (recording_id),
    INDEX idx_master_history_date (effective_date),
    INDEX idx_master_history_created (created_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- master_ownership_snapshot - Point-in-time ownership records
CREATE TABLE master_ownership_snapshot (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    snapshot_date DATE NOT NULL,
    recording_id BIGINT UNSIGNED NOT NULL,
    owner_type VARCHAR(50) NOT NULL,
    owner_id BIGINT UNSIGNED NOT NULL,
    ownership_type_id INT NOT NULL,
    share_percentage DECIMAL(7,4) NOT NULL,
    territory_id INT NULL,
    total_territory_percentage DECIMAL(7,4) NOT NULL COMMENT 'Total % for this territory',
    is_complete BOOLEAN DEFAULT FALSE COMMENT 'Does ownership total 100%?',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_master_snapshot_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_master_snapshot_type FOREIGN KEY (ownership_type_id) REFERENCES resource_db.master_ownership_type(id),
    CONSTRAINT fk_master_snapshot_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_master_snapshot_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_master_snapshot (snapshot_date, recording_id, owner_type, owner_id, territory_id),
    INDEX idx_master_snapshot_date (snapshot_date),
    INDEX idx_master_snapshot_recording (recording_id),
    INDEX idx_master_snapshot_complete (is_complete),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- PUBLISHING OWNERSHIP
-- =============================================

-- publishing_share - Current publishing ownership
CREATE TABLE publishing_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    work_id BIGINT UNSIGNED NOT NULL,
    publisher_id BIGINT UNSIGNED NOT NULL,
    share_type_id INT NOT NULL COMMENT 'FK to resource_db.publishing_share_type',
    share_percentage DECIMAL(7,4) NOT NULL,
    territory_id INT NULL COMMENT 'NULL means worldwide',
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- Rights details
    administration_rights BOOLEAN DEFAULT TRUE,
    collection_rights BOOLEAN DEFAULT TRUE,
    synchronization_rights BOOLEAN DEFAULT TRUE,
    mechanical_rights BOOLEAN DEFAULT TRUE,
    performance_rights BOOLEAN DEFAULT TRUE,
    print_rights BOOLEAN DEFAULT FALSE,
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    advance_amount DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    is_recouped BOOLEAN DEFAULT FALSE,
    recoup_date DATE NULL,
    
    -- Validation
    is_verified BOOLEAN DEFAULT FALSE,
    verified_date DATETIME NULL,
    verified_by BIGINT UNSIGNED NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_publishing_share_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_publishing_share_publisher FOREIGN KEY (publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_publishing_share_type FOREIGN KEY (share_type_id) REFERENCES resource_db.publishing_share_type(id),
    CONSTRAINT fk_publishing_share_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_publishing_share_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_publishing_share_verified_by FOREIGN KEY (verified_by) REFERENCES user(id),
    CONSTRAINT fk_publishing_share_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_publishing_share_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_publishing_share_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_publishing_share_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_publishing_percentage CHECK (share_percentage >= 0 AND share_percentage <= 100),
    CONSTRAINT chk_publishing_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_publishing_work (work_id),
    INDEX idx_publishing_publisher (publisher_id),
    INDEX idx_publishing_territory (territory_id),
    INDEX idx_publishing_dates (start_date, end_date),
    INDEX idx_publishing_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- publishing_share_history - Publishing ownership changes
CREATE TABLE publishing_share_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    publishing_share_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    change_type_id INT NOT NULL COMMENT 'FK to resource_db.ownership_change_type',
    
    -- Old values
    old_publisher_id BIGINT UNSIGNED NULL,
    old_share_percentage DECIMAL(7,4) NULL,
    old_territory_id INT NULL,
    old_start_date DATE NULL,
    old_end_date DATE NULL,
    
    -- New values
    new_publisher_id BIGINT UNSIGNED NULL,
    new_share_percentage DECIMAL(7,4) NULL,
    new_territory_id INT NULL,
    new_start_date DATE NULL,
    new_end_date DATE NULL,
    
    -- Change details
    change_reason TEXT NULL,
    change_document_id BIGINT UNSIGNED NULL,
    effective_date DATE NOT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_publishing_history_share FOREIGN KEY (publishing_share_id) REFERENCES publishing_share(id),
    CONSTRAINT fk_publishing_history_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_publishing_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.ownership_change_type(id),
    CONSTRAINT fk_publishing_history_document FOREIGN KEY (change_document_id) REFERENCES file(id),
    CONSTRAINT fk_publishing_history_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_publishing_history_share (publishing_share_id),
    INDEX idx_publishing_history_work (work_id),
    INDEX idx_publishing_history_date (effective_date),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- publishing_share_snapshot - Point-in-time publishing
CREATE TABLE publishing_share_snapshot (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    snapshot_date DATE NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    publisher_id BIGINT UNSIGNED NOT NULL,
    share_type_id INT NOT NULL,
    share_percentage DECIMAL(7,4) NOT NULL,
    territory_id INT NULL,
    total_territory_percentage DECIMAL(7,4) NOT NULL,
    is_complete BOOLEAN DEFAULT FALSE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_publishing_snapshot_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_publishing_snapshot_publisher FOREIGN KEY (publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_publishing_snapshot_type FOREIGN KEY (share_type_id) REFERENCES resource_db.publishing_share_type(id),
    CONSTRAINT fk_publishing_snapshot_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_publishing_snapshot_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_publishing_snapshot (snapshot_date, work_id, publisher_id, territory_id),
    INDEX idx_publishing_snapshot_date (snapshot_date),
    INDEX idx_publishing_snapshot_work (work_id),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- WRITER SHARES
-- =============================================

-- writer_share - Current writer shares
CREATE TABLE writer_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    work_id BIGINT UNSIGNED NOT NULL,
    writer_id BIGINT UNSIGNED NOT NULL,
    share_percentage DECIMAL(7,4) NOT NULL,
    role_id INT NOT NULL COMMENT 'FK to resource_db.writer_role',
    territory_id INT NULL COMMENT 'NULL means worldwide',
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- Rights details
    is_controlled BOOLEAN DEFAULT FALSE,
    publisher_id BIGINT UNSIGNED NULL COMMENT 'Controlling publisher',
    collection_share DECIMAL(7,4) NULL COMMENT 'Writer collection %',
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    pro_affiliation_id INT NULL COMMENT 'FK to resource_db.society',
    ipi_name_number VARCHAR(11) NULL,
    
    -- Validation
    is_verified BOOLEAN DEFAULT FALSE,
    verified_date DATETIME NULL,
    verified_by BIGINT UNSIGNED NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_writer_share_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_writer_share_writer FOREIGN KEY (writer_id) REFERENCES writer(id),
    CONSTRAINT fk_writer_share_role FOREIGN KEY (role_id) REFERENCES resource_db.writer_role(id),
    CONSTRAINT fk_writer_share_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_writer_share_publisher FOREIGN KEY (publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_writer_share_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_writer_share_pro FOREIGN KEY (pro_affiliation_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_writer_share_verified_by FOREIGN KEY (verified_by) REFERENCES user(id),
    CONSTRAINT fk_writer_share_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_writer_share_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_writer_share_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_writer_share_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_writer_percentage CHECK (share_percentage >= 0 AND share_percentage <= 100),
    CONSTRAINT chk_writer_collection CHECK (collection_share IS NULL OR (collection_share >= 0 AND collection_share <= share_percentage)),
    CONSTRAINT chk_writer_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_writer_share_work (work_id),
    INDEX idx_writer_share_writer (writer_id),
    INDEX idx_writer_share_territory (territory_id),
    INDEX idx_writer_share_publisher (publisher_id),
    INDEX idx_writer_share_dates (start_date, end_date),
    INDEX idx_writer_share_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- writer_share_history - Writer share changes
CREATE TABLE writer_share_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    writer_share_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    change_type_id INT NOT NULL COMMENT 'FK to resource_db.ownership_change_type',
    
    -- Old values
    old_writer_id BIGINT UNSIGNED NULL,
    old_share_percentage DECIMAL(7,4) NULL,
    old_role_id INT NULL,
    old_territory_id INT NULL,
    
    -- New values
    new_writer_id BIGINT UNSIGNED NULL,
    new_share_percentage DECIMAL(7,4) NULL,
    new_role_id INT NULL,
    new_territory_id INT NULL,
    
    -- Change details
    change_reason TEXT NULL,
    effective_date DATE NOT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_writer_history_share FOREIGN KEY (writer_share_id) REFERENCES writer_share(id),
    CONSTRAINT fk_writer_history_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_writer_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.ownership_change_type(id),
    CONSTRAINT fk_writer_history_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_writer_history_share (writer_share_id),
    INDEX idx_writer_history_work (work_id),
    INDEX idx_writer_history_date (effective_date),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- PUBLISHER SHARES
-- =============================================

-- publisher_share - Publisher shares in works
CREATE TABLE publisher_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    work_id BIGINT UNSIGNED NOT NULL,
    publisher_id BIGINT UNSIGNED NOT NULL,
    writer_id BIGINT UNSIGNED NULL COMMENT 'Linked writer if applicable',
    share_percentage DECIMAL(7,4) NOT NULL,
    share_type_id INT NOT NULL COMMENT 'FK to resource_db.publisher_share_type',
    territory_id INT NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- Rights details
    is_original_publisher BOOLEAN DEFAULT FALSE,
    is_administrator BOOLEAN DEFAULT FALSE,
    administration_percentage DECIMAL(7,4) NULL,
    collection_source_id INT NULL COMMENT 'FK to resource_db.collection_source',
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    mro_affiliation_id INT NULL COMMENT 'FK to resource_db.society',
    ipi_name_number VARCHAR(11) NULL,
    
    -- Validation
    is_verified BOOLEAN DEFAULT FALSE,
    verified_date DATETIME NULL,
    verified_by BIGINT UNSIGNED NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_publisher_share_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_publisher_share_publisher FOREIGN KEY (publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_publisher_share_writer FOREIGN KEY (writer_id) REFERENCES writer(id),
    CONSTRAINT fk_publisher_share_type FOREIGN KEY (share_type_id) REFERENCES resource_db.publisher_share_type(id),
    CONSTRAINT fk_publisher_share_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_publisher_share_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_publisher_share_mro FOREIGN KEY (mro_affiliation_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_publisher_share_collection FOREIGN KEY (collection_source_id) REFERENCES resource_db.collection_source(id),
    CONSTRAINT fk_publisher_share_verified_by FOREIGN KEY (verified_by) REFERENCES user(id),
    CONSTRAINT fk_publisher_share_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_publisher_share_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_publisher_share_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_publisher_share_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_publisher_percentage CHECK (share_percentage >= 0 AND share_percentage <= 100),
    CONSTRAINT chk_publisher_admin CHECK (administration_percentage IS NULL OR (administration_percentage >= 0 AND administration_percentage <= 100)),
    CONSTRAINT chk_publisher_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_publisher_share_work (work_id),
    INDEX idx_publisher_share_publisher (publisher_id),
    INDEX idx_publisher_share_writer (writer_id),
    INDEX idx_publisher_share_territory (territory_id),
    INDEX idx_publisher_share_dates (start_date, end_date),
    INDEX idx_publisher_share_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- publisher_share_history - Publisher share changes
CREATE TABLE publisher_share_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    publisher_share_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    change_type_id INT NOT NULL COMMENT 'FK to resource_db.ownership_change_type',
    
    -- Old values
    old_publisher_id BIGINT UNSIGNED NULL,
    old_share_percentage DECIMAL(7,4) NULL,
    old_territory_id INT NULL,
    
    -- New values
    new_publisher_id BIGINT UNSIGNED NULL,
    new_share_percentage DECIMAL(7,4) NULL,
    new_territory_id INT NULL,
    
    -- Change details
    change_reason TEXT NULL,
    effective_date DATE NOT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_publisher_history_share FOREIGN KEY (publisher_share_id) REFERENCES publisher_share(id),
    CONSTRAINT fk_publisher_history_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_publisher_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.ownership_change_type(id),
    CONSTRAINT fk_publisher_history_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_publisher_history_share (publisher_share_id),
    INDEX idx_publisher_history_work (work_id),
    INDEX idx_publisher_history_date (effective_date),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- WORK SPLITS (Traditional tables for backwards compatibility)
-- =============================================

-- work_writer - Writer shares in works
CREATE TABLE work_writer (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    work_id BIGINT UNSIGNED NOT NULL,
    writer_id BIGINT UNSIGNED NOT NULL,
    share_percentage DECIMAL(7,4) NOT NULL,
    role_id INT NOT NULL COMMENT 'FK to resource_db.writer_role',
    is_controlled BOOLEAN DEFAULT FALSE,
    publisher_id BIGINT UNSIGNED NULL,
    pro_affiliation_id INT NULL COMMENT 'FK to resource_db.society',
    territory_id INT NULL,
    sequence_number INT DEFAULT 0,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_work_writer_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_work_writer_writer FOREIGN KEY (writer_id) REFERENCES writer(id),
    CONSTRAINT fk_work_writer_role FOREIGN KEY (role_id) REFERENCES resource_db.writer_role(id),
    CONSTRAINT fk_work_writer_publisher FOREIGN KEY (publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_work_writer_pro FOREIGN KEY (pro_affiliation_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_work_writer_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_work_writer_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_work_writer_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_work_writer_percentage CHECK (share_percentage >= 0 AND share_percentage <= 100),
    
    -- Indexes
    UNIQUE KEY uk_work_writer (work_id, writer_id, territory_id),
    INDEX idx_work_writer_work (work_id),
    INDEX idx_work_writer_writer (writer_id),
    INDEX idx_work_writer_publisher (publisher_id),
    INDEX idx_work_writer_territory (territory_id),
    INDEX idx_work_writer_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- work_publisher - Publisher shares in works
CREATE TABLE work_publisher (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    work_id BIGINT UNSIGNED NOT NULL,
    publisher_id BIGINT UNSIGNED NOT NULL,
    writer_id BIGINT UNSIGNED NULL COMMENT 'Linked writer',
    share_percentage DECIMAL(7,4) NOT NULL,
    role_id INT NOT NULL COMMENT 'FK to resource_db.publisher_role',
    is_original BOOLEAN DEFAULT FALSE,
    is_administrator BOOLEAN DEFAULT FALSE,
    mro_affiliation_id INT NULL COMMENT 'FK to resource_db.society',
    territory_id INT NULL,
    sequence_number INT DEFAULT 0,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_work_publisher_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_work_publisher_publisher FOREIGN KEY (publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_work_publisher_writer FOREIGN KEY (writer_id) REFERENCES writer(id),
    CONSTRAINT fk_work_publisher_role FOREIGN KEY (role_id) REFERENCES resource_db.publisher_role(id),
    CONSTRAINT fk_work_publisher_mro FOREIGN KEY (mro_affiliation_id) REFERENCES resource_db.society(id),
    CONSTRAINT fk_work_publisher_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_work_publisher_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_work_publisher_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_work_publisher_percentage CHECK (share_percentage >= 0 AND share_percentage <= 100),
    
    -- Indexes
    UNIQUE KEY uk_work_publisher (work_id, publisher_id, territory_id),
    INDEX idx_work_publisher_work (work_id),
    INDEX idx_work_publisher_publisher (publisher_id),
    INDEX idx_work_publisher_writer (writer_id),
    INDEX idx_work_publisher_territory (territory_id),
    INDEX idx_work_publisher_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- ARTIST & PRODUCER ROYALTIES
-- =============================================

-- artist_royalty_share - Artist royalty rates
CREATE TABLE artist_royalty_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    artist_id BIGINT UNSIGNED NOT NULL,
    recording_id BIGINT UNSIGNED NULL,
    release_id BIGINT UNSIGNED NULL,
    royalty_type_id INT NOT NULL COMMENT 'FK to resource_db.artist_royalty_type',
    rate_type_id INT NOT NULL COMMENT 'FK to resource_db.rate_type',
    rate_value DECIMAL(7,4) NOT NULL COMMENT 'Percentage or fixed amount',
    currency_id CHAR(3) NULL COMMENT 'For fixed amounts',
    territory_id INT NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    advance_amount DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    recoupable_amount DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    recouped_amount DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    is_recouped BOOLEAN DEFAULT FALSE,
    
    -- Thresholds
    escalation_thresholds JSON NULL COMMENT 'Sales thresholds for rate changes',
    minimum_guarantee DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_artist_royalty_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_artist_royalty_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_artist_royalty_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_artist_royalty_type FOREIGN KEY (royalty_type_id) REFERENCES resource_db.artist_royalty_type(id),
    CONSTRAINT fk_artist_royalty_rate_type FOREIGN KEY (rate_type_id) REFERENCES resource_db.rate_type(id),
    CONSTRAINT fk_artist_royalty_currency FOREIGN KEY (currency_id) REFERENCES resource_db.currency(id),
    CONSTRAINT fk_artist_royalty_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_artist_royalty_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_artist_royalty_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_artist_royalty_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_artist_royalty_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_artist_royalty_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_artist_royalty_value CHECK (rate_value >= 0),
    CONSTRAINT chk_artist_royalty_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_artist_royalty_artist (artist_id),
    INDEX idx_artist_royalty_recording (recording_id),
    INDEX idx_artist_royalty_release (release_id),
    INDEX idx_artist_royalty_territory (territory_id),
    INDEX idx_artist_royalty_dates (start_date, end_date),
    INDEX idx_artist_royalty_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- producer_share - Producer points and royalties
CREATE TABLE producer_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    producer_id BIGINT UNSIGNED NOT NULL,
    recording_id BIGINT UNSIGNED NULL,
    release_id BIGINT UNSIGNED NULL,
    share_type_id INT NOT NULL COMMENT 'FK to resource_db.producer_share_type',
    points_percentage DECIMAL(7,4) NULL COMMENT 'Producer points',
    royalty_percentage DECIMAL(7,4) NULL COMMENT 'Royalty rate',
    advance_amount DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    is_all_in BOOLEAN DEFAULT FALSE COMMENT 'All-in deal?',
    territory_id INT NULL,
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    recoupable_costs DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    recouped_amount DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    is_recouped BOOLEAN DEFAULT FALSE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_producer_share_producer FOREIGN KEY (producer_id) REFERENCES person(id),
    CONSTRAINT fk_producer_share_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_producer_share_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_producer_share_type FOREIGN KEY (share_type_id) REFERENCES resource_db.producer_share_type(id),
    CONSTRAINT fk_producer_share_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_producer_share_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_producer_share_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_producer_share_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_producer_share_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_producer_share_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_producer_points CHECK (points_percentage IS NULL OR (points_percentage >= 0 AND points_percentage <= 100)),
    CONSTRAINT chk_producer_royalty CHECK (royalty_percentage IS NULL OR (royalty_percentage >= 0 AND royalty_percentage <= 100)),
    
    -- Indexes
    INDEX idx_producer_share_producer (producer_id),
    INDEX idx_producer_share_recording (recording_id),
    INDEX idx_producer_share_release (release_id),
    INDEX idx_producer_share_territory (territory_id),
    INDEX idx_producer_share_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- LABEL & DISTRIBUTION SHARES
-- =============================================

-- label_share - Label ownership and royalty shares
CREATE TABLE label_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    label_id BIGINT UNSIGNED NOT NULL,
    recording_id BIGINT UNSIGNED NULL,
    release_id BIGINT UNSIGNED NULL,
    share_type_id INT NOT NULL COMMENT 'FK to resource_db.label_share_type',
    ownership_percentage DECIMAL(7,4) NULL,
    distribution_percentage DECIMAL(7,4) NULL,
    territory_id INT NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- P&D Deal details
    is_pd_deal BOOLEAN DEFAULT FALSE,
    distribution_fee DECIMAL(7,4) NULL,
    manufacturing_fee DECIMAL(7,4) NULL,
    marketing_commitment DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_label_share_label FOREIGN KEY (label_id) REFERENCES label(id),
    CONSTRAINT fk_label_share_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_label_share_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_label_share_type FOREIGN KEY (share_type_id) REFERENCES resource_db.label_share_type(id),
    CONSTRAINT fk_label_share_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_label_share_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_label_share_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_label_share_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_label_share_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_label_share_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_label_ownership CHECK (ownership_percentage IS NULL OR (ownership_percentage >= 0 AND ownership_percentage <= 100)),
    CONSTRAINT chk_label_distribution CHECK (distribution_percentage IS NULL OR (distribution_percentage >= 0 AND distribution_percentage <= 100)),
    CONSTRAINT chk_label_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_label_share_label (label_id),
    INDEX idx_label_share_recording (recording_id),
    INDEX idx_label_share_release (release_id),
    INDEX idx_label_share_territory (territory_id),
    INDEX idx_label_share_dates (start_date, end_date),
    INDEX idx_label_share_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- distributor_share - Distribution fees and terms
CREATE TABLE distributor_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    distributor_id BIGINT UNSIGNED NOT NULL,
    release_id BIGINT UNSIGNED NULL,
    catalog_id BIGINT UNSIGNED NULL,
    fee_type_id INT NOT NULL COMMENT 'FK to resource_db.distributor_fee_type',
    fee_percentage DECIMAL(7,4) NULL,
    flat_fee DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    currency_id CHAR(3) NULL,
    territory_id INT NULL,
    channel_id INT NULL COMMENT 'FK to resource_db.distribution_channel',
    
    -- Tier structure
    tier_thresholds JSON NULL COMMENT 'Volume-based fee tiers',
    current_tier INT DEFAULT 1,
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_distributor_share_distributor FOREIGN KEY (distributor_id) REFERENCES organization(id),
    CONSTRAINT fk_distributor_share_release FOREIGN KEY (release_id) REFERENCES release(id),
    CONSTRAINT fk_distributor_share_fee_type FOREIGN KEY (fee_type_id) REFERENCES resource_db.distributor_fee_type(id),
    CONSTRAINT fk_distributor_share_currency FOREIGN KEY (currency_id) REFERENCES resource_db.currency(id),
    CONSTRAINT fk_distributor_share_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_distributor_share_channel FOREIGN KEY (channel_id) REFERENCES resource_db.distribution_channel(id),
    CONSTRAINT fk_distributor_share_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_distributor_share_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_distributor_share_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_distributor_share_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_distributor_share_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_distributor_fee CHECK (fee_percentage IS NULL OR (fee_percentage >= 0 AND fee_percentage <= 100)),
    CONSTRAINT chk_distributor_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_distributor_share_distributor (distributor_id),
    INDEX idx_distributor_share_release (release_id),
    INDEX idx_distributor_share_territory (territory_id),
    INDEX idx_distributor_share_dates (start_date, end_date),
    INDEX idx_distributor_share_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- ADMINISTRATION & SUB-PUBLISHING
-- =============================================

-- administrator_share - Publishing administration fees
CREATE TABLE administrator_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    administrator_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NULL,
    catalog_id BIGINT UNSIGNED NULL,
    writer_id BIGINT UNSIGNED NULL,
    publisher_id BIGINT UNSIGNED NULL,
    administration_percentage DECIMAL(7,4) NOT NULL,
    collection_percentage DECIMAL(7,4) NULL,
    territory_id INT NULL,
    
    -- Rights administered
    performance_rights BOOLEAN DEFAULT TRUE,
    mechanical_rights BOOLEAN DEFAULT TRUE,
    synchronization_rights BOOLEAN DEFAULT TRUE,
    print_rights BOOLEAN DEFAULT FALSE,
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    retention_period_months INT NULL COMMENT 'Post-term retention',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_administrator_share_admin FOREIGN KEY (administrator_id) REFERENCES publisher(id),
    CONSTRAINT fk_administrator_share_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_administrator_share_writer FOREIGN KEY (writer_id) REFERENCES writer(id),
    CONSTRAINT fk_administrator_share_publisher FOREIGN KEY (publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_administrator_share_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_administrator_share_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_administrator_share_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_administrator_share_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_administrator_share_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_administrator_share_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_admin_percentage CHECK (administration_percentage >= 0 AND administration_percentage <= 100),
    CONSTRAINT chk_admin_collection CHECK (collection_percentage IS NULL OR (collection_percentage >= 0 AND collection_percentage <= 100)),
    CONSTRAINT chk_admin_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_administrator_share_admin (administrator_id),
    INDEX idx_administrator_share_work (work_id),
    INDEX idx_administrator_share_territory (territory_id),
    INDEX idx_administrator_share_dates (start_date, end_date),
    INDEX idx_administrator_share_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- sub_publisher_share - Sub-publishing agreements
CREATE TABLE sub_publisher_share (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    original_publisher_id BIGINT UNSIGNED NOT NULL,
    sub_publisher_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NULL,
    catalog_id BIGINT UNSIGNED NULL,
    share_percentage DECIMAL(7,4) NOT NULL,
    collection_percentage DECIMAL(7,4) NULL COMMENT 'At source collection',
    territory_id INT NOT NULL COMMENT 'Sub-pub territory',
    
    -- Rights granted
    performance_rights BOOLEAN DEFAULT TRUE,
    mechanical_rights BOOLEAN DEFAULT TRUE,
    synchronization_rights BOOLEAN DEFAULT TRUE,
    print_rights BOOLEAN DEFAULT FALSE,
    cover_rights BOOLEAN DEFAULT TRUE,
    
    -- Performance requirements
    minimum_activity_requirement TEXT NULL,
    advance_amount DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    minimum_guarantee DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    
    -- Agreement details
    agreement_id BIGINT UNSIGNED NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_sub_publisher_original FOREIGN KEY (original_publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_sub_publisher_sub FOREIGN KEY (sub_publisher_id) REFERENCES publisher(id),
    CONSTRAINT fk_sub_publisher_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_sub_publisher_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_sub_publisher_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_sub_publisher_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_sub_publisher_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_sub_publisher_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_sub_publisher_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_sub_pub_share CHECK (share_percentage >= 0 AND share_percentage <= 100),
    CONSTRAINT chk_sub_pub_collection CHECK (collection_percentage IS NULL OR (collection_percentage >= 0 AND collection_percentage <= 100)),
    CONSTRAINT chk_sub_pub_dates CHECK (end_date IS NULL OR end_date >= start_date),
    
    -- Indexes
    INDEX idx_sub_publisher_original (original_publisher_id),
    INDEX idx_sub_publisher_sub (sub_publisher_id),
    INDEX idx_sub_publisher_work (work_id),
    INDEX idx_sub_publisher_territory (territory_id),
    INDEX idx_sub_publisher_dates (start_date, end_date),
    INDEX idx_sub_publisher_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- TERRITORY & SPECIAL OVERRIDES
-- =============================================

-- territory_share_override - Territory-specific share adjustments
CREATE TABLE territory_share_override (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL COMMENT 'work, recording, writer, publisher',
    entity_id BIGINT UNSIGNED NOT NULL,
    share_holder_type VARCHAR(50) NOT NULL,
    share_holder_id BIGINT UNSIGNED NOT NULL,
    territory_id INT NOT NULL,
    base_share_percentage DECIMAL(7,4) NOT NULL,
    adjusted_share_percentage DECIMAL(7,4) NOT NULL,
    adjustment_reason_id INT NOT NULL COMMENT 'FK to resource_db.share_adjustment_reason',
    
    -- Override details
    override_type_id INT NOT NULL COMMENT 'FK to resource_db.override_type',
    effective_date DATE NOT NULL,
    expiry_date DATE NULL,
    is_permanent BOOLEAN DEFAULT FALSE,
    
    -- Agreement reference
    agreement_id BIGINT UNSIGNED NULL,
    clause_reference VARCHAR(100) NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_territory_override_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_territory_override_reason FOREIGN KEY (adjustment_reason_id) REFERENCES resource_db.share_adjustment_reason(id),
    CONSTRAINT fk_territory_override_type FOREIGN KEY (override_type_id) REFERENCES resource_db.override_type(id),
    CONSTRAINT fk_territory_override_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_territory_override_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_territory_override_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_territory_override_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_territory_override_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_territory_base_share CHECK (base_share_percentage >= 0 AND base_share_percentage <= 100),
    CONSTRAINT chk_territory_adjusted_share CHECK (adjusted_share_percentage >= 0 AND adjusted_share_percentage <= 100),
    CONSTRAINT chk_territory_dates CHECK (expiry_date IS NULL OR expiry_date >= effective_date),
    
    -- Indexes
    INDEX idx_territory_override_entity (entity_type, entity_id),
    INDEX idx_territory_override_holder (share_holder_type, share_holder_id),
    INDEX idx_territory_override_territory (territory_id),
    INDEX idx_territory_override_dates (effective_date, expiry_date),
    INDEX idx_territory_override_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- controlled_composition - Controlled composition rates
CREATE TABLE controlled_composition (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    recording_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    artist_id BIGINT UNSIGNED NOT NULL,
    controlled_rate DECIMAL(7,4) NOT NULL COMMENT 'Percentage of statutory',
    statutory_rate DECIMAL(10,4) NOT NULL COMMENT 'Current statutory rate',
    effective_rate DECIMAL(10,4) NOT NULL COMMENT 'Actual rate paid',
    currency_id CHAR(3) NOT NULL,
    territory_id INT NOT NULL,
    
    -- Cap details
    cap_type_id INT NOT NULL COMMENT 'FK to resource_db.controlled_comp_cap_type',
    cap_amount DECIMAL(10,4) NULL,
    songs_cap INT NULL COMMENT 'Max songs per album',
    minutes_cap INT NULL COMMENT 'Max minutes',
    
    -- Agreement reference
    agreement_id BIGINT UNSIGNED NOT NULL,
    clause_reference VARCHAR(100) NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_controlled_comp_recording FOREIGN KEY (recording_id) REFERENCES recording(id),
    CONSTRAINT fk_controlled_comp_work FOREIGN KEY (work_id) REFERENCES work(id),
    CONSTRAINT fk_controlled_comp_artist FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT fk_controlled_comp_currency FOREIGN KEY (currency_id) REFERENCES resource_db.currency(id),
    CONSTRAINT fk_controlled_comp_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_controlled_comp_cap_type FOREIGN KEY (cap_type_id) REFERENCES resource_db.controlled_comp_cap_type(id),
    CONSTRAINT fk_controlled_comp_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_controlled_comp_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_controlled_comp_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_controlled_comp_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_controlled_comp_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_controlled_rate CHECK (controlled_rate >= 0 AND controlled_rate <= 100),
    
    -- Indexes
    INDEX idx_controlled_comp_recording (recording_id),
    INDEX idx_controlled_comp_work (work_id),
    INDEX idx_controlled_comp_artist (artist_id),
    INDEX idx_controlled_comp_territory (territory_id),
    INDEX idx_controlled_comp_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- SHARE VALIDATION & CONFLICTS
-- =============================================

-- share_validation - Share validation rules
CREATE TABLE share_validation (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    entity_type VARCHAR(50) NOT NULL COMMENT 'work, recording',
    share_type VARCHAR(50) NOT NULL COMMENT 'writer, publisher, master',
    territory_id INT NULL,
    validation_rule_id INT NOT NULL COMMENT 'FK to resource_db.share_validation_rule',
    
    -- Rule parameters
    min_total_percentage DECIMAL(7,4) DEFAULT 100.0000,
    max_total_percentage DECIMAL(7,4) DEFAULT 100.0000,
    allow_overclaim BOOLEAN DEFAULT FALSE,
    max_overclaim_percentage DECIMAL(7,4) DEFAULT 0,
    require_all_territories BOOLEAN DEFAULT FALSE,
    
    -- Additional rules
    custom_validation_sql TEXT NULL,
    error_message VARCHAR(500) NOT NULL,
    severity_id INT NOT NULL COMMENT 'FK to resource_db.validation_severity',
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_share_validation_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_share_validation_rule FOREIGN KEY (validation_rule_id) REFERENCES resource_db.share_validation_rule(id),
    CONSTRAINT fk_share_validation_severity FOREIGN KEY (severity_id) REFERENCES resource_db.validation_severity(id),
    CONSTRAINT fk_share_validation_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_share_validation_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_share_validation (entity_type, share_type, territory_id, validation_rule_id),
    INDEX idx_share_validation_territory (territory_id),
    INDEX idx_share_validation_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- share_conflict - Detected share conflicts
CREATE TABLE share_conflict (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    share_type VARCHAR(50) NOT NULL,
    territory_id INT NULL,
    conflict_type_id INT NOT NULL COMMENT 'FK to resource_db.share_conflict_type',
    
    -- Conflict details
    total_percentage DECIMAL(10,4) NOT NULL,
    expected_percentage DECIMAL(7,4) NOT NULL,
    difference_percentage DECIMAL(10,4) NOT NULL,
    conflicting_parties JSON NOT NULL,
    
    -- Resolution
    resolution_status_id INT NOT NULL COMMENT 'FK to resource_db.resolution_status',
    resolution_date DATETIME NULL,
    resolved_by BIGINT UNSIGNED NULL,
    resolution_method_id INT NULL COMMENT 'FK to resource_db.resolution_method',
    resolution_notes TEXT NULL,
    adjusted_shares JSON NULL,
    
    -- Detection
    detection_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    detection_source VARCHAR(100) NULL,
    severity_id INT NOT NULL COMMENT 'FK to resource_db.conflict_severity',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_share_conflict_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_share_conflict_type FOREIGN KEY (conflict_type_id) REFERENCES resource_db.share_conflict_type(id),
    CONSTRAINT fk_share_conflict_resolution_status FOREIGN KEY (resolution_status_id) REFERENCES resource_db.resolution_status(id),
    CONSTRAINT fk_share_conflict_resolution_method FOREIGN KEY (resolution_method_id) REFERENCES resource_db.resolution_method(id),
    CONSTRAINT fk_share_conflict_severity FOREIGN KEY (severity_id) REFERENCES resource_db.conflict_severity(id),
    CONSTRAINT fk_share_conflict_resolved_by FOREIGN KEY (resolved_by) REFERENCES user(id),
    CONSTRAINT fk_share_conflict_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_share_conflict_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_share_conflict_entity (entity_type, entity_id),
    INDEX idx_share_conflict_territory (territory_id),
    INDEX idx_share_conflict_status (resolution_status_id),
    INDEX idx_share_conflict_detection (detection_date),
    INDEX idx_share_conflict_severity (severity_id),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- SHARE CALCULATION PROCEDURES
-- =============================================

DELIMITER $$

-- Validate work shares for a specific territory
CREATE PROCEDURE sp_validate_work_shares(
    IN p_work_id BIGINT UNSIGNED,
    IN p_territory_id INT,
    OUT p_is_valid BOOLEAN,
    OUT p_validation_message TEXT
)
BEGIN
    DECLARE v_writer_total DECIMAL(10,4) DEFAULT 0;
    DECLARE v_publisher_total DECIMAL(10,4) DEFAULT 0;
    DECLARE v_validation_errors TEXT DEFAULT '';
    
    -- Calculate writer shares
    SELECT COALESCE(SUM(share_percentage), 0) INTO v_writer_total
    FROM writer_share
    WHERE work_id = p_work_id
        AND (territory_id = p_territory_id OR (territory_id IS NULL AND p_territory_id IS NULL))
        AND is_active = TRUE
        AND (end_date IS NULL OR end_date >= CURDATE());
    
    -- Calculate publisher shares
    SELECT COALESCE(SUM(share_percentage), 0) INTO v_publisher_total
    FROM publisher_share
    WHERE work_id = p_work_id
        AND (territory_id = p_territory_id OR (territory_id IS NULL AND p_territory_id IS NULL))
        AND is_active = TRUE
        AND (end_date IS NULL OR end_date >= CURDATE());
    
    -- Check writer shares
    IF v_writer_total < 99.99 OR v_writer_total > 100.01 THEN
        SET v_validation_errors = CONCAT(v_validation_errors, 
            'Writer shares total ', v_writer_total, '% (expected 100%). ');
    END IF;
    
    -- Check publisher shares
    IF v_publisher_total > 100.01 THEN
        SET v_validation_errors = CONCAT(v_validation_errors, 
            'Publisher shares total ', v_publisher_total, '% (exceeds 100%). ');
    END IF;
    
    -- Check if publisher shares exceed writer shares
    IF v_publisher_total > v_writer_total + 0.01 THEN
        SET v_validation_errors = CONCAT(v_validation_errors, 
            'Publisher shares (', v_publisher_total, '%) exceed writer shares (', v_writer_total, '%). ');
    END IF;
    
    -- Set results
    SET p_is_valid = (v_validation_errors = '');
    SET p_validation_message = IF(v_validation_errors = '', 'Shares valid', v_validation_errors);
    
    -- Log conflict if invalid
    IF NOT p_is_valid THEN
        INSERT INTO share_conflict (
            entity_type,
            entity_id,
            share_type,
            territory_id,
            conflict_type_id,
            total_percentage,
            expected_percentage,
            difference_percentage,
            conflicting_parties,
            resolution_status_id,
            detection_source,
            severity_id,
            created_by
        ) VALUES (
            'work',
            p_work_id,
            'writer_publisher',
            p_territory_id,
            (SELECT id FROM resource_db.share_conflict_type WHERE code = 'TOTAL_MISMATCH'),
            v_writer_total,
            100.0000,
            ABS(v_writer_total - 100),
            JSON_OBJECT('writer_total', v_writer_total, 'publisher_total', v_publisher_total),
            (SELECT id FROM resource_db.resolution_status WHERE code = 'UNRESOLVED'),
            'sp_validate_work_shares',
            (SELECT id FROM resource_db.conflict_severity WHERE code = 
                CASE 
                    WHEN ABS(v_writer_total - 100) > 10 THEN 'HIGH'
                    WHEN ABS(v_writer_total - 100) > 1 THEN 'MEDIUM'
                    ELSE 'LOW'
                END
            ),
            1 -- System user
        );
    END IF;
END$$

-- Calculate effective shares for a work at a point in time
CREATE PROCEDURE sp_calculate_work_shares(
    IN p_work_id BIGINT UNSIGNED,
    IN p_territory_id INT,
    IN p_as_of_date DATE
)
BEGIN
    -- Create temporary results table
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_work_shares (
        share_type VARCHAR(50),
        party_type VARCHAR(50),
        party_id BIGINT UNSIGNED,
        party_name VARCHAR(500),
        base_share DECIMAL(7,4),
        adjusted_share DECIMAL(7,4),
        is_controlled BOOLEAN,
        controller_id BIGINT UNSIGNED,
        controller_name VARCHAR(500)
    );
    
    TRUNCATE TABLE temp_work_shares;
    
    -- Get writer shares
    INSERT INTO temp_work_shares
    SELECT 
        'writer' AS share_type,
        'writer' AS party_type,
        ws.writer_id,
        CONCAT(p.first_name, ' ', p.last_name) AS party_name,
        ws.share_percentage AS base_share,
        COALESCE(tso.adjusted_share_percentage, ws.share_percentage) AS adjusted_share,
        ws.is_controlled,
        ws.publisher_id,
        pub_org.name AS controller_name
    FROM writer_share ws
    JOIN writer w ON ws.writer_id = w.id
    JOIN person p ON w.person_id = p.id
    LEFT JOIN publisher pub ON ws.publisher_id = pub.id
    LEFT JOIN organization pub_org ON pub.organization_id = pub_org.id
    LEFT JOIN territory_share_override tso ON 
        tso.entity_type = 'writer' 
        AND tso.entity_id = ws.writer_id
        AND tso.territory_id = p_territory_id
        AND tso.effective_date <= p_as_of_date
        AND (tso.expiry_date IS NULL OR tso.expiry_date >= p_as_of_date)
        AND tso.is_active = TRUE
    WHERE ws.work_id = p_work_id
        AND (ws.territory_id = p_territory_id OR (ws.territory_id IS NULL AND p_territory_id IS NULL))
        AND ws.start_date <= p_as_of_date
        AND (ws.end_date IS NULL OR ws.end_date >= p_as_of_date)
        AND ws.is_active = TRUE;
    
    -- Get publisher shares
    INSERT INTO temp_work_shares
    SELECT 
        'publisher' AS share_type,
        'publisher' AS party_type,
        ps.publisher_id,
        o.name AS party_name,
        ps.share_percentage AS base_share,
        COALESCE(tso.adjusted_share_percentage, ps.share_percentage) AS adjusted_share,
        FALSE AS is_controlled,
        NULL AS controller_id,
        NULL AS controller_name
    FROM publisher_share ps
    JOIN publisher p ON ps.publisher_id = p.id
    JOIN organization o ON p.organization_id = o.id
    LEFT JOIN territory_share_override tso ON 
        tso.entity_type = 'publisher' 
        AND tso.entity_id = ps.publisher_id
        AND tso.territory_id = p_territory_id
        AND tso.effective_date <= p_as_of_date
        AND (tso.expiry_date IS NULL OR tso.expiry_date >= p_as_of_date)
        AND tso.is_active = TRUE
    WHERE ps.work_id = p_work_id
        AND (ps.territory_id = p_territory_id OR (ps.territory_id IS NULL AND p_territory_id IS NULL))
        AND ps.start_date <= p_as_of_date
        AND (ps.end_date IS NULL OR ps.end_date >= p_as_of_date)
        AND ps.is_active = TRUE;
    
    -- Return results
    SELECT 
        share_type,
        party_type,
        party_id,
        party_name,
        base_share,
        adjusted_share,
        is_controlled,
        controller_id,
        controller_name,
        SUM(adjusted_share) OVER (PARTITION BY share_type) AS total_by_type
    FROM temp_work_shares
    ORDER BY share_type, adjusted_share DESC;
    
    DROP TEMPORARY TABLE temp_work_shares;
END$$

-- Create ownership snapshot for a specific date
CREATE PROCEDURE sp_create_ownership_snapshot(
    IN p_snapshot_date DATE
)
BEGIN
    DECLARE v_processed_count INT DEFAULT 0;
    
    -- Master ownership snapshots
    INSERT INTO master_ownership_snapshot (
        snapshot_date,
        recording_id,
        owner_type,
        owner_id,
        ownership_type_id,
        share_percentage,
        territory_id,
        total_territory_percentage,
        is_complete,
        created_by
    )
    SELECT 
        p_snapshot_date,
        mo.recording_id,
        mo.owner_type,
        mo.owner_id,
        mo.ownership_type_id,
        mo.share_percentage,
        mo.territory_id,
        SUM(mo.share_percentage) OVER (PARTITION BY mo.recording_id, mo.territory_id),
        CASE 
            WHEN SUM(mo.share_percentage) OVER (PARTITION BY mo.recording_id, mo.territory_id) 
                BETWEEN 99.99 AND 100.01 THEN TRUE 
            ELSE FALSE 
        END,
        1 -- System user
    FROM master_ownership mo
    WHERE mo.start_date <= p_snapshot_date
        AND (mo.end_date IS NULL OR mo.end_date >= p_snapshot_date)
        AND mo.is_active = TRUE
        AND NOT EXISTS (
            SELECT 1 FROM master_ownership_snapshot mos
            WHERE mos.snapshot_date = p_snapshot_date
                AND mos.recording_id = mo.recording_id
                AND mos.owner_type = mo.owner_type
                AND mos.owner_id = mo.owner_id
                AND COALESCE(mos.territory_id, 0) = COALESCE(mo.territory_id, 0)
        );
    
    SET v_processed_count = v_processed_count + ROW_COUNT();
    
    -- Publishing share snapshots
    INSERT INTO publishing_share_snapshot (
        snapshot_date,
        work_id,
        publisher_id,
        share_type_id,
        share_percentage,
        territory_id,
        total_territory_percentage,
        is_complete,
        created_by
    )
    SELECT 
        p_snapshot_date,
        ps.work_id,
        ps.publisher_id,
        ps.share_type_id,
        ps.share_percentage,
        ps.territory_id,
        SUM(ps.share_percentage) OVER (PARTITION BY ps.work_id, ps.territory_id),
        CASE 
            WHEN SUM(ps.share_percentage) OVER (PARTITION BY ps.work_id, ps.territory_id) 
                <= 100.01 THEN TRUE 
            ELSE FALSE 
        END,
        1 -- System user
    FROM publishing_share ps
    WHERE ps.start_date <= p_snapshot_date
        AND (ps.end_date IS NULL OR ps.end_date >= p_snapshot_date)
        AND ps.is_active = TRUE
        AND NOT EXISTS (
            SELECT 1 FROM publishing_share_snapshot pss
            WHERE pss.snapshot_date = p_snapshot_date
                AND pss.work_id = ps.work_id
                AND pss.publisher_id = ps.publisher_id
                AND COALESCE(pss.territory_id, 0) = COALESCE(ps.territory_id, 0)
        );
    
    SET v_processed_count = v_processed_count + ROW_COUNT();
    
    SELECT v_processed_count AS records_created;
END$$

DELIMITER ;

-- =============================================
-- OWNERSHIP CHAIN VIEWS
-- =============================================

-- Work ownership chain view
CREATE OR REPLACE VIEW vw_work_ownership_chain AS
WITH writer_chain AS (
    SELECT 
        ws.work_id,
        ws.writer_id,
        w.person_id,
        p.full_name AS writer_name,
        ws.share_percentage AS writer_share,
        ws.is_controlled,
        ws.publisher_id,
        pub_org.name AS controlling_publisher,
        ps.share_percentage AS publisher_share,
        ws.territory_id,
        t.name AS territory_name,
        ws.start_date,
        ws.end_date
    FROM writer_share ws
    JOIN writer w ON ws.writer_id = w.id
    JOIN person p ON w.person_id = p.id
    LEFT JOIN publisher_share ps ON 
        ws.work_id = ps.work_id 
        AND ws.publisher_id = ps.publisher_id
        AND COALESCE(ws.territory_id, 0) = COALESCE(ps.territory_id, 0)
        AND ps.is_active = TRUE
    LEFT JOIN publisher pub ON ws.publisher_id = pub.id
    LEFT JOIN organization pub_org ON pub.organization_id = pub_org.id
    LEFT JOIN resource_db.territory t ON ws.territory_id = t.id
    WHERE ws.is_active = TRUE
)
SELECT 
    wc.work_id,
    w.title AS work_title,
    w.iswc,
    wc.writer_id,
    wc.writer_name,
    wc.writer_share,
    wc.is_controlled,
    wc.publisher_id,
    wc.controlling_publisher,
    COALESCE(wc.publisher_share, 0) AS publisher_share,
    wc.territory_name,
    wc.start_date,
    wc.end_date,
    -- Calculate collection splits
    CASE 
        WHEN wc.is_controlled THEN wc.writer_share * 0.5 -- Writer's 50%
        ELSE wc.writer_share 
    END AS writer_collection_share,
    CASE 
        WHEN wc.is_controlled THEN COALESCE(wc.publisher_share, wc.writer_share * 0.5)
        ELSE 0 
    END AS publisher_collection_share
FROM writer_chain wc
JOIN work w ON wc.work_id = w.id;

-- Master recording ownership chain
CREATE OR REPLACE VIEW vw_master_ownership_chain AS
SELECT 
    mo.recording_id,
    r.title AS recording_title,
    r.isrc,
    mo.owner_type,
    mo.owner_id,
    CASE mo.owner_type
        WHEN 'person' THEN p.full_name
        WHEN 'organization' THEN o.name
        WHEN 'label' THEN l_org.name
        WHEN 'artist' THEN a.name
    END AS owner_name,
    mot.name AS ownership_type,
    mo.share_percentage,
    t.name AS territory_name,
    mo.start_date,
    mo.end_date,
    mo.acquisition_date,
    at.name AS acquisition_type,
    mo.reversion_date,
    mo.is_verified,
    mo.verified_date
FROM master_ownership mo
JOIN recording r ON mo.recording_id = r.id
JOIN resource_db.master_ownership_type mot ON mo.ownership_type_id = mot.id
JOIN resource_db.acquisition_type at ON mo.acquisition_type_id = at.id
LEFT JOIN resource_db.territory t ON mo.territory_id = t.id
LEFT JOIN person p ON mo.owner_type = 'person' AND mo.owner_id = p.id
LEFT JOIN organization o ON mo.owner_type = 'organization' AND mo.owner_id = o.id
LEFT JOIN label l ON mo.owner_type = 'label' AND mo.owner_id = l.id
LEFT JOIN organization l_org ON l.organization_id = l_org.id
LEFT JOIN artist a ON mo.owner_type = 'artist' AND mo.owner_id = a.id
WHERE mo.is_active = TRUE;

-- =============================================
-- SHARE VALIDATION TRIGGERS
-- =============================================

DELIMITER $$

-- Trigger to validate writer shares on insert/update
CREATE TRIGGER tr_validate_writer_share_insert
BEFORE INSERT ON writer_share
FOR EACH ROW
BEGIN
    DECLARE v_current_total DECIMAL(10,4);
    
    -- Calculate current total for the territory
    SELECT COALESCE(SUM(share_percentage), 0) INTO v_current_total
    FROM writer_share
    WHERE work_id = NEW.work_id
        AND COALESCE(territory_id, 0) = COALESCE(NEW.territory_id, 0)
        AND is_active = TRUE
        AND (end_date IS NULL OR end_date >= CURDATE());
    
    -- Check if adding this share would exceed 100%
    IF (v_current_total + NEW.share_percentage) > 100.01 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Writer shares would exceed 100% for this territory';
    END IF;
END$$

CREATE TRIGGER tr_validate_writer_share_update
BEFORE UPDATE ON writer_share
FOR EACH ROW
BEGIN
    DECLARE v_current_total DECIMAL(10,4);
    
    IF NEW.share_percentage != OLD.share_percentage OR 
       NEW.is_active != OLD.is_active OR
       COALESCE(NEW.territory_id, 0) != COALESCE(OLD.territory_id, 0) THEN
        
        -- Calculate current total excluding this record
        SELECT COALESCE(SUM(share_percentage), 0) INTO v_current_total
        FROM writer_share
        WHERE work_id = NEW.work_id
            AND id != NEW.id
            AND COALESCE(territory_id, 0) = COALESCE(NEW.territory_id, 0)
            AND is_active = TRUE
            AND (end_date IS NULL OR end_date >= CURDATE());
        
        -- Check if update would exceed 100%
        IF NEW.is_active AND (v_current_total + NEW.share_percentage) > 100.01 THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Writer shares would exceed 100% for this territory';
        END IF;
    END IF;
END$$

-- Trigger to log ownership changes
CREATE TRIGGER tr_log_master_ownership_change
AFTER UPDATE ON master_ownership
FOR EACH ROW
BEGIN
    IF NEW.share_percentage != OLD.share_percentage OR
       NEW.owner_type != OLD.owner_type OR
       NEW.owner_id != OLD.owner_id OR
       COALESCE(NEW.territory_id, 0) != COALESCE(OLD.territory_id, 0) OR
       NEW.start_date != OLD.start_date OR
       COALESCE(NEW.end_date, '9999-12-31') != COALESCE(OLD.end_date, '9999-12-31') THEN
        
        INSERT INTO master_ownership_history (
            master_ownership_id,
            recording_id,
            change_type_id,
            old_owner_type,
            old_owner_id,
            old_share_percentage,
            old_territory_id,
            old_start_date,
            old_end_date,
            new_owner_type,
            new_owner_id,
            new_share_percentage,
            new_territory_id,
            new_start_date,
            new_end_date,
            effective_date,
            created_by
        ) VALUES (
            NEW.id,
            NEW.recording_id,
            (SELECT id FROM resource_db.ownership_change_type WHERE code = 'MODIFY'),
            OLD.owner_type,
            OLD.owner_id,
            OLD.share_percentage,
            OLD.territory_id,
            OLD.start_date,
            OLD.end_date,
            NEW.owner_type,
            NEW.owner_id,
            NEW.share_percentage,
            NEW.territory_id,
            NEW.start_date,
            NEW.end_date,
            CURDATE(),
            COALESCE(NEW.updated_by, NEW.created_by)
        );
    END IF;
END$$

DELIMITER ;

-- =============================================
-- SHARE CALCULATION FUNCTIONS
-- =============================================

DELIMITER $$

-- Function to get writer's net publisher share
CREATE FUNCTION fn_get_writer_net_publisher_share(
    p_work_id BIGINT UNSIGNED,
    p_writer_id BIGINT UNSIGNED,
    p_territory_id INT
) RETURNS DECIMAL(7,4)
READS SQL DATA
DETERMINISTIC
BEGIN
    DECLARE v_publisher_share DECIMAL(7,4) DEFAULT 0;
    
    SELECT COALESCE(SUM(ps.share_percentage), 0) INTO v_publisher_share
    FROM publisher_share ps
    WHERE ps.work_id = p_work_id
        AND ps.writer_id = p_writer_id
        AND COALESCE(ps.territory_id, 0) = COALESCE(p_territory_id, 0)
        AND ps.is_active = TRUE
        AND (ps.end_date IS NULL OR ps.end_date >= CURDATE());
    
    RETURN v_publisher_share;
END$$

-- Function to check if ownership totals 100%
CREATE FUNCTION fn_check_ownership_complete(
    p_entity_type VARCHAR(50),
    p_entity_id BIGINT UNSIGNED,
    p_territory_id INT
) RETURNS BOOLEAN
READS SQL DATA
DETERMINISTIC
BEGIN
    DECLARE v_total DECIMAL(10,4) DEFAULT 0;
    
    IF p_entity_type = 'work' THEN
        SELECT COALESCE(SUM(share_percentage), 0) INTO v_total
        FROM writer_share
        WHERE work_id = p_entity_id
            AND COALESCE(territory_id, 0) = COALESCE(p_territory_id, 0)
            AND is_active = TRUE
            AND (end_date IS NULL OR end_date >= CURDATE());
            
    ELSEIF p_entity_type = 'recording' THEN
        SELECT COALESCE(SUM(share_percentage), 0) INTO v_total
        FROM master_ownership
        WHERE recording_id = p_entity_id
            AND COALESCE(territory_id, 0) = COALESCE(p_territory_id, 0)
            AND is_active = TRUE
            AND (end_date IS NULL OR end_date >= CURDATE());
    END IF;
    
    RETURN (v_total BETWEEN 99.99 AND 100.01);
END$$

DELIMITER ;

-- =============================================
-- INDEXES FOR PERFORMANCE
-- =============================================

-- Additional composite indexes for common queries
CREATE INDEX idx_writer_share_lookup ON writer_share(work_id, territory_id, is_active, end_date);
CREATE INDEX idx_publisher_share_lookup ON publisher_share(work_id, territory_id, is_active, end_date);
CREATE INDEX idx_master_ownership_lookup ON master_ownership(recording_id, territory_id, is_active, end_date);
CREATE INDEX idx_territory_override_lookup ON territory_share_override(entity_type, entity_id, territory_id, effective_date, expiry_date);

-- Indexes for share validation
CREATE INDEX idx_share_conflict_resolution ON share_conflict(resolution_status_id, detection_date);
CREATE INDEX idx_share_validation_lookup ON share_validation(entity_type, share_type, territory_id, is_active);

-- =============================================
-- SECTION 5: RIGHTS MANAGEMENT
-- =============================================

-- =============================================
-- CORE RIGHTS GRANT TABLES
-- =============================================

-- rights_grant - Specific rights granted to parties
CREATE TABLE rights_grant (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    grant_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_grant_type',
    grantor_type VARCHAR(50) NOT NULL COMMENT 'person, organization, etc.',
    grantor_id BIGINT UNSIGNED NOT NULL,
    grantee_type VARCHAR(50) NOT NULL,
    grantee_id BIGINT UNSIGNED NOT NULL,
    
    -- Asset being granted rights to
    asset_type VARCHAR(50) NOT NULL COMMENT 'work, recording, release',
    asset_id BIGINT UNSIGNED NOT NULL,
    
    -- Rights details
    rights_category_id INT NOT NULL COMMENT 'FK to resource_db.rights_category',
    rights_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_type',
    exclusive_rights BOOLEAN DEFAULT FALSE,
    sublicense_rights BOOLEAN DEFAULT FALSE,
    transfer_rights BOOLEAN DEFAULT FALSE,
    
    -- Term
    grant_date DATE NOT NULL,
    effective_date DATE NOT NULL,
    expiry_date DATE NULL,
    in_perpetuity BOOLEAN DEFAULT FALSE,
    
    -- Financial terms
    advance_amount DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    royalty_percentage DECIMAL(7,4) NULL,
    flat_fee DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    minimum_guarantee DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    
    -- Agreement reference
    agreement_id BIGINT UNSIGNED NULL,
    clause_reference VARCHAR(100) NULL,
    
    -- Status
    status_id INT NOT NULL COMMENT 'FK to resource_db.rights_status',
    activation_date DATETIME NULL,
    suspension_date DATETIME NULL,
    suspension_reason TEXT NULL,
    
    -- Validation
    is_verified BOOLEAN DEFAULT FALSE,
    verified_date DATETIME NULL,
    verified_by BIGINT UNSIGNED NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_grant_type FOREIGN KEY (grant_type_id) REFERENCES resource_db.rights_grant_type(id),
    CONSTRAINT fk_rights_grant_category FOREIGN KEY (rights_category_id) REFERENCES resource_db.rights_category(id),
    CONSTRAINT fk_rights_grant_rights_type FOREIGN KEY (rights_type_id) REFERENCES resource_db.rights_type(id),
    CONSTRAINT fk_rights_grant_status FOREIGN KEY (status_id) REFERENCES resource_db.rights_status(id),
    CONSTRAINT fk_rights_grant_agreement FOREIGN KEY (agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_rights_grant_verified_by FOREIGN KEY (verified_by) REFERENCES user(id),
    CONSTRAINT fk_rights_grant_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_rights_grant_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_rights_grant_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rights_grant_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_rights_grant_dates CHECK (expiry_date IS NULL OR expiry_date >= effective_date),
    CONSTRAINT chk_rights_grant_perpetuity CHECK (in_perpetuity = FALSE OR expiry_date IS NULL),
    
    -- Indexes
    INDEX idx_rights_grantor (grantor_type, grantor_id),
    INDEX idx_rights_grantee (grantee_type, grantee_id),
    INDEX idx_rights_asset (asset_type, asset_id),
    INDEX idx_rights_category (rights_category_id),
    INDEX idx_rights_type (rights_type_id),
    INDEX idx_rights_dates (effective_date, expiry_date),
    INDEX idx_rights_status (status_id),
    INDEX idx_rights_exclusive (exclusive_rights),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- rights_grant_history - Track all rights grant changes
CREATE TABLE rights_grant_history (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    rights_grant_id BIGINT UNSIGNED NOT NULL,
    change_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_change_type',
    
    -- What changed
    field_name VARCHAR(100) NULL,
    old_value TEXT NULL,
    new_value TEXT NULL,
    
    -- Change details
    change_reason TEXT NULL,
    change_document_id BIGINT UNSIGNED NULL,
    effective_date DATE NOT NULL,
    
    -- Who approved (if required)
    requires_approval BOOLEAN DEFAULT FALSE,
    approved_by BIGINT UNSIGNED NULL,
    approved_date DATETIME NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_history_grant FOREIGN KEY (rights_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_history_change_type FOREIGN KEY (change_type_id) REFERENCES resource_db.rights_change_type(id),
    CONSTRAINT fk_rights_history_document FOREIGN KEY (change_document_id) REFERENCES file(id),
    CONSTRAINT fk_rights_history_approved_by FOREIGN KEY (approved_by) REFERENCES user(id),
    CONSTRAINT fk_rights_history_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_rights_history_grant (rights_grant_id),
    INDEX idx_rights_history_date (effective_date),
    INDEX idx_rights_history_created (created_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- TERRITORIAL RIGHTS TABLES
-- =============================================

-- territory_rights - Base territorial rights configuration
CREATE TABLE territory_rights (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    rights_grant_id BIGINT UNSIGNED NOT NULL,
    territory_set_type_id INT NOT NULL COMMENT 'FK to resource_db.territory_set_type',
    is_worldwide BOOLEAN DEFAULT FALSE,
    
    -- Language restrictions
    language_restriction_type_id INT NULL COMMENT 'FK to resource_db.language_restriction_type',
    included_languages JSON NULL,
    excluded_languages JSON NULL,
    
    -- Additional restrictions
    online_rights BOOLEAN DEFAULT TRUE,
    offline_rights BOOLEAN DEFAULT TRUE,
    mobile_rights BOOLEAN DEFAULT TRUE,
    broadcast_rights BOOLEAN DEFAULT TRUE,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_territory_rights_grant FOREIGN KEY (rights_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_territory_rights_set_type FOREIGN KEY (territory_set_type_id) REFERENCES resource_db.territory_set_type(id),
    CONSTRAINT fk_territory_rights_language FOREIGN KEY (language_restriction_type_id) REFERENCES resource_db.language_restriction_type(id),
    CONSTRAINT fk_territory_rights_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_territory_rights_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_territory_rights_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_territory_rights_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_territory_rights_grant (rights_grant_id),
    INDEX idx_territory_set_type (territory_set_type_id),
    INDEX idx_worldwide (is_worldwide),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- territory_inclusion - Specific territories included
CREATE TABLE territory_inclusion (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    territory_rights_id BIGINT UNSIGNED NOT NULL,
    territory_id INT NOT NULL COMMENT 'FK to resource_db.territory',
    inclusion_type_id INT NOT NULL COMMENT 'FK to resource_db.inclusion_type',
    
    -- Special terms for this territory
    special_terms TEXT NULL,
    additional_percentage DECIMAL(7,4) NULL COMMENT 'Territory uplift',
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_territory_inclusion_rights FOREIGN KEY (territory_rights_id) REFERENCES territory_rights(id),
    CONSTRAINT fk_territory_inclusion_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_territory_inclusion_type FOREIGN KEY (inclusion_type_id) REFERENCES resource_db.inclusion_type(id),
    CONSTRAINT fk_territory_inclusion_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_territory_inclusion_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_territory_inclusion (territory_rights_id, territory_id),
    INDEX idx_territory_id (territory_id),
    INDEX idx_inclusion_type (inclusion_type_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- territory_exclusion - Specific territories excluded
CREATE TABLE territory_exclusion (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    territory_rights_id BIGINT UNSIGNED NOT NULL,
    territory_id INT NOT NULL COMMENT 'FK to resource_db.territory',
    exclusion_type_id INT NOT NULL COMMENT 'FK to resource_db.exclusion_type',
    exclusion_reason TEXT NULL,
    
    -- Holdback period
    holdback_start_date DATE NULL,
    holdback_end_date DATE NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_territory_exclusion_rights FOREIGN KEY (territory_rights_id) REFERENCES territory_rights(id),
    CONSTRAINT fk_territory_exclusion_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_territory_exclusion_type FOREIGN KEY (exclusion_type_id) REFERENCES resource_db.exclusion_type(id),
    CONSTRAINT fk_territory_exclusion_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_territory_exclusion_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_holdback_dates CHECK (holdback_end_date IS NULL OR holdback_end_date >= holdback_start_date),
    
    -- Indexes
    UNIQUE KEY uk_territory_exclusion (territory_rights_id, territory_id),
    INDEX idx_territory_id (territory_id),
    INDEX idx_exclusion_type (exclusion_type_id),
    INDEX idx_holdback_dates (holdback_start_date, holdback_end_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- RIGHTS RESTRICTIONS & TRANSFERS
-- =============================================

-- rights_restriction - Usage restrictions on rights
CREATE TABLE rights_restriction (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    rights_grant_id BIGINT UNSIGNED NOT NULL,
    restriction_type_id INT NOT NULL COMMENT 'FK to resource_db.restriction_type',
    restriction_scope_id INT NOT NULL COMMENT 'FK to resource_db.restriction_scope',
    
    -- Restriction details
    restriction_description TEXT NOT NULL,
    applies_to_sublicenses BOOLEAN DEFAULT TRUE,
    
    -- Media/channel restrictions
    restricted_media_types JSON NULL,
    restricted_channels JSON NULL,
    restricted_platforms JSON NULL,
    
    -- Time restrictions
    restriction_start_date DATE NULL,
    restriction_end_date DATE NULL,
    blackout_periods JSON NULL,
    
    -- Usage limits
    max_uses INT NULL,
    uses_remaining INT NULL,
    max_copies INT NULL,
    max_duration_seconds INT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_restriction_grant FOREIGN KEY (rights_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_restriction_type FOREIGN KEY (restriction_type_id) REFERENCES resource_db.restriction_type(id),
    CONSTRAINT fk_rights_restriction_scope FOREIGN KEY (restriction_scope_id) REFERENCES resource_db.restriction_scope(id),
    CONSTRAINT fk_rights_restriction_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_rights_restriction_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_rights_restriction_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rights_restriction_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_restriction_dates CHECK (restriction_end_date IS NULL OR restriction_end_date >= restriction_start_date),
    
    -- Indexes
    INDEX idx_restriction_grant (rights_grant_id),
    INDEX idx_restriction_type (restriction_type_id),
    INDEX idx_restriction_dates (restriction_start_date, restriction_end_date),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- rights_transfer - Transfer of rights between parties
CREATE TABLE rights_transfer (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    original_grant_id BIGINT UNSIGNED NOT NULL,
    transfer_type_id INT NOT NULL COMMENT 'FK to resource_db.transfer_type',
    
    -- Transfer parties
    transferor_type VARCHAR(50) NOT NULL,
    transferor_id BIGINT UNSIGNED NOT NULL,
    transferee_type VARCHAR(50) NOT NULL,
    transferee_id BIGINT UNSIGNED NOT NULL,
    
    -- Transfer details
    transfer_percentage DECIMAL(7,4) NOT NULL COMMENT 'Percentage being transferred',
    transfer_date DATE NOT NULL,
    effective_date DATE NOT NULL,
    
    -- Financial terms
    transfer_price DECIMAL(15,2) NULL COMMENT 'ENCRYPTED',
    payment_terms TEXT NULL,
    consideration_type_id INT NOT NULL COMMENT 'FK to resource_db.consideration_type',
    
    -- New grant creation
    new_grant_id BIGINT UNSIGNED NULL COMMENT 'New rights_grant record created',
    
    -- Approval workflow
    requires_approval BOOLEAN DEFAULT TRUE,
    approval_status_id INT NOT NULL COMMENT 'FK to resource_db.approval_status',
    submitted_date DATETIME NULL,
    
    -- Legal documentation
    transfer_agreement_id BIGINT UNSIGNED NULL,
    recording_reference VARCHAR(200) NULL COMMENT 'Legal recording info',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_transfer_original FOREIGN KEY (original_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_transfer_type FOREIGN KEY (transfer_type_id) REFERENCES resource_db.transfer_type(id),
    CONSTRAINT fk_rights_transfer_consideration FOREIGN KEY (consideration_type_id) REFERENCES resource_db.consideration_type(id),
    CONSTRAINT fk_rights_transfer_approval_status FOREIGN KEY (approval_status_id) REFERENCES resource_db.approval_status(id),
    CONSTRAINT fk_rights_transfer_new_grant FOREIGN KEY (new_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_transfer_agreement FOREIGN KEY (transfer_agreement_id) REFERENCES agreement(id),
    CONSTRAINT fk_rights_transfer_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_rights_transfer_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_rights_transfer_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rights_transfer_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_transfer_percentage CHECK (transfer_percentage > 0 AND transfer_percentage <= 100),
    CONSTRAINT chk_transfer_dates CHECK (effective_date >= transfer_date),
    
    -- Indexes
    INDEX idx_transfer_original (original_grant_id),
    INDEX idx_transfer_parties (transferor_type, transferor_id, transferee_type, transferee_id),
    INDEX idx_transfer_dates (transfer_date, effective_date),
    INDEX idx_transfer_approval (approval_status_id),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- rights_transfer_approval - Approval workflow for transfers
CREATE TABLE rights_transfer_approval (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    rights_transfer_id BIGINT UNSIGNED NOT NULL,
    approval_level INT NOT NULL DEFAULT 1,
    approver_id BIGINT UNSIGNED NOT NULL,
    approval_status_id INT NOT NULL COMMENT 'FK to resource_db.approval_status',
    approval_date DATETIME NULL,
    
    -- Approval details
    comments TEXT NULL,
    conditions TEXT NULL,
    
    -- Delegation
    delegated_to BIGINT UNSIGNED NULL,
    delegated_date DATETIME NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_transfer_approval_transfer FOREIGN KEY (rights_transfer_id) REFERENCES rights_transfer(id),
    CONSTRAINT fk_transfer_approval_approver FOREIGN KEY (approver_id) REFERENCES user(id),
    CONSTRAINT fk_transfer_approval_status FOREIGN KEY (approval_status_id) REFERENCES resource_db.approval_status(id),
    CONSTRAINT fk_transfer_approval_delegated FOREIGN KEY (delegated_to) REFERENCES user(id),
    CONSTRAINT fk_transfer_approval_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_transfer_approval_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    UNIQUE KEY uk_transfer_approval (rights_transfer_id, approval_level),
    INDEX idx_approver (approver_id),
    INDEX idx_approval_status (approval_status_id),
    INDEX idx_approval_date (approval_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- REVERSIONS & CLAIMS
-- =============================================

-- rights_reversion - Automatic reversion schedules
CREATE TABLE rights_reversion (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    rights_grant_id BIGINT UNSIGNED NOT NULL,
    reversion_type_id INT NOT NULL COMMENT 'FK to resource_db.reversion_type',
    
    -- Reversion trigger
    trigger_type_id INT NOT NULL COMMENT 'FK to resource_db.reversion_trigger_type',
    trigger_date DATE NULL,
    trigger_event VARCHAR(200) NULL,
    years_after_grant INT NULL,
    
    -- Reversion details
    reversion_date DATE NULL,
    reversion_percentage DECIMAL(7,4) NOT NULL DEFAULT 100.0000,
    
    -- Notice requirements
    notice_required BOOLEAN DEFAULT TRUE,
    notice_period_days INT DEFAULT 180,
    notice_deadline DATE NULL,
    notice_sent_date DATE NULL,
    notice_sent_by BIGINT UNSIGNED NULL,
    
    -- Post-reversion
    reverts_to_type VARCHAR(50) NOT NULL,
    reverts_to_id BIGINT UNSIGNED NOT NULL,
    
    -- Status
    status_id INT NOT NULL COMMENT 'FK to resource_db.reversion_status',
    executed_date DATETIME NULL,
    executed_by BIGINT UNSIGNED NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_reversion_grant FOREIGN KEY (rights_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_reversion_type FOREIGN KEY (reversion_type_id) REFERENCES resource_db.reversion_type(id),
    CONSTRAINT fk_rights_reversion_trigger FOREIGN KEY (trigger_type_id) REFERENCES resource_db.reversion_trigger_type(id),
    CONSTRAINT fk_rights_reversion_status FOREIGN KEY (status_id) REFERENCES resource_db.reversion_status(id),
    CONSTRAINT fk_rights_reversion_notice_by FOREIGN KEY (notice_sent_by) REFERENCES user(id),
    CONSTRAINT fk_rights_reversion_executed_by FOREIGN KEY (executed_by) REFERENCES user(id),
    CONSTRAINT fk_rights_reversion_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_rights_reversion_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_rights_reversion_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rights_reversion_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_reversion_percentage CHECK (reversion_percentage > 0 AND reversion_percentage <= 100),
    
    -- Indexes
    INDEX idx_reversion_grant (rights_grant_id),
    INDEX idx_reversion_type (reversion_type_id),
    INDEX idx_reversion_date (reversion_date),
    INDEX idx_reversion_notice (notice_deadline),
    INDEX idx_reversion_status (status_id),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- rights_claim - Claims on rights
CREATE TABLE rights_claim (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    claim_type_id INT NOT NULL COMMENT 'FK to resource_db.claim_type',
    
    -- Claimant
    claimant_type VARCHAR(50) NOT NULL,
    claimant_id BIGINT UNSIGNED NOT NULL,
    
    -- What is being claimed
    asset_type VARCHAR(50) NOT NULL,
    asset_id BIGINT UNSIGNED NOT NULL,
    
    -- Claim details
    rights_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_type',
    territory_id INT NULL COMMENT 'NULL = worldwide',
    ownership_percentage DECIMAL(7,4) NULL,
    
    -- Basis for claim
    claim_basis_id INT NOT NULL COMMENT 'FK to resource_db.claim_basis',
    claim_description TEXT NOT NULL,
    supporting_documents JSON NULL,
    
    -- Dates
    claim_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    priority_date DATE NULL COMMENT 'Date rights were acquired',
    
    -- Status
    status_id INT NOT NULL COMMENT 'FK to resource_db.claim_status',
    resolution_date DATETIME NULL,
    resolution_type_id INT NULL COMMENT 'FK to resource_db.resolution_type',
    resolution_notes TEXT NULL,
    
    -- Investigation
    assigned_to BIGINT UNSIGNED NULL,
    due_date DATE NULL,
    priority_level_id INT NOT NULL COMMENT 'FK to resource_db.priority_level',
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_claim_type FOREIGN KEY (claim_type_id) REFERENCES resource_db.claim_type(id),
    CONSTRAINT fk_rights_claim_rights_type FOREIGN KEY (rights_type_id) REFERENCES resource_db.rights_type(id),
    CONSTRAINT fk_rights_claim_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_rights_claim_basis FOREIGN KEY (claim_basis_id) REFERENCES resource_db.claim_basis(id),
    CONSTRAINT fk_rights_claim_status FOREIGN KEY (status_id) REFERENCES resource_db.claim_status(id),
    CONSTRAINT fk_rights_claim_resolution FOREIGN KEY (resolution_type_id) REFERENCES resource_db.resolution_type(id),
    CONSTRAINT fk_rights_claim_assigned FOREIGN KEY (assigned_to) REFERENCES user(id),
    CONSTRAINT fk_rights_claim_priority FOREIGN KEY (priority_level_id) REFERENCES resource_db.priority_level(id),
    CONSTRAINT fk_rights_claim_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_rights_claim_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_rights_claim_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rights_claim_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_claim_percentage CHECK (ownership_percentage IS NULL OR (ownership_percentage > 0 AND ownership_percentage <= 100)),
    
    -- Indexes
    INDEX idx_claim_claimant (claimant_type, claimant_id),
    INDEX idx_claim_asset (asset_type, asset_id),
    INDEX idx_claim_type (claim_type_id),
    INDEX idx_claim_status (status_id),
    INDEX idx_claim_date (claim_date),
    INDEX idx_claim_priority (priority_level_id),
    INDEX idx_claim_due_date (due_date),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- rights_conflict - Conflicting rights claims
CREATE TABLE rights_conflict (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    conflict_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_conflict_type',
    
    -- Asset in conflict
    asset_type VARCHAR(50) NOT NULL,
    asset_id BIGINT UNSIGNED NOT NULL,
    
    -- Rights in conflict
    rights_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_type',
    territory_id INT NULL,
    
    -- Conflicting parties
    party1_type VARCHAR(50) NOT NULL,
    party1_id BIGINT UNSIGNED NOT NULL,
    party1_grant_id BIGINT UNSIGNED NULL,
    party1_claim_id BIGINT UNSIGNED NULL,
    party1_percentage DECIMAL(7,4) NULL,
    
    party2_type VARCHAR(50) NOT NULL,
    party2_id BIGINT UNSIGNED NOT NULL,
    party2_grant_id BIGINT UNSIGNED NULL,
    party2_claim_id BIGINT UNSIGNED NULL,
    party2_percentage DECIMAL(7,4) NULL,
    
    -- Conflict details
    total_percentage DECIMAL(10,4) NULL COMMENT 'Total claimed percentage',
    overlap_percentage DECIMAL(7,4) NULL,
    detection_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    detection_source VARCHAR(100) NULL,
    
    -- Resolution
    status_id INT NOT NULL COMMENT 'FK to resource_db.conflict_status',
    severity_id INT NOT NULL COMMENT 'FK to resource_db.severity_level',
    assigned_to BIGINT UNSIGNED NULL,
    resolution_date DATETIME NULL,
    resolution_method_id INT NULL COMMENT 'FK to resource_db.resolution_method',
    resolution_details TEXT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_conflict_type FOREIGN KEY (conflict_type_id) REFERENCES resource_db.rights_conflict_type(id),
    CONSTRAINT fk_rights_conflict_rights_type FOREIGN KEY (rights_type_id) REFERENCES resource_db.rights_type(id),
    CONSTRAINT fk_rights_conflict_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_rights_conflict_grant1 FOREIGN KEY (party1_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_conflict_claim1 FOREIGN KEY (party1_claim_id) REFERENCES rights_claim(id),
    CONSTRAINT fk_rights_conflict_grant2 FOREIGN KEY (party2_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_conflict_claim2 FOREIGN KEY (party2_claim_id) REFERENCES rights_claim(id),
    CONSTRAINT fk_rights_conflict_status FOREIGN KEY (status_id) REFERENCES resource_db.conflict_status(id),
    CONSTRAINT fk_rights_conflict_severity FOREIGN KEY (severity_id) REFERENCES resource_db.severity_level(id),
    CONSTRAINT fk_rights_conflict_assigned FOREIGN KEY (assigned_to) REFERENCES user(id),
    CONSTRAINT fk_rights_conflict_resolution FOREIGN KEY (resolution_method_id) REFERENCES resource_db.resolution_method(id),
    CONSTRAINT fk_rights_conflict_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rights_conflict_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_conflict_asset (asset_type, asset_id),
    INDEX idx_conflict_type (conflict_type_id),
    INDEX idx_conflict_parties (party1_type, party1_id, party2_type, party2_id),
    INDEX idx_conflict_status (status_id),
    INDEX idx_conflict_severity (severity_id),
    INDEX idx_conflict_detection (detection_date),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- TIME-BASED RIGHTS & CHAIN OF TITLE
-- =============================================

-- rights_period - Time-based rights windows
CREATE TABLE rights_period (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    rights_grant_id BIGINT UNSIGNED NOT NULL,
    period_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_period_type',
    
    -- Period definition
    period_name VARCHAR(200) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- Rights during this period
    rights_percentage DECIMAL(7,4) NOT NULL DEFAULT 100.0000,
    royalty_rate DECIMAL(7,4) NULL,
    
    -- Exclusivity
    exclusive_period BOOLEAN DEFAULT FALSE,
    holdback_period BOOLEAN DEFAULT FALSE,
    
    -- Usage restrictions
    max_uses_in_period INT NULL,
    blackout_dates JSON NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_period_grant FOREIGN KEY (rights_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_period_type FOREIGN KEY (period_type_id) REFERENCES resource_db.rights_period_type(id),
    CONSTRAINT fk_rights_period_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_rights_period_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_rights_period_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_rights_period_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_period_dates CHECK (end_date IS NULL OR end_date >= start_date),
    CONSTRAINT chk_period_percentage CHECK (rights_percentage > 0 AND rights_percentage <= 100),
    
    -- Indexes
    INDEX idx_period_grant (rights_grant_id),
    INDEX idx_period_type (period_type_id),
    INDEX idx_period_dates (start_date, end_date),
    INDEX idx_period_exclusive (exclusive_period),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- rights_chain_of_title - Complete ownership history
CREATE TABLE rights_chain_of_title (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    asset_type VARCHAR(50) NOT NULL,
    asset_id BIGINT UNSIGNED NOT NULL,
    
    -- Chain position
    sequence_number INT NOT NULL,
    
    -- Title holder at this point
    title_holder_type VARCHAR(50) NOT NULL,
    title_holder_id BIGINT UNSIGNED NOT NULL,
    
    -- How title was acquired
    acquisition_type_id INT NOT NULL COMMENT 'FK to resource_db.title_acquisition_type',
    acquisition_date DATE NOT NULL,
    
    -- From whom
    prior_holder_type VARCHAR(50) NULL,
    prior_holder_id BIGINT UNSIGNED NULL,
    
    -- Supporting documentation
    document_type_id INT NOT NULL COMMENT 'FK to resource_db.chain_document_type',
    document_reference VARCHAR(500) NULL,
    document_date DATE NULL,
    document_file_id BIGINT UNSIGNED NULL,
    
    -- Rights scope
    rights_percentage DECIMAL(7,4) NOT NULL,
    territory_id INT NULL,
    rights_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_type',
    
    -- Verification
    is_verified BOOLEAN DEFAULT FALSE,
    verified_date DATETIME NULL,
    verified_by BIGINT UNSIGNED NULL,
    verification_notes TEXT NULL,
    
    -- Gaps or issues
    has_gap BOOLEAN DEFAULT FALSE,
    gap_description TEXT NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason TEXT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    CONSTRAINT fk_chain_acquisition_type FOREIGN KEY (acquisition_type_id) REFERENCES resource_db.title_acquisition_type(id),
    CONSTRAINT fk_chain_document_type FOREIGN KEY (document_type_id) REFERENCES resource_db.chain_document_type(id),
    CONSTRAINT fk_chain_document_file FOREIGN KEY (document_file_id) REFERENCES file(id),
    CONSTRAINT fk_chain_territory FOREIGN KEY (territory_id) REFERENCES resource_db.territory(id),
    CONSTRAINT fk_chain_rights_type FOREIGN KEY (rights_type_id) REFERENCES resource_db.rights_type(id),
    CONSTRAINT fk_chain_verified_by FOREIGN KEY (verified_by) REFERENCES user(id),
    CONSTRAINT fk_chain_deleted_by FOREIGN KEY (deleted_by) REFERENCES user(id),
    CONSTRAINT fk_chain_archived_by FOREIGN KEY (archived_by) REFERENCES user(id),
    CONSTRAINT fk_chain_created_by FOREIGN KEY (created_by) REFERENCES user(id),
    CONSTRAINT fk_chain_updated_by FOREIGN KEY (updated_by) REFERENCES user(id),
    
    -- Constraints
    CONSTRAINT chk_chain_percentage CHECK (rights_percentage > 0 AND rights_percentage <= 100),
    
    -- Indexes
    UNIQUE KEY uk_chain_sequence (asset_type, asset_id, sequence_number),
    INDEX idx_chain_asset (asset_type, asset_id),
    INDEX idx_chain_holder (title_holder_type, title_holder_id),
    INDEX idx_chain_acquisition (acquisition_date),
    INDEX idx_chain_verified (is_verified),
    INDEX idx_chain_gap (has_gap),
    INDEX idx_active_deleted (is_active, is_deleted),
    INDEX idx_archived_at (archived_at),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- rights_audit - Complete audit trail for rights
CREATE TABLE rights_audit (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    audit_type_id INT NOT NULL COMMENT 'FK to resource_db.rights_audit_type',
    
    -- What was audited
    entity_type VARCHAR(50) NOT NULL,
    entity_id BIGINT UNSIGNED NOT NULL,
    
    -- Action taken
    action_type_id INT NOT NULL COMMENT 'FK to resource_db.audit_action_type',
    action_description TEXT NOT NULL,
    
    -- Before/after states
    previous_state JSON NULL,
    new_state JSON NULL,
    changed_fields JSON NULL,
    
    -- Context
    related_grant_id BIGINT UNSIGNED NULL,
    related_transfer_id BIGINT UNSIGNED NULL,
    related_claim_id BIGINT UNSIGNED NULL,
    
    -- User and system info
    user_id BIGINT UNSIGNED NOT NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    session_id VARCHAR(128) NULL,
    
    -- Security columns
    row_hash VARCHAR(64) NULL,
    
    -- Audit columns
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Keys
    CONSTRAINT fk_rights_audit_type FOREIGN KEY (audit_type_id) REFERENCES resource_db.rights_audit_type(id),
    CONSTRAINT fk_rights_audit_action FOREIGN KEY (action_type_id) REFERENCES resource_db.audit_action_type(id),
    CONSTRAINT fk_rights_audit_grant FOREIGN KEY (related_grant_id) REFERENCES rights_grant(id),
    CONSTRAINT fk_rights_audit_transfer FOREIGN KEY (related_transfer_id) REFERENCES rights_transfer(id),
    CONSTRAINT fk_rights_audit_claim FOREIGN KEY (related_claim_id) REFERENCES rights_claim(id),
    CONSTRAINT fk_rights_audit_user FOREIGN KEY (user_id) REFERENCES user(id),
    
    -- Indexes
    INDEX idx_audit_entity (entity_type, entity_id),
    INDEX idx_audit_type (audit_type_id),
    INDEX idx_audit_action (action_type_id),
    INDEX idx_audit_user (user_id),
    INDEX idx_audit_created (created_at),
    INDEX idx_audit_grant (related_grant_id),
    INDEX idx_row_hash (row_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- RIGHTS CALCULATION PROCEDURES
-- =============================================

DELIMITER $$

-- Calculate effective rights for an asset at a point in time
CREATE PROCEDURE sp_calculate_effective_rights(
    IN p_asset_type VARCHAR(50),
    IN p_asset_id BIGINT UNSIGNED,
    IN p_territory_id INT,
    IN p_as_of_date DATE
)
BEGIN
    -- Create temporary table for results
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_effective_rights (
        rights_holder_type VARCHAR(50),
        rights_holder_id BIGINT UNSIGNED,
        rights_holder_name VARCHAR(500),
        rights_type VARCHAR(100),
        rights_percentage DECIMAL(7,4),
        is_exclusive BOOLEAN,
        can_sublicense BOOLEAN,
        can_transfer BOOLEAN,
        grant_id BIGINT UNSIGNED,
        start_date DATE,
        end_date DATE,
        has_restrictions BOOLEAN,
        has_reversion BOOLEAN,
        reversion_date DATE
    );
    
    TRUNCATE TABLE temp_effective_rights;
    
    -- Get active rights grants
    INSERT INTO temp_effective_rights
    SELECT 
        rg.grantee_type,
        rg.grantee_id,
        CASE rg.grantee_type
            WHEN 'person' THEN p.full_name
            WHEN 'organization' THEN o.name
            WHEN 'publisher' THEN pub_org.name
            WHEN 'label' THEN l_org.name
        END AS rights_holder_name,
        rt.name AS rights_type,
        CASE 
            WHEN rp.rights_percentage IS NOT NULL THEN rp.rights_percentage
            ELSE 100.0000
        END AS rights_percentage,
        rg.exclusive_rights,
        rg.sublicense_rights,
        rg.transfer_rights,
        rg.id AS grant_id,
        rg.effective_date,
        rg.expiry_date,
        EXISTS(SELECT 1 FROM rights_restriction WHERE rights_grant_id = rg.id AND is_active = TRUE),
        EXISTS(SELECT 1 FROM rights_reversion WHERE rights_grant_id = rg.id AND is_active = TRUE),
        (SELECT MIN(reversion_date) FROM rights_reversion 
         WHERE rights_grant_id = rg.id AND is_active = TRUE AND status_id = 1)
    FROM rights_grant rg
    JOIN resource_db.rights_type rt ON rg.rights_type_id = rt.id
    LEFT JOIN rights_period rp ON rg.id = rp.rights_grant_id 
        AND p_as_of_date BETWEEN rp.start_date AND COALESCE(rp.end_date, '9999-12-31')
        AND rp.is_active = TRUE
    LEFT JOIN territory_rights tr ON rg.id = tr.rights_grant_id
    LEFT JOIN territory_inclusion ti ON tr.id = ti.territory_rights_id AND ti.territory_id = p_territory_id
    LEFT JOIN territory_exclusion te ON tr.id = te.territory_rights_id AND te.territory_id = p_territory_id
    -- Join for names
    LEFT JOIN person p ON rg.grantee_type = 'person' AND rg.grantee_id = p.id
    LEFT JOIN organization o ON rg.grantee_type = 'organization' AND rg.grantee_id = o.id
    LEFT JOIN publisher pub ON rg.grantee_type = 'publisher' AND rg.grantee_id = pub.id
    LEFT JOIN organization pub_org ON pub.organization_id = pub_org.id
    LEFT JOIN label l ON rg.grantee_type = 'label' AND rg.grantee_id = l.id
    LEFT JOIN organization l_org ON l.organization_id = l_org.id
    WHERE rg.asset_type = p_asset_type
        AND rg.asset_id = p_asset_id
        AND rg.effective_date <= p_as_of_date
        AND (rg.expiry_date IS NULL OR rg.expiry_date >= p_as_of_date)
        AND rg.status_id = (SELECT id FROM resource_db.rights_status WHERE code = 'ACTIVE')
        AND rg.is_active = TRUE
        AND (
            -- Worldwide rights
            (tr.is_worldwide = TRUE AND te.territory_id IS NULL)
            -- Or specific territory included
            OR (ti.territory_id = p_territory_id AND te.territory_id IS NULL)
            -- Or territory not excluded
            OR (p_territory_id IS NULL)
        );
    
    -- Check for transferred rights
    UPDATE temp_effective_rights ter
    SET rights_percentage = rights_percentage - COALESCE(
        (SELECT SUM(transfer_percentage) 
         FROM rights_transfer rt
         WHERE rt.original_grant_id = ter.grant_id
            AND rt.effective_date <= p_as_of_date
            AND rt.approval_status_id = (SELECT id FROM resource_db.approval_status WHERE code = 'APPROVED')
            AND rt.is_active = TRUE), 0)
    WHERE EXISTS (
        SELECT 1 FROM rights_transfer rt
        WHERE rt.original_grant_id = ter.grant_id
            AND rt.effective_date <= p_as_of_date
    );
    
    -- Return results
    SELECT * FROM temp_effective_rights
    WHERE rights_percentage > 0
    ORDER BY rights_type, rights_percentage DESC;
    
    DROP TEMPORARY TABLE temp_effective_rights;
END$$

-- Check for rights conflicts
CREATE PROCEDURE sp_check_rights_conflicts(
    IN p_asset_type VARCHAR(50),
    IN p_asset_id BIGINT UNSIGNED,
    IN p_territory_id INT
)
BEGIN
    DECLARE v_conflict_found BOOLEAN DEFAULT FALSE;
    DECLARE v_total_percentage DECIMAL(10,4);
    
    -- Check each rights type for over-allocation
    INSERT INTO rights_conflict (
        conflict_type_id,
        asset_type,
        asset_id,
        rights_type_id,
        territory_id,
        party1_type,
        party1_id,
        party1_grant_id,
        party1_percentage,
        party2_type,
        party2_id,
        party2_grant_id,
        party2_percentage,
        total_percentage,
        overlap_percentage,
        detection_source,
        status_id,
        severity_id,
        created_by
    )
    SELECT 
        (SELECT id FROM resource_db.rights_conflict_type WHERE code = 'OVER_ALLOCATION'),
        p_asset_type,
        p_asset_id,
        rg1.rights_type_id,
        p_territory_id,
        rg1.grantee_type,
        rg1.grantee_id,
        rg1.id,
        100.0000, -- Placeholder, would calculate actual
        rg2.grantee_type,
        rg2.grantee_id,
        rg2.id,
        100.0000, -- Placeholder
        200.0000, -- Placeholder total
        100.0000, -- Overlap
        'sp_check_rights_conflicts',
        (SELECT id FROM resource_db.conflict_status WHERE code = 'UNRESOLVED'),
        (SELECT id FROM resource_db.severity_level WHERE code = 'HIGH'),
        1 -- System user
    FROM rights_grant rg1
    JOIN rights_grant rg2 ON rg1.asset_type = rg2.asset_type 
        AND rg1.asset_id = rg2.asset_id
        AND rg1.rights_type_id = rg2.rights_type_id
        AND rg1.id < rg2.id
    WHERE rg1.asset_type = p_asset_type
        AND rg1.asset_id = p_asset_id
        AND rg1.exclusive_rights = TRUE
        AND rg2.exclusive_rights = TRUE
        AND rg1.status_id = (SELECT id FROM resource_db.rights_status WHERE code = 'ACTIVE')
        AND rg2.status_id = (SELECT id FROM resource_db.rights_status WHERE code = 'ACTIVE')
        AND rg1.is_active = TRUE
        AND rg2.is_active = TRUE
        AND NOT EXISTS (
            SELECT 1 FROM rights_conflict rc
            WHERE rc.asset_type = p_asset_type
                AND rc.asset_id = p_asset_id
                AND rc.party1_grant_id = rg1.id
                AND rc.party2_grant_id = rg2.id
                AND rc.status_id != (SELECT id FROM resource_db.conflict_status WHERE code = 'RESOLVED')
        );
    
    SELECT ROW_COUNT() > 0 INTO v_conflict_found;
    
    SELECT v_conflict_found AS conflicts_detected;
END$$

-- Process rights reversion
CREATE PROCEDURE sp_process_rights_reversion(
    IN p_reversion_id BIGINT UNSIGNED,
    IN p_user_id BIGINT UNSIGNED
)
BEGIN
    DECLARE v_grant_id BIGINT UNSIGNED;
    DECLARE v_reverts_to_type VARCHAR(50);
    DECLARE v_reverts_to_id BIGINT UNSIGNED;
    DECLARE v_reversion_percentage DECIMAL(7,4);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Get reversion details
    SELECT 
        rights_grant_id,
        reverts_to_type,
        reverts_to_id,
        reversion_percentage
    INTO 
        v_grant_id,
        v_reverts_to_type,
        v_reverts_to_id,
        v_reversion_percentage
    FROM rights_reversion
    WHERE id = p_reversion_id
        AND status_id = (SELECT id FROM resource_db.reversion_status WHERE code = 'PENDING');
    
    IF v_grant_id IS NOT NULL THEN
        -- Update original grant
        UPDATE rights_grant
        SET status_id = (SELECT id FROM resource_db.rights_status WHERE code = 'REVERTED'),
            updated_by = p_user_id
        WHERE id = v_grant_id;
        
        -- Create new grant for reverted rights
        INSERT INTO rights_grant (
            grant_type_id,
            grantor_type,
            grantor_id,
            grantee_type,
            grantee_id,
            asset_type,
            asset_id,
            rights_category_id,
            rights_type_id,
            exclusive_rights,
            grant_date,
            effective_date,
            status_id,
            created_by
        )
        SELECT 
            (SELECT id FROM resource_db.rights_grant_type WHERE code = 'REVERSION'),
            grantee_type, -- Old grantee becomes grantor
            grantee_id,
            v_reverts_to_type,
            v_reverts_to_id,
            asset_type,
            asset_id,
            rights_category_id,
            rights_type_id,
            exclusive_rights,
            CURDATE(),
            CURDATE(),
            (SELECT id FROM resource_db.rights_status WHERE code = 'ACTIVE'),
            p_user_id
        FROM rights_grant
        WHERE id = v_grant_id;
        
        -- Update reversion status
        UPDATE rights_reversion
        SET status_id = (SELECT id FROM resource_db.reversion_status WHERE code = 'EXECUTED'),
            executed_date = NOW(),
            executed_by = p_user_id,
            updated_by = p_user_id
        WHERE id = p_reversion_id;
        
        -- Log in audit
        INSERT INTO rights_audit (
            audit_type_id,
            entity_type,
            entity_id,
            action_type_id,
            action_description,
            related_grant_id,
            user_id
        ) VALUES (
            (SELECT id FROM resource_db.rights_audit_type WHERE code = 'REVERSION'),
            'rights_grant',
            v_grant_id,
            (SELECT id FROM resource_db.audit_action_type WHERE code = 'EXECUTE_REVERSION'),
            CONCAT('Executed reversion of rights grant ', v_grant_id),
            v_grant_id,
            p_user_id
        );
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

-- =============================================
-- RIGHTS VIEWS
-- =============================================

-- Active rights summary view
CREATE OR REPLACE VIEW vw_active_rights_summary AS
SELECT 
    rg.id AS grant_id,
    rg.asset_type,
    rg.asset_id,
    CASE rg.asset_type
        WHEN 'work' THEN w.title
        WHEN 'recording' THEN r.title
        WHEN 'release' THEN rel.title
    END AS asset_name,
    rg.grantee_type,
    rg.grantee_id,
    CASE rg.grantee_type
        WHEN 'person' THEN p.full_name
        WHEN 'organization' THEN o.name
        WHEN 'publisher' THEN pub_org.name
        WHEN 'label' THEN l_org.name
    END AS rights_holder,
    rc.name AS rights_category,
    rt.name AS rights_type,
    rg.exclusive_rights,
    rg.sublicense_rights,
    rg.transfer_rights,
    rg.effective_date,
    rg.expiry_date,
    CASE 
        WHEN rg.in_perpetuity THEN 'Perpetual'
        WHEN rg.expiry_date IS NULL THEN 'Open-ended'
        ELSE CONCAT(DATEDIFF(rg.expiry_date, CURDATE()), ' days remaining')
    END AS term_status,
    rs.name AS status,
    rg.is_verified
FROM rights_grant rg
JOIN resource_db.rights_category rc ON rg.rights_category_id = rc.id
JOIN resource_db.rights_type rt ON rg.rights_type_id = rt.id
JOIN resource_db.rights_status rs ON rg.status_id = rs.id
-- Asset joins
LEFT JOIN work w ON rg.asset_type = 'work' AND rg.asset_id = w.id
LEFT JOIN recording r ON rg.asset_type = 'recording' AND rg.asset_id = r.id
LEFT JOIN release rel ON rg.asset_type = 'release' AND rg.asset_id = rel.id
-- Rights holder joins
LEFT JOIN person p ON rg.grantee_type = 'person' AND rg.grantee_id = p.id
LEFT JOIN organization o ON rg.grantee_type = 'organization' AND rg.grantee_id = o.id
LEFT JOIN publisher pub ON rg.grantee_type = 'publisher' AND rg.grantee_id = pub.id
LEFT JOIN organization pub_org ON pub.organization_id = pub_org.id
LEFT JOIN label l ON rg.grantee_type = 'label' AND rg.grantee_id = l.id
LEFT JOIN organization l_org ON l.organization_id = l_org.id
WHERE rg.is_active = TRUE
    AND rs.code = 'ACTIVE';

-- Pending reversions view
CREATE OR REPLACE VIEW vw_pending_reversions AS
SELECT 
    rr.id AS reversion_id,
    rg.asset_type,
    rg.asset_id,
    CASE rg.asset_type
        WHEN 'work' THEN w.title
        WHEN 'recording' THEN r.title
        WHEN 'release' THEN rel.title
    END AS asset_name,
    rt.name AS reversion_type,
    rr.reversion_date,
    DATEDIFF(rr.reversion_date, CURDATE()) AS days_until_reversion,
    rr.reversion_percentage,
    rr.notice_required,
    rr.notice_deadline,
    CASE 
        WHEN rr.notice_required AND rr.notice_sent_date IS NULL THEN 'Notice Required'
        WHEN rr.notice_sent_date IS NOT NULL THEN 'Notice Sent'
        ELSE 'No Notice Required'
    END AS notice_status,
    CASE rr.reverts_to_type
        WHEN 'person' THEN p.full_name
        WHEN 'organization' THEN o.name
    END AS reverts_to,
    rs.name AS status
FROM rights_reversion rr
JOIN rights_grant rg ON rr.rights_grant_id = rg.id
JOIN resource_db.reversion_type rt ON rr.reversion_type_id = rt.id
JOIN resource_db.reversion_status rs ON rr.status_id = rs.id
-- Asset joins
LEFT JOIN work w ON rg.asset_type = 'work' AND rg.asset_id = w.id
LEFT JOIN recording r ON rg.asset_type = 'recording' AND rg.asset_id = r.id
LEFT JOIN release rel ON rg.asset_type = 'release' AND rg.asset_id = rel.id
-- Reverts to joins
LEFT JOIN person p ON rr.reverts_to_type = 'person' AND rr.reverts_to_id = p.id
LEFT JOIN organization o ON rr.reverts_to_type = 'organization' AND rr.reverts_to_id = o.id
WHERE rr.is_active = TRUE
    AND rs.code IN ('PENDING', 'NOTICE_SENT')
    AND rr.reversion_date >= CURDATE()
ORDER BY rr.reversion_date ASC;

-- Rights conflict dashboard
CREATE OR REPLACE VIEW vw_rights_conflicts_dashboard AS
SELECT 
    rc.id AS conflict_id,
    rct.name AS conflict_type,
    rc.asset_type,
    rc.asset_id,
    CASE rc.asset_type
        WHEN 'work' THEN w.title
        WHEN 'recording' THEN r.title
        WHEN 'release' THEN rel.title
    END AS asset_name,
    rt.name AS rights_type,
    t.name AS territory,
    rc.total_percentage,
    rc.overlap_percentage,
    cs.name AS status,
    sl.name AS severity,
    rc.detection_date,
    TIMESTAMPDIFF(DAY, rc.detection_date, NOW()) AS days_open,
    u.username AS assigned_to_username
FROM rights_conflict rc
JOIN resource_db.rights_conflict_type rct ON rc.conflict_type_id = rct.id
JOIN resource_db.rights_type rt ON rc.rights_type_id = rt.id
JOIN resource_db.conflict_status cs ON rc.status_id = cs.id
JOIN resource_db.severity_level sl ON rc.severity_id = sl.id
LEFT JOIN resource_db.territory t ON rc.territory_id = t.id
LEFT JOIN user u ON rc.assigned_to = u.id
-- Asset joins
LEFT JOIN work w ON rc.asset_type = 'work' AND rc.asset_id = w.id
LEFT JOIN recording r ON rc.asset_type = 'recording' AND rc.asset_id = r.id
LEFT JOIN release rel ON rc.asset_type = 'release' AND rc.asset_id = rel.id
WHERE cs.code != 'RESOLVED'
ORDER BY sl.priority DESC, rc.detection_date ASC;

-- =============================================
-- RIGHTS VALIDATION TRIGGERS
-- =============================================

DELIMITER $$

-- Trigger to log rights grant changes
CREATE TRIGGER tr_log_rights_grant_changes
AFTER UPDATE ON rights_grant
FOR EACH ROW
BEGIN
    -- Log significant changes
    IF NEW.grantee_type != OLD.grantee_type OR
       NEW.grantee_id != OLD.grantee_id OR
       NEW.exclusive_rights != OLD.exclusive_rights OR
       NEW.status_id != OLD.status_id OR
       NEW.expiry_date != OLD.expiry_date THEN
        
        INSERT INTO rights_grant_history (
            rights_grant_id,
            change_type_id,
            field_name,
            old_value,
            new_value,
            change_reason,
            effective_date,
            created_by
        ) VALUES (
            NEW.id,
            (SELECT id FROM resource_db.rights_change_type WHERE code = 'MODIFICATION'),
            CASE 
                WHEN NEW.grantee_type != OLD.grantee_type THEN 'grantee_type'
                WHEN NEW.grantee_id != OLD.grantee_id THEN 'grantee_id'
                WHEN NEW.exclusive_rights != OLD.exclusive_rights THEN 'exclusive_rights'
                WHEN NEW.status_id != OLD.status_id THEN 'status_id'
                WHEN NEW.expiry_date != OLD.expiry_date THEN 'expiry_date'
            END,
            CASE 
                WHEN NEW.grantee_type != OLD.grantee_type THEN OLD.grantee_type
                WHEN NEW.grantee_id != OLD.grantee_id THEN CAST(OLD.grantee_id AS CHAR)
                WHEN NEW.exclusive_rights != OLD.exclusive_rights THEN CAST(OLD.exclusive_rights AS CHAR)
                WHEN NEW.status_id != OLD.status_id THEN CAST(OLD.status_id AS CHAR)
                WHEN NEW.expiry_date != OLD.expiry_date THEN CAST(OLD.expiry_date AS CHAR)
            END,
            CASE 
                WHEN NEW.grantee_type != OLD.grantee_type THEN NEW.grantee_type
                WHEN NEW.grantee_id != OLD.grantee_id THEN CAST(NEW.grantee_id AS CHAR)
                WHEN NEW.exclusive_rights != OLD.exclusive_rights THEN CAST(NEW.exclusive_rights AS CHAR)
                WHEN NEW.status_id != OLD.status_id THEN CAST(NEW.status_id AS CHAR)
                WHEN NEW.expiry_date != OLD.expiry_date THEN CAST(NEW.expiry_date AS CHAR)
            END,
            'System update',
            CURDATE(),
            COALESCE(NEW.updated_by, NEW.created_by)
        );
    END IF;
    
    -- Log in audit table
    INSERT INTO rights_audit (
        audit_type_id,
        entity_type,
        entity_id,
        action_type_id,
        action_description,
        previous_state,
        new_state,
        related_grant_id,
        user_id
    ) VALUES (
        (SELECT id FROM resource_db.rights_audit_type WHERE code = 'GRANT_UPDATE'),
        'rights_grant',
        NEW.id,
        (SELECT id FROM resource_db.audit_action_type WHERE code = 'UPDATE'),
        'Rights grant updated',
        JSON_OBJECT(
            'status_id', OLD.status_id,
            'exclusive_rights', OLD.exclusive_rights,
            'expiry_date', OLD.expiry_date
        ),
        JSON_OBJECT(
            'status_id', NEW.status_id,
            'exclusive_rights', NEW.exclusive_rights,
            'expiry_date', NEW.expiry_date
        ),
        NEW.id,
        COALESCE(NEW.updated_by, NEW.created_by)
    );
END$$

-- Trigger to check for reversion deadlines
CREATE TRIGGER tr_check_reversion_notice
BEFORE UPDATE ON rights_reversion
FOR EACH ROW
BEGIN
    -- Check if notice deadline is approaching
    IF NEW.notice_required = TRUE AND 
       NEW.notice_sent_date IS NULL AND
       NEW.notice_deadline IS NOT NULL AND
       NEW.notice_deadline <= DATE_ADD(CURDATE(), INTERVAL 30 DAY) THEN
        
        -- This would typically trigger a notification
        -- For now, we'll just ensure the status reflects this
        IF NEW.status_id = (SELECT id FROM resource_db.reversion_status WHERE code = 'PENDING') THEN
            SET NEW.status_id = (SELECT id FROM resource_db.reversion_status WHERE code = 'NOTICE_DUE');
        END IF;
    END IF;
END$$

DELIMITER ;

-- =============================================
-- PERFORMANCE INDEXES
-- =============================================

-- Additional composite indexes for common queries
CREATE INDEX idx_rights_grant_lookup ON rights_grant(asset_type, asset_id, status_id, is_active);
CREATE INDEX idx_rights_grant_dates ON rights_grant(effective_date, expiry_date, status_id);
CREATE INDEX idx_territory_rights_lookup ON territory_rights(rights_grant_id, is_worldwide);
CREATE INDEX idx_rights_claim_lookup ON rights_claim(asset_type, asset_id, status_id);
CREATE INDEX idx_chain_of_title_lookup ON rights_chain_of_title(asset_type, asset_id, sequence_number);

-- =============================================================================
-- Section 6: CWR
-- Supports CWR versions 2.1, 2.1r7, 2.2, 3.0, and 3.1
-- =============================================================================

-- -----------------------------------------------------------------------------
-- CWR TRANSMISSION MASTER TABLE
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_transmission (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Transmission Identification
    transmission_code VARCHAR(50) NOT NULL UNIQUE,
    sender_type_id BIGINT UNSIGNED NOT NULL, -- lookup: society, publisher, administrator
    sender_code VARCHAR(10) NOT NULL, -- CAE/IPI sender code
    sender_name VARCHAR(255) NOT NULL,
    receiver_code VARCHAR(10) NOT NULL,
    receiver_name VARCHAR(255) NOT NULL,
    
    -- Version and Type
    cwr_version_id BIGINT UNSIGNED NOT NULL, -- lookup: 2.1, 2.1r7, 2.2, 3.0, 3.1
    submission_type_id BIGINT UNSIGNED NOT NULL, -- lookup: new, update, delete
    character_set_id BIGINT UNSIGNED NOT NULL, -- lookup: ASCII, UTF-8, etc.
    
    -- Dates
    creation_date DATE NOT NULL,
    transmission_date DATE,
    acknowledgment_due_date DATE,
    acknowledgment_received_date DATE,
    
    -- Statistics
    total_records INT UNSIGNED DEFAULT 0,
    total_works INT UNSIGNED DEFAULT 0,
    total_agreements INT UNSIGNED DEFAULT 0,
    total_territories INT UNSIGNED DEFAULT 0,
    
    -- File Information
    filename VARCHAR(255) NOT NULL,
    file_size BIGINT UNSIGNED,
    file_hash VARCHAR(64),
    
    -- Processing Status
    generation_status_id BIGINT UNSIGNED NOT NULL, -- lookup: pending, processing, completed, failed
    validation_status_id BIGINT UNSIGNED NOT NULL, -- lookup: pending, passed, failed
    delivery_status_id BIGINT UNSIGNED NOT NULL, -- lookup: pending, sent, delivered, failed
    acknowledgment_status_id BIGINT UNSIGNED NOT NULL, -- lookup: pending, received, processed
    
    -- Metadata
    notes TEXT,
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at TIMESTAMP NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason VARCHAR(500) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (sender_type_id) REFERENCES lu_cwr_sender_type(id),
    FOREIGN KEY (cwr_version_id) REFERENCES lu_cwr_version(id),
    FOREIGN KEY (submission_type_id) REFERENCES lu_cwr_submission_type(id),
    FOREIGN KEY (character_set_id) REFERENCES lu_character_set(id),
    FOREIGN KEY (generation_status_id) REFERENCES lu_processing_status(id),
    FOREIGN KEY (validation_status_id) REFERENCES lu_validation_status(id),
    FOREIGN KEY (delivery_status_id) REFERENCES lu_delivery_status(id),
    FOREIGN KEY (acknowledgment_status_id) REFERENCES lu_acknowledgment_status(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (archived_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_code (transmission_code),
    INDEX idx_sender_code (sender_code),
    INDEX idx_receiver_code (receiver_code),
    INDEX idx_transmission_date (transmission_date),
    INDEX idx_status (generation_status_id, validation_status_id, delivery_status_id),
    INDEX idx_active_deleted (is_active, is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR TRANSMISSION FILE STORAGE
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_transmission_file (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- File Details
    file_type_id BIGINT UNSIGNED NOT NULL, -- lookup: original, validated, delivered, acknowledgment
    file_path VARCHAR(500) NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    file_size BIGINT UNSIGNED NOT NULL,
    file_hash VARCHAR(64) NOT NULL,
    mime_type VARCHAR(100) DEFAULT 'text/plain',
    
    -- Storage
    storage_location_id BIGINT UNSIGNED NOT NULL, -- lookup: local, s3, azure, etc.
    storage_bucket VARCHAR(255),
    storage_key VARCHAR(500),
    
    -- Compression
    is_compressed BOOLEAN DEFAULT FALSE,
    compression_type_id BIGINT UNSIGNED NULL, -- lookup: gzip, zip, etc.
    compressed_size BIGINT UNSIGNED NULL,
    
    -- Security
    is_encrypted BOOLEAN DEFAULT FALSE,
    encryption_algorithm VARCHAR(50),
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (file_type_id) REFERENCES lu_cwr_file_type(id),
    FOREIGN KEY (storage_location_id) REFERENCES lu_storage_location(id),
    FOREIGN KEY (compression_type_id) REFERENCES lu_compression_type(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_file_type (file_type_id),
    INDEX idx_storage (storage_location_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR HDR (HEADER) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_hdr_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'HDR',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Header Fields (All Versions)
    sender_type CHAR(2) NOT NULL,
    sender_id VARCHAR(10) NOT NULL,
    sender_name VARCHAR(45) NOT NULL,
    edi_standard_version_n VARCHAR(5) NOT NULL,
    creation_date CHAR(8) NOT NULL, -- YYYYMMDD
    creation_time CHAR(6) NOT NULL, -- HHMMSS
    transmission_date CHAR(8) NOT NULL,
    
    -- Version Specific Fields
    character_set VARCHAR(15), -- CWR 2.1+
    
    -- CWR 3.0+ Fields
    cwr_version VARCHAR(5), -- e.g., "03.00"
    cwr_revision VARCHAR(5), -- e.g., "00"
    software_package VARCHAR(30),
    software_package_version VARCHAR(10),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_creation_date (creation_date),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR GRH (GROUP HEADER) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_grh_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'GRH',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Group Header Fields
    group_id INT UNSIGNED NOT NULL,
    transaction_type CHAR(3) NOT NULL, -- NWR, REV, ISW, EXC
    version_number_for_this_transaction VARCHAR(5),
    batch_request_id VARCHAR(10),
    
    -- Processing
    submission_distribution_n VARCHAR(10),
    
    -- CWR 3.0+ Fields
    group_type VARCHAR(10),
    priority_flag CHAR(1),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_group_id (group_id),
    INDEX idx_transaction_type (transaction_type),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR NWR (NEW WORKS REGISTRATION) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_nwr_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    group_id INT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'NWR',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Work Identification
    title VARCHAR(60) NOT NULL,
    submitter_work_n VARCHAR(14) NOT NULL,
    iswc VARCHAR(11), -- T-123.456.789-C
    copyright_date CHAR(8),
    copyright_number VARCHAR(12),
    musical_work_distribution_category CHAR(3),
    
    -- Work Details
    duration TIME, -- HHMMSS
    recorded_indicator CHAR(1), -- Y/N/U
    text_music_relationship CHAR(3),
    composite_type CHAR(3),
    version_type CHAR(3),
    excerpt_type CHAR(3),
    music_arrangement CHAR(3),
    lyric_adaptation CHAR(3),
    
    -- Additional Information
    contact_name VARCHAR(30),
    contact_id VARCHAR(10),
    cwr_work_type CHAR(2), -- CWR 2.1+
    
    -- CWR 2.2+ Fields
    grand_rights_indicator CHAR(1),
    composite_component_count INT,
    date_of_publication_of_printed_edition CHAR(8),
    
    -- CWR 3.0+ Fields
    exceptional_clause CHAR(1),
    opus_number VARCHAR(25),
    catalogue_number VARCHAR(25),
    priority_flag CHAR(1),
    
    -- CWR 3.1+ Fields
    work_for_hire_indicator CHAR(1),
    income_participant_indicator CHAR(1),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_group_id (group_id),
    INDEX idx_submitter_work_n (submitter_work_n),
    INDEX idx_iswc (iswc),
    INDEX idx_title (title),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR SPU (PUBLISHER FOR WRITER) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_spu_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'SPU',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Publisher Chain
    publisher_sequence_n INT UNSIGNED NOT NULL,
    interested_party_n VARCHAR(13) NOT NULL,
    publisher_name VARCHAR(45) NOT NULL,
    publisher_unknown_indicator CHAR(1),
    publisher_type CHAR(2),
    publisher_cae_ipi_name_n VARCHAR(11),
    publisher_cae_ipi_base_n VARCHAR(13), -- CWR 3.0+
    
    -- Chain Details
    chain_publisher_sequence_n INT UNSIGNED,
    original_publisher_sequence_n INT UNSIGNED,
    
    -- Agreement
    agreement_n VARCHAR(14),
    agreement_type CHAR(2),
    
    -- Shares
    pr_ownership_share DECIMAL(5,2),
    mr_ownership_share DECIMAL(5,2),
    sr_ownership_share DECIMAL(5,2),
    
    -- Special Agreements
    special_agreements_indicator CHAR(1),
    sales_manufacture_clause CHAR(1),
    
    -- CWR 2.2+ Fields
    first_recording_refusal CHAR(1),
    
    -- CWR 3.0+ Fields
    publisher_ipi_name_n VARCHAR(11),
    publisher_ipi_base_n VARCHAR(13),
    international_standard_agreement_code VARCHAR(14),
    society_assigned_agreement_n VARCHAR(14),
    
    -- CWR 3.1+ Fields
    rights_controller_indicator CHAR(1),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_interested_party_n (interested_party_n),
    INDEX idx_publisher_sequence (publisher_sequence_n),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR SPT (PUBLISHER TERRITORY) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_spt_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    spu_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'SPT',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Territory Information
    tis_n INT UNSIGNED NOT NULL,
    territory_sequence_n INT UNSIGNED NOT NULL,
    inclusion_exclusion_indicator CHAR(1), -- I/E
    tis_territory_code VARCHAR(4), -- Numeric TIS code
    
    -- Shares by Territory
    pr_collection_share DECIMAL(5,2),
    mr_collection_share DECIMAL(5,2),
    sr_collection_share DECIMAL(5,2),
    
    -- Territory Indicators
    shares_change CHAR(1),
    sequence_n_of_publisher_to_get_reversionary_rights INT UNSIGNED,
    
    -- CWR 3.0+ Fields
    pending_application_indicator CHAR(1),
    territory_application_status CHAR(1),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (spu_id) REFERENCES cwr_spu_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_spu_id (spu_id),
    INDEX idx_territory_code (tis_territory_code),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR SWR (WRITER RECORD) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_swr_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'SWR',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Writer Information
    interested_party_n VARCHAR(13) NOT NULL,
    writer_last_name VARCHAR(45) NOT NULL,
    writer_first_name VARCHAR(30),
    writer_unknown_indicator CHAR(1),
    writer_designation_code CHAR(2),
    writer_cae_ipi_name_n VARCHAR(11),
    writer_cae_ipi_base_n VARCHAR(13), -- CWR 3.0+
    
    -- Shares
    pr_ownership_share DECIMAL(5,2),
    mr_ownership_share DECIMAL(5,2),
    sr_ownership_share DECIMAL(5,2),
    
    -- Reversionary Rights
    reversionary_indicator CHAR(1),
    first_recording_refusal CHAR(1),
    
    -- Additional Information
    work_for_hire CHAR(1),
    
    -- CWR 2.2+ Fields
    writer_ipi_name_n VARCHAR(11),
    
    -- CWR 3.0+ Fields
    writer_ipi_base_n VARCHAR(13),
    personal_number VARCHAR(20),
    
    -- CWR 3.1+ Fields
    income_participant_indicator CHAR(1),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_interested_party_n (interested_party_n),
    INDEX idx_writer_name (writer_last_name, writer_first_name),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR PWR (PUBLISHER FOR WRITER) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_pwr_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    swr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'PWR',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Publisher Chain
    publisher_sequence_n INT UNSIGNED NOT NULL,
    interested_party_n VARCHAR(13) NOT NULL,
    publisher_name VARCHAR(45) NOT NULL,
    publisher_unknown_indicator CHAR(1),
    publisher_cae_ipi_name_n VARCHAR(11),
    
    -- Chain References
    chain_publisher_sequence_n INT UNSIGNED,
    original_publisher_sequence_n INT UNSIGNED,
    
    -- Agreement
    agreement_n VARCHAR(14),
    society_assigned_agreement_n VARCHAR(14), -- CWR 3.0+
    
    -- CWR 3.0+ Fields
    submitter_agreement_n VARCHAR(14),
    international_standard_agreement_code VARCHAR(14),
    agreement_type CHAR(2),
    agreement_start_date CHAR(8),
    agreement_end_date CHAR(8),
    retention_end_date CHAR(8),
    prior_royalty_status CHAR(1),
    prior_royalty_start_date CHAR(8),
    post_term_collection_status CHAR(1),
    post_term_collection_end_date CHAR(8),
    
    -- CWR 3.1+ Fields
    rights_controller_indicator CHAR(1),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (swr_id) REFERENCES cwr_swr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_swr_id (swr_id),
    INDEX idx_interested_party_n (interested_party_n),
    INDEX idx_publisher_sequence (publisher_sequence_n),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR OPU (OTHER PUBLISHER) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_opu_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'OPU',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Publisher Information
    publisher_sequence_n INT UNSIGNED NOT NULL,
    interested_party_n VARCHAR(13) NOT NULL,
    publisher_name VARCHAR(45) NOT NULL,
    publisher_unknown_indicator CHAR(1),
    publisher_cae_ipi_name_n VARCHAR(11),
    publisher_cae_ipi_base_n VARCHAR(13), -- CWR 3.0+
    
    -- Shares
    pr_ownership_share DECIMAL(5,2),
    mr_ownership_share DECIMAL(5,2),
    sr_ownership_share DECIMAL(5,2),
    
    -- CWR 3.0+ Fields
    publisher_ipi_name_n VARCHAR(11),
    publisher_ipi_base_n VARCHAR(13),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_interested_party_n (interested_party_n),
    INDEX idx_publisher_sequence (publisher_sequence_n),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR ALT (ALTERNATE TITLE) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_alt_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'ALT',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Alternate Title Information
    alternate_title VARCHAR(60) NOT NULL,
    alternate_title_type CHAR(2) NOT NULL,
    language_code CHAR(2),
    
    -- CWR 3.0+ Fields
    at_sequence_n INT UNSIGNED,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_alternate_title (alternate_title),
    INDEX idx_title_type (alternate_title_type),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR PER (PERFORMING ARTIST) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_per_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'PER',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Performing Artist Information
    performing_artist_last_name VARCHAR(45) NOT NULL,
    performing_artist_first_name VARCHAR(30),
    performing_artist_cae_ipi_name_n VARCHAR(11),
    performing_artist_ipi_base_n VARCHAR(13), -- CWR 3.0+
    
    -- CWR 2.2+ Enhanced Fields
    performing_artist_type CHAR(2),
    performing_artist_role CHAR(2),
    
    -- CWR 3.0+ Fields
    performing_artist_sequence_n INT UNSIGNED,
    performance_language CHAR(2),
    performance_dialect CHAR(3),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_artist_name (performing_artist_last_name, performing_artist_first_name),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR REC (RECORDING) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_rec_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'REC',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Recording Information
    release_date CHAR(8),
    release_duration TIME, -- HHMMSS
    album_title VARCHAR(60),
    album_label VARCHAR(60),
    catalog_n VARCHAR(18),
    ean_upc VARCHAR(13),
    isrc VARCHAR(12),
    
    -- Additional Information
    recording_format CHAR(1),
    recording_technique CHAR(1),
    media_type CHAR(3),
    
    -- CWR 3.0+ Fields
    recording_title VARCHAR(60),
    recording_version VARCHAR(60),
    recording_time TIME,
    recording_key_signature VARCHAR(3),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_isrc (isrc),
    INDEX idx_release_date (release_date),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR ORN (ORIGINAL WORK IN ARRANGEMENT) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_orn_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'ORN',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Original Work Information
    title VARCHAR(60) NOT NULL,
    submitter_work_n VARCHAR(14),
    iswc VARCHAR(11),
    language_code CHAR(2),
    writer_1_last_name VARCHAR(45),
    writer_1_first_name VARCHAR(30),
    writer_1_cae_ipi_name_n VARCHAR(11),
    writer_2_last_name VARCHAR(45),
    writer_2_first_name VARCHAR(30),
    writer_2_cae_ipi_name_n VARCHAR(11),
    publisher_1_name VARCHAR(45),
    publisher_1_cae_ipi_name_n VARCHAR(11),
    source VARCHAR(60),
    percentage_of_arrangement DECIMAL(5,2),
    
    -- CWR 3.0+ Fields
    library VARCHAR(60),
    cd_identifier VARCHAR(15),
    record_label VARCHAR(60),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_title (title),
    INDEX idx_iswc (iswc),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR INS (INSTRUMENTATION) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_ins_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'INS',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Instrumentation Information
    instrument_code CHAR(3) NOT NULL,
    number_of_players INT UNSIGNED,
    
    -- CWR 3.0+ Fields
    instrument_description VARCHAR(50),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_instrument_code (instrument_code),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR IND (INSTRUMENTATION DETAIL) RECORDS - CWR 2.2+
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_ind_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    ins_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'IND',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Instrumentation Detail
    instrument_type CHAR(1), -- S=Standard, E=Ethnic
    instrument_description VARCHAR(50),
    number_of_players INT UNSIGNED,
    instrument_key VARCHAR(3),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (ins_id) REFERENCES cwr_ins_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_ins_id (ins_id),
    INDEX idx_instrument_type (instrument_type),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR TER (TERRITORY IN COMPOSITE) RECORDS - Removed from CWR 3.0+
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_ter_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'TER',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Territory Information
    inclusion_exclusion_indicator CHAR(1),
    tis_territory_code VARCHAR(4),
    
    -- Note: Only for CWR versions prior to 3.0
    cwr_version_limit VARCHAR(10) DEFAULT '2.2',
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_territory_code (tis_territory_code),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR COM (COMPOSITE COMPONENT) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_com_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'COM',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Component Work Information
    title VARCHAR(60) NOT NULL,
    submitter_work_n VARCHAR(14),
    iswc VARCHAR(11),
    duration TIME, -- HHMMSS
    writer_1_last_name VARCHAR(45),
    writer_1_first_name VARCHAR(30),
    writer_1_cae_ipi_name_n VARCHAR(11),
    writer_2_last_name VARCHAR(45),
    writer_2_first_name VARCHAR(30),
    writer_2_cae_ipi_name_n VARCHAR(11),
    publisher_1_name VARCHAR(45),
    publisher_1_cae_ipi_name_n VARCHAR(11),
    
    -- CWR 3.0+ Fields
    writer_1_ipi_base_n VARCHAR(13),
    writer_2_ipi_base_n VARCHAR(13),
    publisher_1_ipi_base_n VARCHAR(13),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_title (title),
    INDEX idx_iswc (iswc),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR AGR (AGREEMENT) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_agr_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'AGR',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Agreement Information
    submitter_agreement_n VARCHAR(14) NOT NULL,
    international_standard_agreement_code VARCHAR(14),
    agreement_type CHAR(2) NOT NULL,
    agreement_start_date CHAR(8) NOT NULL,
    agreement_end_date CHAR(8),
    retention_end_date CHAR(8),
    prior_royalty_status CHAR(1),
    prior_royalty_start_date CHAR(8),
    post_term_collection_status CHAR(1),
    post_term_collection_end_date CHAR(8),
    date_of_signature_of_agreement CHAR(8),
    number_of_works INT UNSIGNED,
    
    -- Parties
    sales_manufacture_clause CHAR(1),
    shares_change CHAR(1),
    advance_given CHAR(1),
    
    -- CWR 3.0+ Fields
    society_assigned_agreement_n VARCHAR(14),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_agreement_n (submitter_agreement_n),
    INDEX idx_agreement_type (agreement_type),
    INDEX idx_agreement_dates (agreement_start_date, agreement_end_date),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR IPA (INTERESTED PARTY IN AGREEMENT) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_ipa_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    agr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'IPA',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Party Information
    agreement_party_type CHAR(1), -- A=Assignor, Q=Acquirer
    interested_party_n VARCHAR(13) NOT NULL,
    last_name VARCHAR(45) NOT NULL,
    first_name VARCHAR(30),
    cae_ipi_name_n VARCHAR(11),
    cae_ipi_base_n VARCHAR(13), -- CWR 3.0+
    pr_affiliation_society_n VARCHAR(3),
    pr_share DECIMAL(5,2),
    mr_affiliation_society_n VARCHAR(3),
    mr_share DECIMAL(5,2),
    sr_affiliation_society_n VARCHAR(3),
    sr_share DECIMAL(5,2),
    
    -- CWR 3.0+ Fields
    ipi_name_n VARCHAR(11),
    ipi_base_n VARCHAR(13),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (agr_id) REFERENCES cwr_agr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_agr_id (agr_id),
    INDEX idx_interested_party_n (interested_party_n),
    INDEX idx_party_name (last_name, first_name),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR TRL (TRAILER) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_trl_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'TRL',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Trailer Fields
    group_count INT UNSIGNED NOT NULL,
    transaction_count INT UNSIGNED NOT NULL,
    record_count INT UNSIGNED NOT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    calculated_group_count INT UNSIGNED,
    calculated_transaction_count INT UNSIGNED,
    calculated_record_count INT UNSIGNED,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR GRT (GROUP TRAILER) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_grt_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    group_id INT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'GRT',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Group Trailer Fields
    transaction_count INT UNSIGNED NOT NULL,
    record_count INT UNSIGNED NOT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    calculated_transaction_count INT UNSIGNED,
    calculated_record_count INT UNSIGNED,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_group_id (group_id),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR MSG (MESSAGE) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_msg_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    related_record_id BIGINT UNSIGNED NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'MSG',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Message Fields
    message_type CHAR(1) NOT NULL, -- I=Info, W=Warning, E=Error
    message_text VARCHAR(60) NOT NULL,
    message_level CHAR(1), -- T=Transaction, F=Field
    validation_n VARCHAR(8),
    message_record_type CHAR(3), -- Type of record message relates to
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_message_type (message_type),
    INDEX idx_validation_n (validation_n),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR ACK (ACKNOWLEDGMENT) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_ack_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    original_transmission_id BIGINT UNSIGNED NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'ACK',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Acknowledgment Fields
    original_group_id INT UNSIGNED,
    original_transaction_sequence_n INT UNSIGNED,
    original_transaction_type CHAR(3),
    transaction_status CHAR(2), -- AS=Accepted, RA=Rejected, NP=Not Processed
    submitter_work_n VARCHAR(14),
    recipient_work_n VARCHAR(14),
    processing_date CHAR(8),
    
    -- Work Information
    title VARCHAR(60),
    iswc VARCHAR(11),
    
    -- Statistics
    creation_date CHAR(8),
    creation_time CHAR(6),
    recipient_creation_n VARCHAR(14),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (original_transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_original_transmission_id (original_transmission_id),
    INDEX idx_transaction_status (transaction_status),
    INDEX idx_submitter_work_n (submitter_work_n),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR ISW (INTERESTED PARTY SHARE) RECORDS - CWR 2.2+
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_isw_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'ISW',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Work Information
    title VARCHAR(60) NOT NULL,
    submitter_work_n VARCHAR(14) NOT NULL,
    iswc VARCHAR(11),
    
    -- Party Information
    interested_party_n VARCHAR(13) NOT NULL,
    last_name VARCHAR(45) NOT NULL,
    first_name VARCHAR(30),
    cae_ipi_name_n VARCHAR(11),
    cae_ipi_base_n VARCHAR(13),
    role_code CHAR(2) NOT NULL,
    
    -- Shares
    pr_ownership_share DECIMAL(5,2),
    mr_ownership_share DECIMAL(5,2),
    sr_ownership_share DECIMAL(5,2),
    
    -- Rights Management
    pr_society VARCHAR(3),
    mr_society VARCHAR(3),
    sr_society VARCHAR(3),
    
    -- Territory
    inclusion_exclusion_indicator CHAR(1),
    tis_territory_code VARCHAR(4),
    
    -- CWR 3.0+ Fields
    share_change_indicator CHAR(1),
    share_change_sequence_n INT UNSIGNED,
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_submitter_work_n (submitter_work_n),
    INDEX idx_interested_party_n (interested_party_n),
    INDEX idx_iswc (iswc),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR REV (REVISED REGISTRATION) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_rev_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'REV',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- All fields from NWR plus revision reason
    title VARCHAR(60) NOT NULL,
    submitter_work_n VARCHAR(14) NOT NULL,
    iswc VARCHAR(11),
    copyright_date CHAR(8),
    copyright_number VARCHAR(12),
    musical_work_distribution_category CHAR(3),
    duration TIME,
    recorded_indicator CHAR(1),
    text_music_relationship CHAR(3),
    composite_type CHAR(3),
    version_type CHAR(3),
    excerpt_type CHAR(3),
    music_arrangement CHAR(3),
    lyric_adaptation CHAR(3),
    contact_name VARCHAR(30),
    contact_id VARCHAR(10),
    cwr_work_type CHAR(2),
    grand_rights_indicator CHAR(1),
    composite_component_count INT,
    date_of_publication_of_printed_edition CHAR(8),
    exceptional_clause CHAR(1),
    opus_number VARCHAR(25),
    catalogue_number VARCHAR(25),
    priority_flag CHAR(1),
    
    -- Revision specific
    revision_reason_code CHAR(2),
    revision_reason_description VARCHAR(60),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_submitter_work_n (submitter_work_n),
    INDEX idx_iswc (iswc),
    INDEX idx_title (title),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR EXC (EXCEPTION) RECORDS
-- -----------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS cwr_exc_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'EXC',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Work Information
    title VARCHAR(60),
    submitter_work_n VARCHAR(14),
    iswc VARCHAR(11),
    
    -- Exception Details
    exception_code VARCHAR(10) NOT NULL,
    exception_description VARCHAR(100) NOT NULL,
    
    -- Original Transaction Reference
    original_transaction_type CHAR(3),
    original_transaction_sequence_n INT UNSIGNED,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_exception_code (exception_code),
    INDEX idx_submitter_work_n (submitter_work_n),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR INFRASTRUCTURE TABLES
-- -----------------------------------------------------------------------------

-- Delivery Configuration
CREATE TABLE IF NOT EXISTS cwr_delivery_config (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Configuration
    config_name VARCHAR(100) NOT NULL,
    delivery_method_id BIGINT UNSIGNED NOT NULL, -- lookup: FTP, SFTP, API, EMAIL
    receiver_code VARCHAR(10) NOT NULL,
    receiver_name VARCHAR(255) NOT NULL,
    
    -- Connection Details
    host VARCHAR(255),
    port INT UNSIGNED,
    username VARCHAR(100),
    password_encrypted VARBINARY(255),
    remote_path VARCHAR(500),
    
    -- API Configuration
    api_endpoint VARCHAR(500),
    api_key_encrypted VARBINARY(255),
    api_version VARCHAR(10),
    
    -- Email Configuration
    email_to VARCHAR(500),
    email_cc VARCHAR(500),
    email_subject_template VARCHAR(255),
    
    -- Options
    is_test_mode BOOLEAN DEFAULT FALSE,
    is_compression_enabled BOOLEAN DEFAULT TRUE,
    is_encryption_enabled BOOLEAN DEFAULT FALSE,
    max_retries INT DEFAULT 3,
    retry_interval_minutes INT DEFAULT 30,
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (delivery_method_id) REFERENCES lu_delivery_method(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_receiver_code (receiver_code),
    INDEX idx_delivery_method (delivery_method_id),
    INDEX idx_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Field Mapping Configuration
CREATE TABLE IF NOT EXISTS cwr_field_mapping (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Mapping Context
    society_code VARCHAR(10) NOT NULL,
    cwr_version_id BIGINT UNSIGNED NOT NULL,
    record_type CHAR(3) NOT NULL,
    field_name VARCHAR(100) NOT NULL,
    
    -- Mapping Details
    internal_field_name VARCHAR(100) NOT NULL,
    field_position INT UNSIGNED,
    field_length INT UNSIGNED,
    is_mandatory BOOLEAN DEFAULT FALSE,
    default_value VARCHAR(255),
    
    -- Transformation
    transformation_function VARCHAR(100),
    validation_regex VARCHAR(500),
    
    -- Notes
    notes TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (cwr_version_id) REFERENCES lu_cwr_version(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    UNIQUE KEY uk_field_mapping (society_code, cwr_version_id, record_type, field_name),
    INDEX idx_society_code (society_code),
    INDEX idx_cwr_version (cwr_version_id),
    INDEX idx_record_type (record_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Generation Queue
CREATE TABLE IF NOT EXISTS cwr_generation_queue (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Queue Item
    queue_type_id BIGINT UNSIGNED NOT NULL, -- lookup: new_works, updates, acknowledgments
    priority INT DEFAULT 5, -- 1=highest, 10=lowest
    scheduled_at TIMESTAMP NOT NULL,
    
    -- Generation Parameters
    receiver_code VARCHAR(10) NOT NULL,
    cwr_version_id BIGINT UNSIGNED NOT NULL,
    submission_type_id BIGINT UNSIGNED NOT NULL,
    
    -- Filters
    date_from DATE,
    date_to DATE,
    work_ids TEXT, -- Comma-separated list
    agreement_ids TEXT,
    
    -- Processing
    status_id BIGINT UNSIGNED NOT NULL, -- lookup: pending, processing, completed, failed
    started_at TIMESTAMP NULL,
    completed_at TIMESTAMP NULL,
    transmission_id BIGINT UNSIGNED NULL,
    
    -- Error Handling
    error_message TEXT,
    retry_count INT DEFAULT 0,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (queue_type_id) REFERENCES lu_queue_type(id),
    FOREIGN KEY (cwr_version_id) REFERENCES lu_cwr_version(id),
    FOREIGN KEY (submission_type_id) REFERENCES lu_cwr_submission_type(id),
    FOREIGN KEY (status_id) REFERENCES lu_processing_status(id),
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_status (status_id),
    INDEX idx_scheduled_at (scheduled_at),
    INDEX idx_priority (priority),
    INDEX idx_receiver_code (receiver_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Delivery Log
CREATE TABLE IF NOT EXISTS cwr_delivery_log (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Delivery Details
    transmission_id BIGINT UNSIGNED NOT NULL,
    delivery_config_id BIGINT UNSIGNED NOT NULL,
    delivery_method_id BIGINT UNSIGNED NOT NULL,
    
    -- Status
    status_id BIGINT UNSIGNED NOT NULL, -- lookup: pending, sent, delivered, failed
    started_at TIMESTAMP NOT NULL,
    completed_at TIMESTAMP NULL,
    
    -- File Information
    filename VARCHAR(255) NOT NULL,
    file_size BIGINT UNSIGNED,
    file_hash VARCHAR(64),
    
    -- Response
    response_code VARCHAR(50),
    response_message TEXT,
    acknowledgment_filename VARCHAR(255),
    
    -- Error Handling
    error_message TEXT,
    retry_count INT DEFAULT 0,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (delivery_config_id) REFERENCES cwr_delivery_config(id),
    FOREIGN KEY (delivery_method_id) REFERENCES lu_delivery_method(id),
    FOREIGN KEY (status_id) REFERENCES lu_delivery_status(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_delivery_config_id (delivery_config_id),
    INDEX idx_status (status_id),
    INDEX idx_started_at (started_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- File Naming Pattern
CREATE TABLE IF NOT EXISTS cwr_file_naming_pattern (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Pattern Configuration
    pattern_name VARCHAR(100) NOT NULL,
    receiver_code VARCHAR(10) NOT NULL,
    cwr_version_id BIGINT UNSIGNED NOT NULL,
    
    -- Pattern Components
    prefix VARCHAR(50),
    sender_code_position INT,
    receiver_code_position INT,
    date_format VARCHAR(20), -- e.g., YYYYMMDD, YYMMDD
    date_position INT,
    sequence_position INT,
    sequence_padding INT DEFAULT 4,
    extension VARCHAR(10) DEFAULT '.V21',
    
    -- Full Pattern Template
    pattern_template VARCHAR(255), -- e.g., CW{YEAR}{SENDER}_{RECEIVER}_{SEQ}.V21
    
    -- Current Sequence
    current_sequence INT DEFAULT 0,
    sequence_reset_frequency VARCHAR(20), -- daily, weekly, monthly, yearly, never
    last_reset_date DATE,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (cwr_version_id) REFERENCES lu_cwr_version(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    UNIQUE KEY uk_naming_pattern (receiver_code, cwr_version_id),
    INDEX idx_receiver_code (receiver_code),
    INDEX idx_cwr_version (cwr_version_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Validation Log
CREATE TABLE IF NOT EXISTS cwr_validation_log (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Context
    transmission_id BIGINT UNSIGNED NULL,
    record_type CHAR(3) NOT NULL,
    record_id BIGINT UNSIGNED NULL,
    transaction_sequence_n INT UNSIGNED,
    record_sequence_n INT UNSIGNED,
    
    -- Validation Details
    validation_type_id BIGINT UNSIGNED NOT NULL, -- lookup: syntax, business, consistency
    validation_rule VARCHAR(100) NOT NULL,
    field_name VARCHAR(100),
    field_value TEXT,
    
    -- Result
    severity_id BIGINT UNSIGNED NOT NULL, -- lookup: info, warning, error, fatal
    error_code VARCHAR(50) NOT NULL,
    error_message TEXT NOT NULL,
    
    -- Resolution
    is_resolved BOOLEAN DEFAULT FALSE,
    resolved_at TIMESTAMP NULL,
    resolved_by BIGINT UNSIGNED NULL,
    resolution_notes TEXT,
    
    -- Audit Trail
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (validation_type_id) REFERENCES lu_validation_type(id),
    FOREIGN KEY (severity_id) REFERENCES lu_severity(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (resolved_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_record_type (record_type),
    INDEX idx_severity (severity_id),
    INDEX idx_is_resolved (is_resolved),
    INDEX idx_error_code (error_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- CWR STORED PROCEDURES
-- -----------------------------------------------------------------------------

DELIMITER //

-- Generate CWR File
CREATE PROCEDURE sp_generate_cwr_file(
    IN p_receiver_code VARCHAR(10),
    IN p_cwr_version_id BIGINT,
    IN p_submission_type_id BIGINT,
    IN p_work_ids TEXT,
    IN p_user_id BIGINT,
    OUT p_transmission_id BIGINT
)
BEGIN
    DECLARE v_transmission_code VARCHAR(50);
    DECLARE v_filename VARCHAR(255);
    DECLARE v_error_message VARCHAR(500);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        GET DIAGNOSTICS CONDITION 1
            v_error_message = MESSAGE_TEXT;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_message;
    END;
    
    START TRANSACTION;
    
    -- Generate transmission code
    SET v_transmission_code = CONCAT('CWR_', DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), '_', p_receiver_code);
    
    -- Generate filename
    SELECT fn_generate_cwr_filename(p_receiver_code, p_cwr_version_id) INTO v_filename;
    
    -- Create transmission record
    INSERT INTO cwr_transmission (
        transmission_code,
        sender_type_id,
        sender_code,
        sender_name,
        receiver_code,
        receiver_name,
        cwr_version_id,
        submission_type_id,
        character_set_id,
        creation_date,
        filename,
        generation_status_id,
        validation_status_id,
        delivery_status_id,
        acknowledgment_status_id,
        created_by,
        updated_by
    ) VALUES (
        v_transmission_code,
        1, -- Publisher
        'PUB001', -- From configuration
        'ASTRO Music Publishing',
        p_receiver_code,
        (SELECT name FROM lu_society WHERE code = p_receiver_code),
        p_cwr_version_id,
        p_submission_type_id,
        1, -- UTF-8
        CURDATE(),
        v_filename,
        2, -- Processing
        1, -- Pending
        1, -- Pending
        1, -- Pending
        p_user_id,
        p_user_id
    );
    
    SET p_transmission_id = LAST_INSERT_ID();
    
    -- Generate HDR record
    CALL sp_generate_hdr_record(p_transmission_id, p_user_id);
    
    -- Generate work records
    CALL sp_generate_work_records(p_transmission_id, p_work_ids, p_user_id);
    
    -- Generate TRL record
    CALL sp_generate_trl_record(p_transmission_id, p_user_id);
    
    -- Update transmission status
    UPDATE cwr_transmission
    SET generation_status_id = 3, -- Completed
        updated_at = NOW(),
        updated_by = p_user_id
    WHERE id = p_transmission_id;
    
    COMMIT;
    
END//

-- Generate HDR Record
CREATE PROCEDURE sp_generate_hdr_record(
    IN p_transmission_id BIGINT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_cwr_version VARCHAR(5);
    DECLARE v_sender_code VARCHAR(10);
    DECLARE v_sender_name VARCHAR(45);
    
    -- Get transmission details
    SELECT cv.version_code, 'PUB001', 'ASTRO Music Publishing'
    INTO v_cwr_version, v_sender_code, v_sender_name
    FROM cwr_transmission t
    JOIN lu_cwr_version cv ON t.cwr_version_id = cv.id
    WHERE t.id = p_transmission_id;
    
    -- Insert HDR record
    INSERT INTO cwr_hdr_record (
        transmission_id,
        transaction_sequence_n,
        record_sequence_n,
        sender_type,
        sender_id,
        sender_name,
        edi_standard_version_n,
        creation_date,
        creation_time,
        transmission_date,
        character_set,
        cwr_version,
        created_by,
        updated_by
    ) VALUES (
        p_transmission_id,
        0,
        1,
        'PB', -- Publisher
        v_sender_code,
        v_sender_name,
        v_cwr_version,
        DATE_FORMAT(NOW(), '%Y%m%d'),
        DATE_FORMAT(NOW(), '%H%i%s'),
        DATE_FORMAT(NOW(), '%Y%m%d'),
        'UTF-8',
        v_cwr_version,
        p_user_id,
        p_user_id
    );
    
END//

-- Generate Work Records
CREATE PROCEDURE sp_generate_work_records(
    IN p_transmission_id BIGINT,
    IN p_work_ids TEXT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_work_id BIGINT;
    DECLARE v_group_id INT DEFAULT 1;
    DECLARE v_transaction_seq INT DEFAULT 1;
    DECLARE v_record_seq INT DEFAULT 2; -- After HDR
    DECLARE v_done INT DEFAULT FALSE;
    
    DECLARE work_cursor CURSOR FOR
        SELECT w.id
        FROM works w
        WHERE FIND_IN_SET(w.id, p_work_ids) > 0
        AND w.is_active = TRUE
        AND w.is_deleted = FALSE;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;
    
    -- Generate GRH record for the group
    INSERT INTO cwr_grh_record (
        transmission_id,
        transaction_sequence_n,
        record_sequence_n,
        group_id,
        transaction_type,
        created_by,
        updated_by
    ) VALUES (
        p_transmission_id,
        v_transaction_seq,
        v_record_seq,
        v_group_id,
        'NWR',
        p_user_id,
        p_user_id
    );
    
    SET v_transaction_seq = v_transaction_seq + 1;
    SET v_record_seq = v_record_seq + 1;
    
    OPEN work_cursor;
    
    work_loop: LOOP
        FETCH work_cursor INTO v_work_id;
        IF v_done THEN
            LEAVE work_loop;
        END IF;
        
        -- Generate NWR record
        CALL sp_generate_nwr_record(p_transmission_id, v_work_id, v_group_id, 
                                   v_transaction_seq, v_record_seq, p_user_id);
        
        SET v_transaction_seq = v_transaction_seq + 1;
        
    END LOOP;
    
    CLOSE work_cursor;
    
    -- Generate GRT record
    INSERT INTO cwr_grt_record (
        transmission_id,
        group_id,
        transaction_sequence_n,
        record_sequence_n,
        transaction_count,
        record_count,
        created_by,
        updated_by
    ) VALUES (
        p_transmission_id,
        v_group_id,
        v_transaction_seq,
        v_record_seq + 1,
        v_transaction_seq - 1,
        v_record_seq + 1,
        p_user_id,
        p_user_id
    );
    
END//

-- Generate NWR Record
CREATE PROCEDURE sp_generate_nwr_record(
    IN p_transmission_id BIGINT,
    IN p_work_id BIGINT,
    IN p_group_id INT,
    IN p_transaction_seq INT,
    INOUT p_record_seq INT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_nwr_id BIGINT;
    
    -- Insert NWR record
    INSERT INTO cwr_nwr_record (
        transmission_id,
        group_id,
        transaction_sequence_n,
        record_sequence_n,
        title,
        submitter_work_n,
        iswc,
        copyright_date,
        musical_work_distribution_category,
        duration,
        recorded_indicator,
        text_music_relationship,
        composite_type,
        version_type,
        excerpt_type,
        music_arrangement,
        lyric_adaptation,
        cwr_work_type,
        grand_rights_indicator,
        created_by,
        updated_by
    )
    SELECT
        p_transmission_id,
        p_group_id,
        p_transaction_seq,
        p_record_seq,
        w.title,
        w.internal_work_id,
        w.iswc,
        DATE_FORMAT(w.copyright_date, '%Y%m%d'),
        'SER', -- Serious
        w.duration,
        CASE WHEN w.is_recorded THEN 'Y' ELSE 'N' END,
        CASE 
            WHEN w.has_lyrics = 1 AND w.has_music = 1 THEN 'MTX'
            WHEN w.has_music = 1 THEN 'MUS'
            ELSE 'TXT'
        END,
        'ORI', -- Original
        'ORI', -- Original
        'ENT', -- Entire
        'ORI', -- Original
        'ORI', -- Original
        'MU', -- Musical Work
        'N', -- No grand rights
        p_user_id,
        p_user_id
    FROM works w
    WHERE w.id = p_work_id;
    
    SET v_nwr_id = LAST_INSERT_ID();
    SET p_record_seq = p_record_seq + 1;
    
    -- Generate writer records
    CALL sp_generate_writer_records(p_transmission_id, v_nwr_id, p_work_id, 
                                   p_transaction_seq, p_record_seq, p_user_id);
    
    -- Generate publisher records
    CALL sp_generate_publisher_records(p_transmission_id, v_nwr_id, p_work_id, 
                                      p_transaction_seq, p_record_seq, p_user_id);
    
    -- Generate alternate titles
    CALL sp_generate_alt_records(p_transmission_id, v_nwr_id, p_work_id, 
                                p_transaction_seq, p_record_seq, p_user_id);
    
END//

-- Generate TRL Record
CREATE PROCEDURE sp_generate_trl_record(
    IN p_transmission_id BIGINT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_group_count INT;
    DECLARE v_transaction_count INT;
    DECLARE v_record_count INT;
    
    -- Calculate counts
    SELECT 
        COUNT(DISTINCT group_id),
        COUNT(DISTINCT transaction_sequence_n),
        COUNT(*)
    INTO v_group_count, v_transaction_count, v_record_count
    FROM (
        SELECT group_id, transaction_sequence_n FROM cwr_grh_record WHERE transmission_id = p_transmission_id
        UNION ALL
        SELECT group_id, transaction_sequence_n FROM cwr_nwr_record WHERE transmission_id = p_transmission_id
        UNION ALL
        SELECT 0, transaction_sequence_n FROM cwr_hdr_record WHERE transmission_id = p_transmission_id
    ) t;
    
    -- Insert TRL record
    INSERT INTO cwr_trl_record (
        transmission_id,
        transaction_sequence_n,
        record_sequence_n,
        group_count,
        transaction_count,
        record_count,
        created_by,
        updated_by
    ) VALUES (
        p_transmission_id,
        v_transaction_count + 1,
        v_record_count + 1,
        v_group_count,
        v_transaction_count,
        v_record_count + 1, -- Including TRL itself
        p_user_id,
        p_user_id
    );
    
END//

-- Process CWR Acknowledgment
CREATE PROCEDURE sp_process_cwr_acknowledgment(
    IN p_ack_filename VARCHAR(255),
    IN p_ack_content TEXT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_original_transmission_code VARCHAR(50);
    DECLARE v_transmission_id BIGINT;
    DECLARE v_ack_transmission_id BIGINT;
    
    -- Parse acknowledgment file to get original transmission code
    -- This is simplified - actual implementation would parse the ACK file
    SET v_original_transmission_code = 'PARSED_FROM_ACK';
    
    -- Find original transmission
    SELECT id INTO v_transmission_id
    FROM cwr_transmission
    WHERE transmission_code = v_original_transmission_code;
    
    -- Create acknowledgment transmission record
    INSERT INTO cwr_transmission (
        transmission_code,
        sender_type_id,
        sender_code,
        sender_name,
        receiver_code,
        receiver_name,
        cwr_version_id,
        submission_type_id,
        character_set_id,
        creation_date,
        filename,
        generation_status_id,
        validation_status_id,
        delivery_status_id,
        acknowledgment_status_id,
        created_by,
        updated_by
    )
    SELECT
        CONCAT('ACK_', transmission_code),
        sender_type_id,
        receiver_code, -- Swap sender/receiver
        (SELECT name FROM lu_society WHERE code = receiver_code),
        sender_code,
        sender_name,
        cwr_version_id,
        4, -- Acknowledgment type
        character_set_id,
        CURDATE(),
        p_ack_filename,
        3, -- Completed
        3, -- Passed
        3, -- Delivered
        2, -- Received
        p_user_id,
        p_user_id
    FROM cwr_transmission
    WHERE id = v_transmission_id;
    
    SET v_ack_transmission_id = LAST_INSERT_ID();
    
    -- Update original transmission
    UPDATE cwr_transmission
    SET acknowledgment_status_id = 2, -- Received
        acknowledgment_received_date = CURDATE(),
        updated_at = NOW(),
        updated_by = p_user_id
    WHERE id = v_transmission_id;
    
    -- Process individual ACK records
    -- This would parse and insert ACK, MSG, etc. records
    
END//

-- Validate CWR Structure
CREATE PROCEDURE sp_validate_cwr_structure(
    IN p_transmission_id BIGINT,
    IN p_user_id BIGINT,
    OUT p_is_valid BOOLEAN,
    OUT p_error_count INT
)
BEGIN
    DECLARE v_error_count INT DEFAULT 0;
    
    -- Validate HDR record exists
    IF NOT EXISTS (SELECT 1 FROM cwr_hdr_record WHERE transmission_id = p_transmission_id) THEN
        INSERT INTO cwr_validation_log (
            transmission_id,
            record_type,
            validation_type_id,
            validation_rule,
            severity_id,
            error_code,
            error_message,
            created_by
        ) VALUES (
            p_transmission_id,
            'HDR',
            1, -- Syntax
            'HDR_REQUIRED',
            4, -- Fatal
            'HDR001',
            'Header record is missing',
            p_user_id
        );
        SET v_error_count = v_error_count + 1;
    END IF;
    
    -- Validate TRL record exists
    IF NOT EXISTS (SELECT 1 FROM cwr_trl_record WHERE transmission_id = p_transmission_id) THEN
        INSERT INTO cwr_validation_log (
            transmission_id,
            record_type,
            validation_type_id,
            validation_rule,
            severity_id,
            error_code,
            error_message,
            created_by
        ) VALUES (
            p_transmission_id,
            'TRL',
            1, -- Syntax
            'TRL_REQUIRED',
            4, -- Fatal
            'TRL001',
            'Trailer record is missing',
            p_user_id
        );
        SET v_error_count = v_error_count + 1;
    END IF;
    
    -- Validate record counts in TRL
    -- More validation rules would be added here
    
    SET p_error_count = v_error_count;
    SET p_is_valid = (v_error_count = 0);
    
    -- Update transmission validation status
    UPDATE cwr_transmission
    SET validation_status_id = CASE WHEN v_error_count = 0 THEN 3 ELSE 4 END,
        updated_at = NOW(),
        updated_by = p_user_id
    WHERE id = p_transmission_id;
    
END//

-- Deliver CWR File
CREATE PROCEDURE sp_deliver_cwr_file(
    IN p_transmission_id BIGINT,
    IN p_delivery_config_id BIGINT,
    IN p_user_id BIGINT,
    OUT p_delivery_log_id BIGINT
)
BEGIN
    DECLARE v_filename VARCHAR(255);
    DECLARE v_file_content TEXT;
    DECLARE v_delivery_method_id BIGINT;
    
    -- Get transmission details
    SELECT filename INTO v_filename
    FROM cwr_transmission
    WHERE id = p_transmission_id;
    
    -- Get delivery method
    SELECT delivery_method_id INTO v_delivery_method_id
    FROM cwr_delivery_config
    WHERE id = p_delivery_config_id;
    
    -- Create delivery log entry
    INSERT INTO cwr_delivery_log (
        transmission_id,
        delivery_config_id,
        delivery_method_id,
        status_id,
        started_at,
        filename,
        created_by,
        updated_by
    ) VALUES (
        p_transmission_id,
        p_delivery_config_id,
        v_delivery_method_id,
        2, -- Sending
        NOW(),
        v_filename,
        p_user_id,
        p_user_id
    );
    
    SET p_delivery_log_id = LAST_INSERT_ID();
    
    -- Actual delivery would happen here based on method
    -- For now, we'll simulate success
    
    UPDATE cwr_delivery_log
    SET status_id = 3, -- Delivered
        completed_at = NOW(),
        response_code = '200',
        response_message = 'File delivered successfully',
        updated_at = NOW(),
        updated_by = p_user_id
    WHERE id = p_delivery_log_id;
    
    -- Update transmission delivery status
    UPDATE cwr_transmission
    SET delivery_status_id = 3, -- Delivered
        transmission_date = CURDATE(),
        updated_at = NOW(),
        updated_by = p_user_id
    WHERE id = p_transmission_id;
    
END//

-- Generate Writer Records (Helper)
CREATE PROCEDURE sp_generate_writer_records(
    IN p_transmission_id BIGINT,
    IN p_nwr_id BIGINT,
    IN p_work_id BIGINT,
    IN p_transaction_seq INT,
    INOUT p_record_seq INT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_done INT DEFAULT FALSE;
    DECLARE v_contributor_id BIGINT;
    DECLARE v_share_percentage DECIMAL(5,2);
    
    DECLARE writer_cursor CURSOR FOR
        SELECT wc.contributor_id, ws.ownership_share
        FROM work_contributors wc
        JOIN work_shares ws ON ws.work_id = wc.work_id 
            AND ws.contributor_id = wc.contributor_id
        WHERE wc.work_id = p_work_id
        AND wc.role_id IN (SELECT id FROM lu_contributor_role WHERE role_type = 'writer')
        AND wc.is_active = TRUE;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;
    
    OPEN writer_cursor;
    
    writer_loop: LOOP
        FETCH writer_cursor INTO v_contributor_id, v_share_percentage;
        IF v_done THEN
            LEAVE writer_loop;
        END IF;
        
        INSERT INTO cwr_swr_record (
            transmission_id,
            nwr_id,
            transaction_sequence_n,
            record_sequence_n,
            interested_party_n,
            writer_last_name,
            writer_first_name,
            writer_unknown_indicator,
            writer_designation_code,
            writer_cae_ipi_name_n,
            pr_ownership_share,
            mr_ownership_share,
            sr_ownership_share,
            created_by,
            updated_by
        )
        SELECT
            p_transmission_id,
            p_nwr_id,
            p_transaction_seq,
            p_record_seq,
            c.internal_id,
            c.last_name,
            c.first_name,
            'N',
            'CA', -- Composer/Author
            c.ipi_name_number,
            v_share_percentage,
            v_share_percentage,
            v_share_percentage,
            p_user_id,
            p_user_id
        FROM contributors c
        WHERE c.id = v_contributor_id;
        
        SET p_record_seq = p_record_seq + 1;
        
    END LOOP;
    
    CLOSE writer_cursor;
    
END//

-- Generate Publisher Records (Helper)
CREATE PROCEDURE sp_generate_publisher_records(
    IN p_transmission_id BIGINT,
    IN p_nwr_id BIGINT,
    IN p_work_id BIGINT,
    IN p_transaction_seq INT,
    INOUT p_record_seq INT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_done INT DEFAULT FALSE;
    DECLARE v_publisher_id BIGINT;
    DECLARE v_share_percentage DECIMAL(5,2);
    DECLARE v_publisher_seq INT DEFAULT 1;
    DECLARE v_spu_id BIGINT;
    
    DECLARE publisher_cursor CURSOR FOR
        SELECT wp.publisher_id, wp.ownership_share
        FROM work_publishers wp
        WHERE wp.work_id = p_work_id
        AND wp.is_active = TRUE
        ORDER BY wp.is_original_publisher DESC, wp.id;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;
    
    OPEN publisher_cursor;
    
    publisher_loop: LOOP
        FETCH publisher_cursor INTO v_publisher_id, v_share_percentage;
        IF v_done THEN
            LEAVE publisher_loop;
        END IF;
        
        -- Insert SPU record
        INSERT INTO cwr_spu_record (
            transmission_id,
            nwr_id,
            transaction_sequence_n,
            record_sequence_n,
            publisher_sequence_n,
            interested_party_n,
            publisher_name,
            publisher_unknown_indicator,
            publisher_type,
            publisher_cae_ipi_name_n,
            pr_ownership_share,
            mr_ownership_share,
            sr_ownership_share,
            created_by,
            updated_by
        )
        SELECT
            p_transmission_id,
            p_nwr_id,
            p_transaction_seq,
            p_record_seq,
            v_publisher_seq,
            p.internal_id,
            p.name,
            'N',
            'E', -- Original Publisher
            p.ipi_name_number,
            v_share_percentage,
            v_share_percentage,
            v_share_percentage,
            p_user_id,
            p_user_id
        FROM publishers p
        WHERE p.id = v_publisher_id;
        
        SET v_spu_id = LAST_INSERT_ID();
        SET p_record_seq = p_record_seq + 1;
        
        -- Insert SPT record (territory)
        INSERT INTO cwr_spt_record (
            transmission_id,
            spu_id,
            transaction_sequence_n,
            record_sequence_n,
            tis_n,
            territory_sequence_n,
            inclusion_exclusion_indicator,
            tis_territory_code,
            pr_collection_share,
            mr_collection_share,
            sr_collection_share,
            shares_change,
            created_by,
            updated_by
        ) VALUES (
            p_transmission_id,
            v_spu_id,
            p_transaction_seq,
            p_record_seq,
            1,
            1,
            'I',
            '2136', -- World
            v_share_percentage,
            v_share_percentage,
            v_share_percentage,
            'N',
            p_user_id,
            p_user_id
        );
        
        SET p_record_seq = p_record_seq + 1;
        SET v_publisher_seq = v_publisher_seq + 1;
        
    END LOOP;
    
    CLOSE publisher_cursor;
    
END//

-- Generate ALT Records (Helper)
CREATE PROCEDURE sp_generate_alt_records(
    IN p_transmission_id BIGINT,
    IN p_nwr_id BIGINT,
    IN p_work_id BIGINT,
    IN p_transaction_seq INT,
    INOUT p_record_seq INT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_done INT DEFAULT FALSE;
    DECLARE v_alt_title VARCHAR(60);
    DECLARE v_alt_type_id BIGINT;
    DECLARE v_language_code CHAR(2);
    
    DECLARE alt_cursor CURSOR FOR
        SELECT wat.alternate_title, wat.title_type_id, l.iso_code_2
        FROM work_alternate_titles wat
        LEFT JOIN lu_language l ON wat.language_id = l.id
        WHERE wat.work_id = p_work_id
        AND wat.is_active = TRUE;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;
    
    OPEN alt_cursor;
    
    alt_loop: LOOP
        FETCH alt_cursor INTO v_alt_title, v_alt_type_id, v_language_code;
        IF v_done THEN
            LEAVE alt_loop;
        END IF;
        
        INSERT INTO cwr_alt_record (
            transmission_id,
            nwr_id,
            transaction_sequence_n,
            record_sequence_n,
            alternate_title,
            alternate_title_type,
            language_code,
            created_by,
            updated_by
        ) VALUES (
            p_transmission_id,
            p_nwr_id,
            p_transaction_seq,
            p_record_seq,
            v_alt_title,
            'AT', -- Alternate Title
            IFNULL(v_language_code, 'EN'),
            p_user_id,
            p_user_id
        );
        
        SET p_record_seq = p_record_seq + 1;
        
    END LOOP;
    
    CLOSE alt_cursor;
    
END//

DELIMITER ;

-- -----------------------------------------------------------------------------
-- CWR FUNCTIONS
-- -----------------------------------------------------------------------------

DELIMITER //

-- Generate CWR Filename
CREATE FUNCTION fn_generate_cwr_filename(
    p_receiver_code VARCHAR(10),
    p_cwr_version_id BIGINT
) RETURNS VARCHAR(255)
READS SQL DATA
DETERMINISTIC
BEGIN
    DECLARE v_filename VARCHAR(255);
    DECLARE v_pattern VARCHAR(255);
    DECLARE v_sequence INT;
    DECLARE v_extension VARCHAR(10);
    
    -- Get naming pattern
    SELECT 
        pattern_template,
        current_sequence + 1,
        extension
    INTO v_pattern, v_sequence, v_extension
    FROM cwr_file_naming_pattern
    WHERE receiver_code = p_receiver_code
    AND cwr_version_id = p_cwr_version_id
    AND is_active = TRUE
    LIMIT 1;
    
    -- If no pattern found, use default
    IF v_pattern IS NULL THEN
        SET v_pattern = 'CW{YEAR}{SENDER}_{RECEIVER}_{SEQ}';
        SET v_sequence = 1;
        SET v_extension = '.V21';
    END IF;
    
    -- Replace placeholders
    SET v_filename = v_pattern;
    SET v_filename = REPLACE(v_filename, '{YEAR}', DATE_FORMAT(NOW(), '%Y'));
    SET v_filename = REPLACE(v_filename, '{SENDER}', 'PUB001');
    SET v_filename = REPLACE(v_filename, '{RECEIVER}', p_receiver_code);
    SET v_filename = REPLACE(v_filename, '{SEQ}', LPAD(v_sequence, 4, '0'));
    SET v_filename = REPLACE(v_filename, '{DATE}', DATE_FORMAT(NOW(), '%Y%m%d'));
    
    -- Add extension
    SET v_filename = CONCAT(v_filename, v_extension);
    
    -- Update sequence
    UPDATE cwr_file_naming_pattern
    SET current_sequence = v_sequence,
        updated_at = NOW()
    WHERE receiver_code = p_receiver_code
    AND cwr_version_id = p_cwr_version_id
    AND is_active = TRUE;
    
    RETURN v_filename;
END//

-- Format CWR Field
CREATE FUNCTION fn_format_cwr_field(
    p_value VARCHAR(500),
    p_field_type VARCHAR(20),
    p_field_length INT,
    p_pad_char CHAR(1)
) RETURNS VARCHAR(500)
DETERMINISTIC
BEGIN
    DECLARE v_result VARCHAR(500);
    
    -- Handle NULL values
    IF p_value IS NULL THEN
        RETURN REPEAT(p_pad_char, p_field_length);
    END IF;
    
    -- Format based on type
    CASE p_field_type
        WHEN 'ALPHA' THEN
            -- Left align, pad with spaces
            SET v_result = RPAD(LEFT(p_value, p_field_length), p_field_length, ' ');
            
        WHEN 'NUMERIC' THEN
            -- Right align, pad with zeros
            SET v_result = LPAD(LEFT(p_value, p_field_length), p_field_length, '0');
            
        WHEN 'ALPHANUMERIC' THEN
            -- Left align, pad with spaces
            SET v_result = RPAD(LEFT(p_value, p_field_length), p_field_length, ' ');
            
        WHEN 'DATE' THEN
            -- Format as YYYYMMDD
            IF p_value REGEXP '^[0-9]{8}$' THEN
                SET v_result = p_value;
            ELSE
                SET v_result = DATE_FORMAT(p_value, '%Y%m%d');
            END IF;
            
        WHEN 'TIME' THEN
            -- Format as HHMMSS
            IF p_value REGEXP '^[0-9]{6}$' THEN
                SET v_result = p_value;
            ELSE
                SET v_result = DATE_FORMAT(p_value, '%H%i%s');
            END IF;
            
        WHEN 'DECIMAL' THEN
            -- Format decimal with implied decimal point
            SET v_result = LPAD(REPLACE(FORMAT(p_value, 2), '.', ''), p_field_length, '0');
            
        ELSE
            SET v_result = RPAD(LEFT(p_value, p_field_length), p_field_length, p_pad_char);
    END CASE;
    
    RETURN v_result;
END//

DELIMITER ;

-- -----------------------------------------------------------------------------
-- CWR VIEWS
-- -----------------------------------------------------------------------------

-- Transmission Summary View
CREATE OR REPLACE VIEW vw_cwr_transmission_summary AS
SELECT 
    t.id,
    t.uuid,
    t.transmission_code,
    t.sender_code,
    t.sender_name,
    t.receiver_code,
    t.receiver_name,
    cv.version_name AS cwr_version,
    st.name AS submission_type,
    t.creation_date,
    t.transmission_date,
    t.acknowledgment_due_date,
    t.acknowledgment_received_date,
    t.total_records,
    t.total_works,
    gs.name AS generation_status,
    vs.name AS validation_status,
    ds.name AS delivery_status,
    acs.name AS acknowledgment_status,
    t.filename,
    t.file_size,
    u.full_name AS created_by_name,
    t.created_at
FROM cwr_transmission t
LEFT JOIN lu_cwr_version cv ON t.cwr_version_id = cv.id
LEFT JOIN lu_cwr_submission_type st ON t.submission_type_id = st.id
LEFT JOIN lu_processing_status gs ON t.generation_status_id = gs.id
LEFT JOIN lu_validation_status vs ON t.validation_status_id = vs.id
LEFT JOIN lu_delivery_status ds ON t.delivery_status_id = ds.id
LEFT JOIN lu_acknowledgment_status acs ON t.acknowledgment_status_id = acs.id
LEFT JOIN users u ON t.created_by = u.id
WHERE t.is_active = TRUE AND t.is_deleted = FALSE;

-- Work Registration View
CREATE OR REPLACE VIEW vw_cwr_work_registrations AS
SELECT 
    nwr.id,
    nwr.transmission_id,
    t.transmission_code,
    t.receiver_code,
    nwr.group_id,
    nwr.transaction_sequence_n,
    nwr.title,
    nwr.submitter_work_n,
    nwr.iswc,
    nwr.copyright_date,
    nwr.duration,
    nwr.text_music_relationship,
    nwr.grand_rights_indicator,
    nwr.is_valid,
    COUNT(DISTINCT swr.id) AS writer_count,
    COUNT(DISTINCT spu.id) AS publisher_count,
    COUNT(DISTINCT alt.id) AS alternate_title_count,
    nwr.created_at
FROM cwr_nwr_record nwr
JOIN cwr_transmission t ON nwr.transmission_id = t.id
LEFT JOIN cwr_swr_record swr ON swr.nwr_id = nwr.id
LEFT JOIN cwr_spu_record spu ON spu.nwr_id = nwr.id
LEFT JOIN cwr_alt_record alt ON alt.nwr_id = nwr.id
WHERE nwr.is_active = TRUE AND nwr.is_deleted = FALSE
GROUP BY nwr.id;

-- Error Summary View
CREATE OR REPLACE VIEW vw_cwr_error_summary AS
SELECT 
    vl.transmission_id,
    t.transmission_code,
    vl.record_type,
    vl.validation_rule,
    vl.error_code,
    s.name AS severity,
    COUNT(*) AS error_count,
    MIN(vl.created_at) AS first_occurrence,
    MAX(vl.created_at) AS last_occurrence
FROM cwr_validation_log vl
JOIN cwr_transmission t ON vl.transmission_id = t.id
JOIN lu_severity s ON vl.severity_id = s.id
WHERE vl.is_resolved = FALSE
GROUP BY vl.transmission_id, vl.record_type, vl.validation_rule, vl.error_code, s.name;

-- Delivery Status View
CREATE OR REPLACE VIEW vw_cwr_delivery_status AS
SELECT 
    dl.id,
    dl.transmission_id,
    t.transmission_code,
    t.receiver_code,
    dc.config_name,
    dm.name AS delivery_method,
    ds.name AS status,
    dl.started_at,
    dl.completed_at,
    TIMESTAMPDIFF(SECOND, dl.started_at, IFNULL(dl.completed_at, NOW())) AS duration_seconds,
    dl.filename,
    dl.file_size,
    dl.response_code,
    dl.response_message,
    dl.error_message,
    dl.retry_count
FROM cwr_delivery_log dl
JOIN cwr_transmission t ON dl.transmission_id = t.id
JOIN cwr_delivery_config dc ON dl.delivery_config_id = dc.id
JOIN lu_delivery_method dm ON dl.delivery_method_id = dm.id
JOIN lu_delivery_status ds ON dl.status_id = ds.id
WHERE dl.is_active = TRUE;

-- Generation Queue Status View
CREATE OR REPLACE VIEW vw_cwr_generation_queue_status AS
SELECT 
    gq.id,
    gq.uuid,
    qt.name AS queue_type,
    gq.priority,
    gq.scheduled_at,
    gq.receiver_code,
    cv.version_name AS cwr_version,
    st.name AS submission_type,
    ps.name AS status,
    gq.started_at,
    gq.completed_at,
    TIMESTAMPDIFF(SECOND, gq.started_at, IFNULL(gq.completed_at, NOW())) AS duration_seconds,
    gq.transmission_id,
    gq.error_message,
    gq.retry_count,
    u.full_name AS created_by_name,
    gq.created_at
FROM cwr_generation_queue gq
JOIN lu_queue_type qt ON gq.queue_type_id = qt.id
JOIN lu_cwr_version cv ON gq.cwr_version_id = cv.id
JOIN lu_cwr_submission_type st ON gq.submission_type_id = st.id
JOIN lu_processing_status ps ON gq.status_id = ps.id
JOIN users u ON gq.created_by = u.id
WHERE gq.is_active = TRUE AND gq.is_deleted = FALSE
ORDER BY gq.priority ASC, gq.scheduled_at ASC;

-- -----------------------------------------------------------------------------
-- 6.32 ADDITIONAL CWR RECORD TABLES
-- -----------------------------------------------------------------------------

-- CWR SWT (SOCIETY-ASSIGNED WRITER FOR TERRITORY) RECORDS
CREATE TABLE IF NOT EXISTS cwr_swt_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    swr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'SWT',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Territory Information
    tis_n INT UNSIGNED NOT NULL,
    territory_sequence_n INT UNSIGNED NOT NULL,
    inclusion_exclusion_indicator CHAR(1), -- I/E
    tis_territory_code VARCHAR(4),
    
    -- Shares by Territory
    pr_collection_share DECIMAL(5,2),
    mr_collection_share DECIMAL(5,2),
    sr_collection_share DECIMAL(5,2),
    
    -- Society Information
    pr_society VARCHAR(3),
    mr_society VARCHAR(3),
    sr_society VARCHAR(3),
    
    -- CWR 3.0+ Fields
    share_change CHAR(1),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (swr_id) REFERENCES cwr_swr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_swr_id (swr_id),
    INDEX idx_territory_code (tis_territory_code),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- CWR EWT (EXCLUDED WRITER FOR TERRITORY) RECORDS
CREATE TABLE IF NOT EXISTS cwr_ewt_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    swr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'EWT',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Territory Information
    territory_sequence_n INT UNSIGNED NOT NULL,
    tis_territory_code VARCHAR(4),
    territory_name VARCHAR(60),
    
    -- Exclusion Reason
    exclusion_reason_code CHAR(2),
    exclusion_reason_description VARCHAR(60),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (swr_id) REFERENCES cwr_swr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_swr_id (swr_id),
    INDEX idx_territory_code (tis_territory_code),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- CWR OPA (OTHER PUBLISHER AGREEMENT) RECORDS
CREATE TABLE IF NOT EXISTS cwr_opa_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    agr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'OPA',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Publisher Information
    publisher_sequence_n INT UNSIGNED NOT NULL,
    interested_party_n VARCHAR(13) NOT NULL,
    publisher_name VARCHAR(45) NOT NULL,
    publisher_unknown_indicator CHAR(1),
    publisher_cae_ipi_name_n VARCHAR(11),
    
    -- Agreement Reference
    agreement_n VARCHAR(14),
    society_assigned_agreement_n VARCHAR(14),
    
    -- CWR 3.0+ Fields
    publisher_ipi_base_n VARCHAR(13),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (agr_id) REFERENCES cwr_agr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_agr_id (agr_id),
    INDEX idx_interested_party_n (interested_party_n),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- CWR ADD (ADDITIONAL INFORMATION) RECORDS
CREATE TABLE IF NOT EXISTS cwr_add_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    related_record_id BIGINT UNSIGNED NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'ADD',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Additional Information
    related_record_type CHAR(3) NOT NULL,
    additional_information_type CHAR(2) NOT NULL,
    additional_information TEXT NOT NULL,
    
    -- CWR 3.0+ Fields
    information_sequence_n INT UNSIGNED,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_related_record_type (related_record_type),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- CWR LOG (LOG) RECORDS
CREATE TABLE IF NOT EXISTS cwr_log_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'LOG',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Log Information
    log_sequence_n INT UNSIGNED NOT NULL,
    log_entry_type CHAR(1) NOT NULL, -- I=Info, W=Warning, E=Error
    log_entry_code VARCHAR(10) NOT NULL,
    log_entry_text VARCHAR(60) NOT NULL,
    
    -- Context
    affected_record_type CHAR(3),
    affected_transaction_sequence_n INT UNSIGNED,
    affected_record_sequence_n INT UNSIGNED,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_log_entry_type (log_entry_type),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- CWR SAS (SOCIETY-ASSIGNED AGREEMENT SHARE) RECORDS
CREATE TABLE IF NOT EXISTS cwr_sas_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'SAS',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Agreement Information
    submitter_agreement_n VARCHAR(14) NOT NULL,
    society_assigned_agreement_n VARCHAR(14),
    
    -- Share Adjustment
    interested_party_n VARCHAR(13) NOT NULL,
    pr_share_change DECIMAL(5,2),
    mr_share_change DECIMAL(5,2),
    sr_share_change DECIMAL(5,2),
    
    -- Effective Date
    effective_date CHAR(8) NOT NULL,
    
    -- Reason
    adjustment_reason_code CHAR(2),
    adjustment_reason_description VARCHAR(60),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_agreement_n (submitter_agreement_n),
    INDEX idx_interested_party_n (interested_party_n),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- CWR VER (VERSION INFORMATION) RECORDS - CWR 2.2+
CREATE TABLE IF NOT EXISTS cwr_ver_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'VER',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Version Information
    original_work_title VARCHAR(60),
    original_submitter_work_n VARCHAR(14),
    original_iswc VARCHAR(11),
    version_type CHAR(3) NOT NULL,
    version_description VARCHAR(60),
    
    -- Writers of Original
    original_writer_1_name VARCHAR(75),
    original_writer_1_ipi VARCHAR(11),
    original_writer_2_name VARCHAR(75),
    original_writer_2_ipi VARCHAR(11),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_original_iswc (original_iswc),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- CWR XRF (CROSS REFERENCE) RECORDS - CWR 2.2+
CREATE TABLE IF NOT EXISTS cwr_xrf_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    nwr_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'XRF',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Cross Reference Information
    organization_code VARCHAR(3) NOT NULL,
    identifier_type CHAR(2) NOT NULL,
    identifier_value VARCHAR(20) NOT NULL,
    identifier_validity CHAR(1), -- Y/N/U
    identifier_description VARCHAR(60),
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (nwr_id) REFERENCES cwr_nwr_record(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_nwr_id (nwr_id),
    INDEX idx_identifier (organization_code, identifier_type, identifier_value),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- CWR NOW (NOTIFICATION OF WORKS IN CONFLICT) RECORDS - CWR 3.0+
CREATE TABLE IF NOT EXISTS cwr_now_record (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    transmission_id BIGINT UNSIGNED NOT NULL,
    
    -- Record Identification
    record_type CHAR(3) DEFAULT 'NOW',
    transaction_sequence_n INT UNSIGNED NOT NULL,
    record_sequence_n INT UNSIGNED NOT NULL,
    
    -- Work Information
    title VARCHAR(60) NOT NULL,
    submitter_work_n VARCHAR(14) NOT NULL,
    iswc VARCHAR(11),
    
    -- Conflict Information
    conflict_type CHAR(2) NOT NULL,
    conflict_description VARCHAR(100) NOT NULL,
    conflicting_submitter_code VARCHAR(10),
    conflicting_work_n VARCHAR(14),
    
    -- Resolution
    proposed_resolution VARCHAR(100),
    resolution_deadline CHAR(8),
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Validation
    is_valid BOOLEAN DEFAULT TRUE,
    validation_errors TEXT,
    
    -- Audit Trail
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (transmission_id) REFERENCES cwr_transmission(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_transmission_id (transmission_id),
    INDEX idx_submitter_work_n (submitter_work_n),
    INDEX idx_conflict_type (conflict_type),
    INDEX idx_record_sequence (transaction_sequence_n, record_sequence_n)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- 6.33 SCHEDULED EVENTS
-- -----------------------------------------------------------------------------

-- Process Generation Queue Event
DELIMITER //
CREATE EVENT IF NOT EXISTS evt_process_cwr_generation_queue
ON SCHEDULE EVERY 5 MINUTE
DO
BEGIN
    DECLARE v_queue_id BIGINT;
    DECLARE v_transmission_id BIGINT;
    DECLARE v_done INT DEFAULT FALSE;
    
    DECLARE queue_cursor CURSOR FOR
        SELECT id
        FROM cwr_generation_queue
        WHERE status_id = 1 -- Pending
        AND scheduled_at <= NOW()
        AND is_active = TRUE
        AND is_deleted = FALSE
        ORDER BY priority ASC, scheduled_at ASC
        LIMIT 5;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;
    
    OPEN queue_cursor;
    
    queue_loop: LOOP
        FETCH queue_cursor INTO v_queue_id;
        IF v_done THEN
            LEAVE queue_loop;
        END IF;
        
        -- Update status to processing
        UPDATE cwr_generation_queue
        SET status_id = 2, -- Processing
            started_at = NOW(),
            updated_at = NOW()
        WHERE id = v_queue_id;
        
        -- Call generation procedure (simplified)
        -- In real implementation, this would generate based on queue parameters
        CALL sp_generate_cwr_file(
            (SELECT receiver_code FROM cwr_generation_queue WHERE id = v_queue_id),
            (SELECT cwr_version_id FROM cwr_generation_queue WHERE id = v_queue_id),
            (SELECT submission_type_id FROM cwr_generation_queue WHERE id = v_queue_id),
            (SELECT work_ids FROM cwr_generation_queue WHERE id = v_queue_id),
            1, -- System user
            v_transmission_id
        );
        
        -- Update queue with result
        UPDATE cwr_generation_queue
        SET status_id = 3, -- Completed
            completed_at = NOW(),
            transmission_id = v_transmission_id,
            updated_at = NOW()
        WHERE id = v_queue_id;
        
    END LOOP;
    
    CLOSE queue_cursor;
END//
DELIMITER ;

-- Check for Acknowledgments Event
DELIMITER //
CREATE EVENT IF NOT EXISTS evt_check_cwr_acknowledgments
ON SCHEDULE EVERY 1 HOUR
DO
BEGIN
    -- Check for transmissions past their acknowledgment due date
    UPDATE cwr_transmission
    SET acknowledgment_status_id = 5 -- Overdue
    WHERE acknowledgment_status_id = 1 -- Pending
    AND acknowledgment_due_date < CURDATE()
    AND is_active = TRUE
    AND is_deleted = FALSE;
    
    -- Send notifications for overdue acknowledgments
    INSERT INTO notification_queue (
        notification_type_id,
        recipient_user_id,
        subject,
        message,
        priority_id,
        created_by
    )
    SELECT 
        3, -- Overdue acknowledgment type
        created_by,
        CONCAT('CWR Acknowledgment Overdue: ', transmission_code),
        CONCAT('The acknowledgment for transmission ', transmission_code, 
               ' to ', receiver_code, ' is overdue.'),
        2, -- High priority
        1 -- System user
    FROM cwr_transmission
    WHERE acknowledgment_status_id = 5
    AND updated_at >= DATE_SUB(NOW(), INTERVAL 1 HOUR);
    
END//
DELIMITER ;

-- Archive Old Transmissions Event
DELIMITER //
CREATE EVENT IF NOT EXISTS evt_archive_old_cwr_transmissions
ON SCHEDULE EVERY 1 MONTH
DO
BEGIN
    -- Archive transmissions older than 2 years
    UPDATE cwr_transmission
    SET archived_at = NOW(),
        archived_by = 1, -- System user
        archive_reason = 'Automatic archival after 2 years',
        updated_at = NOW(),
        updated_by = 1
    WHERE created_at < DATE_SUB(NOW(), INTERVAL 2 YEAR)
    AND archived_at IS NULL
    AND is_active = TRUE
    AND is_deleted = FALSE;
    
    -- Move associated files to cold storage
    INSERT INTO archive_job (
        job_type_id,
        entity_type,
        entity_id,
        scheduled_at,
        created_by
    )
    SELECT 
        2, -- File archive type
        'cwr_transmission_file',
        id,
        NOW(),
        1 -- System user
    FROM cwr_transmission_file
    WHERE transmission_id IN (
        SELECT id FROM cwr_transmission
        WHERE archived_at >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
    );
    
END//
DELIMITER ;

-- =====================================================================================
-- Section 7: DDEX TABLES
-- =====================================================================================

-- Switch back to astro_db for main tables
USE astro_db;

-- =====================================================================================
-- DDEX MESSAGE ENVELOPE AND HEADER
-- =====================================================================================

-- DDEX Message (ERN/DSR/MWN/etc.) - Schema Compliant with FK References
CREATE TABLE ddex_message (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- MessageHeader (required 1)
    message_thread_id VARCHAR(50) NOT NULL,
    message_id VARCHAR(50) NOT NULL,
    message_file_name VARCHAR(500) NULL,
    message_created_date_time DATETIME NOT NULL,
    message_schema_version_id VARCHAR(20) NOT NULL,
    language_and_script_code VARCHAR(20) NULL,
    
    -- Sender/Recipient (required)
    sender_party_id BIGINT UNSIGNED NOT NULL,
    sender_name VARCHAR(250) NULL,
    recipient_party_id BIGINT UNSIGNED NOT NULL,
    recipient_name VARCHAR(250) NULL,
    
    -- Message Type and Standard (FK to resource_db)
    ddex_standard_id BIGINT UNSIGNED NOT NULL,
    ddex_version VARCHAR(10) NOT NULL,
    message_format_type VARCHAR(50) NOT NULL DEFAULT 'XML',
    
    -- UpdateIndicator (optional 0-1)
    update_indicator VARCHAR(50) NULL, -- OriginalMessage, UpdateMessage, etc.
    
    -- Processing Information (FK to resource_db)
    processing_status_id BIGINT UNSIGNED NOT NULL,
    validation_status_id BIGINT UNSIGNED NOT NULL,
    
    -- Message Content
    original_xml_content LONGTEXT NULL,
    processed_content_json JSON NULL,
    message_size_bytes BIGINT NULL,
    message_checksum VARCHAR(128) NULL,
    
    -- Delivery Information
    delivery_status_id BIGINT UNSIGNED NOT NULL,
    delivery_method_id BIGINT UNSIGNED NULL,
    delivery_endpoint_url VARCHAR(1000) NULL,
    
    -- Batch Processing
    batch_id VARCHAR(255) NULL,
    sequence_number INT NULL,
    
    -- Error Handling
    validation_error_count INT NOT NULL DEFAULT 0,
    business_error_count INT NOT NULL DEFAULT 0,
    last_error_message TEXT NULL,
    retry_count INT NOT NULL DEFAULT 0,
    max_retries INT NOT NULL DEFAULT 3,
    next_retry_at DATETIME NULL,
    
    -- Acknowledgment
    acknowledgment_required BOOLEAN NOT NULL DEFAULT TRUE,
    acknowledgment_received_at DATETIME NULL,
    acknowledgment_message_id VARCHAR(50) NULL,
    
    -- Security and Encryption
    digital_signature_present BOOLEAN NOT NULL DEFAULT FALSE,
    signature_validation_status VARCHAR(50) NULL,
    encryption_method VARCHAR(100) NULL,
    row_hash VARCHAR(64) NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason VARCHAR(500) NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys to resource_db
    FOREIGN KEY (ddex_standard_id) REFERENCES resource_db.ddex_standards(id),
    FOREIGN KEY (processing_status_id) REFERENCES resource_db.ddex_processing_statuses(id),
    FOREIGN KEY (validation_status_id) REFERENCES resource_db.ddex_validation_statuses(id),
    FOREIGN KEY (delivery_status_id) REFERENCES resource_db.delivery_statuses(id),
    FOREIGN KEY (delivery_method_id) REFERENCES resource_db.delivery_methods(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (archived_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ddex_message_thread (message_thread_id),
    INDEX idx_ddex_message_id (message_id),
    INDEX idx_ddex_standard (ddex_standard_id),
    INDEX idx_ddex_processing_status (processing_status_id),
    INDEX idx_ddex_validation_status (validation_status_id),
    INDEX idx_ddex_created_date (message_created_date_time),
    INDEX idx_ddex_batch (batch_id),
    INDEX idx_ddex_retry (next_retry_at),
    INDEX idx_ddex_active (is_active, is_deleted),
    
    -- Unique Constraints
    UNIQUE KEY uk_ddex_message_id (message_id),
    UNIQUE KEY uk_ddex_message_file (message_file_name),
    
    -- Check Constraints (No ENUMs - using string values validated at application level)
    CONSTRAINT chk_ddex_message_format CHECK (
        message_format_type IN ('XML', 'JSON', 'EDI')
    ),
    CONSTRAINT chk_ddex_update_indicator CHECK (
        update_indicator IS NULL OR 
        update_indicator IN ('OriginalMessage', 'UpdateMessage', 'CorrectionMessage', 'CancellationMessage')
    )
);

-- =====================================================================================
-- DDEX PARTY MANAGEMENT
-- =====================================================================================

-- DDEX Party (PartyReference compliant)
CREATE TABLE ddex_party (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- PartyId (required 1-unbounded) - handled in separate table for proper cardinality
    
    -- PartyName (optional 0-unbounded)
    full_name VARCHAR(500) NULL,
    full_name_ascii_transcribed VARCHAR(500) NULL,
    full_name_indexed VARCHAR(500) NULL,
    names_before_key_name VARCHAR(500) NULL,
    key_name VARCHAR(500) NULL,
    names_after_key_name VARCHAR(500) NULL,
    abbreviation VARCHAR(100) NULL,
    
    -- PartyType (required 1) - FK to resource_db
    party_type_id BIGINT UNSIGNED NOT NULL,
    
    -- Contact Information
    email_address VARCHAR(255) NULL,
    phone_number VARCHAR(50) NULL,
    fax_number VARCHAR(50) NULL,
    
    -- Address (PostalAddress)
    street_address JSON NULL, -- Can be multiple lines
    city VARCHAR(100) NULL,
    postal_code VARCHAR(20) NULL,
    territory_code VARCHAR(10) NULL, -- FK validated via constraint
    
    -- Role and Status
    role_in_release JSON NULL, -- Can have multiple roles
    party_status_id BIGINT UNSIGNED NOT NULL,
    
    -- Link to Core ASTRO Party
    core_party_id BIGINT UNSIGNED NULL,
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason VARCHAR(500) NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (party_type_id) REFERENCES resource_db.party_types(id),
    FOREIGN KEY (party_status_id) REFERENCES resource_db.party_statuses(id),
    FOREIGN KEY (core_party_id) REFERENCES parties(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (archived_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ddex_party_type (party_type_id),
    INDEX idx_ddex_party_full_name (full_name),
    INDEX idx_ddex_party_key_name (key_name),
    INDEX idx_ddex_party_territory (territory_code),
    INDEX idx_ddex_core_party (core_party_id),
    INDEX idx_ddex_party_active (is_active, is_deleted),
    
    -- Check Constraints (validate territory code against resource_db)
    CONSTRAINT chk_ddex_party_territory CHECK (
        territory_code IS NULL OR 
        territory_code IN (SELECT territory_code FROM resource_db.iso_territory_codes WHERE is_active = TRUE)
    )
);

-- DDEX Party IDs (required 1-unbounded) - Separate table for proper cardinality
CREATE TABLE ddex_party_id (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    ddex_party_id BIGINT UNSIGNED NOT NULL,
    
    -- PartyIdType (required 1) - FK to resource_db
    party_id_type_id BIGINT UNSIGNED NOT NULL,
    
    -- PartyIdValue (required 1) - with format validation
    party_id_value VARCHAR(255) NOT NULL,
    
    -- Namespace (optional 0-1)
    party_id_namespace VARCHAR(100) NULL,
    
    -- Sequence for ordering
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (ddex_party_id) REFERENCES ddex_party(id) ON DELETE CASCADE,
    FOREIGN KEY (party_id_type_id) REFERENCES resource_db.ddex_party_id_types(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ddex_party_id_party (ddex_party_id),
    INDEX idx_ddex_party_id_type (party_id_type_id),
    INDEX idx_ddex_party_id_value (party_id_value),
    INDEX idx_ddex_party_id_sequence (sequence_number),
    INDEX idx_ddex_party_id_active (is_active, is_deleted),
    
    -- Unique Constraints
    UNIQUE KEY uk_ddex_party_id_unique (ddex_party_id, party_id_type_id, party_id_value, party_id_namespace)
);

-- Update ddex_message to reference ddex_party properly
ALTER TABLE ddex_message 
ADD CONSTRAINT fk_ddex_message_sender FOREIGN KEY (sender_party_id) REFERENCES ddex_party(id),
ADD CONSTRAINT fk_ddex_message_recipient FOREIGN KEY (recipient_party_id) REFERENCES ddex_party(id);

-- =====================================================================================
-- ERN 4.3 IMPLEMENTATION
-- =====================================================================================

-- ERN SoundRecording (100% XSD Compliant with FK References)
CREATE TABLE ddex_ern_sound_recording (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Message Reference
    ddex_message_id BIGINT UNSIGNED NOT NULL,
    
    -- ResourceReference (required 1) - exactly as XSD
    resource_reference VARCHAR(50) NOT NULL,
    
    -- Type (required 1) - FK validated via resource_db
    sound_recording_type_id BIGINT UNSIGNED NOT NULL,
    
    -- WorkId reference (optional 0-unbounded) - handled separately
    
    -- LanguageOfPerformance (optional 0-1)
    language_of_performance VARCHAR(20) NULL,
    
    -- PerformanceDate (optional 0-1)
    performance_date DATE NULL,
    
    -- PerformanceTerritory (optional 0-1)
    performance_territory VARCHAR(10) NULL,
    
    -- RecordingMode (optional 0-1)
    recording_mode VARCHAR(50) NULL,
    
    -- IsRemastered (optional 0-1)
    is_remastered BOOLEAN NULL,
    
    -- DisplayCredits (optional 0-1)
    display_credits TEXT NULL,
    
    -- OriginalResourceReference (optional 0-1)
    original_resource_reference VARCHAR(50) NULL,
    
    -- CourtesyLine (optional 0-1)
    courtesy_line VARCHAR(1000) NULL,
    
    -- SequenceNumber (optional 0-1)
    sequence_number INT NULL,
    
    -- MarketingComment (optional 0-1)
    marketing_comment TEXT NULL,
    
    -- ParentalWarningType (optional 0-unbounded) - stored as JSON
    parental_warning_types JSON NULL,
    
    -- Genre (optional 0-unbounded) - stored as JSON referencing genre IDs
    genre_ids JSON NULL,
    
    -- Link to Core ASTRO Catalog
    core_recording_id BIGINT UNSIGNED NULL,
    
    -- Security
    row_hash VARCHAR(64) NULL,
    encryption_version INT NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason VARCHAR(500) NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (ddex_message_id) REFERENCES ddex_message(id) ON DELETE CASCADE,
    FOREIGN KEY (sound_recording_type_id) REFERENCES resource_db.ddex_resource_types(id),
    FOREIGN KEY (core_recording_id) REFERENCES recordings(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (archived_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_sr_message (ddex_message_id),
    INDEX idx_ern_sr_reference (resource_reference),
    INDEX idx_ern_sr_type (sound_recording_type_id),
    INDEX idx_ern_sr_performance_date (performance_date),
    INDEX idx_ern_sr_territory (performance_territory),
    INDEX idx_ern_sr_core (core_recording_id),
    INDEX idx_ern_sr_active (is_active, is_deleted),
    
    -- Unique Constraints (per XSD)
    UNIQUE KEY uk_ern_sr_reference (ddex_message_id, resource_reference),
    
    -- Check Constraints
    CONSTRAINT chk_ern_sr_resource_reference CHECK (
        resource_reference REGEXP '^[A-Za-z0-9_-]{1,50}$'
    ),
    CONSTRAINT chk_ern_sr_performance_territory CHECK (
        performance_territory IS NULL OR 
        performance_territory IN (SELECT territory_code FROM resource_db.iso_territory_codes WHERE is_active = TRUE)
    ),
    CONSTRAINT chk_ern_sr_language_performance CHECK (
        language_of_performance IS NULL OR 
        language_of_performance REGEXP '^[a-z]{2,3}(-[A-Z][a-z]{3})?$'
    ),
    CONSTRAINT chk_ern_sr_recording_mode CHECK (
        recording_mode IS NULL OR 
        recording_mode IN ('Analogue', 'Digital', 'DDD', 'ADD', 'AAD', 'Unknown')
    )
);

-- ERN SoundRecordingId (required 1-unbounded) - Separate table for proper cardinality
CREATE TABLE ddex_ern_sound_recording_id (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    sound_recording_id BIGINT UNSIGNED NOT NULL,
    
    -- SoundRecordingIdType (required 1) - FK to resource_db
    resource_id_type_id BIGINT UNSIGNED NOT NULL,
    
    -- SoundRecordingIdValue (required 1) - with format validation
    resource_id_value VARCHAR(50) NOT NULL,
    
    -- Namespace (optional 0-1)
    resource_id_namespace VARCHAR(100) NULL,
    
    -- Sequence for ordering
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (sound_recording_id) REFERENCES ddex_ern_sound_recording(id) ON DELETE CASCADE,
    FOREIGN KEY (resource_id_type_id) REFERENCES resource_db.ddex_resource_id_types(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_sr_id_sr (sound_recording_id),
    INDEX idx_ern_sr_id_type (resource_id_type_id),
    INDEX idx_ern_sr_id_value (resource_id_value),
    INDEX idx_ern_sr_id_sequence (sequence_number),
    INDEX idx_ern_sr_id_active (is_active, is_deleted),
    
    -- Unique Constraints
    UNIQUE KEY uk_ern_sr_id_unique (sound_recording_id, resource_id_type_id, resource_id_value, resource_id_namespace)
);

-- ERN ReferenceTitle (required 1) - Separate table for proper structure
CREATE TABLE ddex_ern_reference_title (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    sound_recording_id BIGINT UNSIGNED NOT NULL,
    
    -- TitleText (required 1)
    title_text VARCHAR(500) NOT NULL,
    
    -- LanguageAndScriptCode (optional 0-1) - ISO 639 + ISO 15924
    language_and_script_code VARCHAR(20) NULL,
    
    -- SubTitle (optional 0-1)
    sub_title VARCHAR(500) NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (sound_recording_id) REFERENCES ddex_ern_sound_recording(id) ON DELETE CASCADE,
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_ref_title_sr (sound_recording_id),
    INDEX idx_ern_ref_title_text (title_text),
    INDEX idx_ern_ref_title_lang (language_and_script_code),
    INDEX idx_ern_ref_title_active (is_active, is_deleted),
    
    -- Unique Constraint (only one reference title per sound recording)
    UNIQUE KEY uk_ern_ref_title_sr (sound_recording_id),
    
    -- Check Constraints
    CONSTRAINT chk_ern_ref_title_text_not_empty CHECK (LENGTH(TRIM(title_text)) > 0),
    CONSTRAINT chk_ern_ref_title_lang_format CHECK (
        language_and_script_code IS NULL OR 
        language_and_script_code REGEXP '^[a-z]{2,3}(-[A-Z][a-z]{3})?$'
    )
);

-- ERN AdditionalTitle (optional 0-unbounded) - Proper cardinality implementation
CREATE TABLE ddex_ern_additional_title (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    sound_recording_id BIGINT UNSIGNED NOT NULL,
    
    -- TitleText (required 1)
    title_text VARCHAR(500) NOT NULL,
    
    -- TitleType (optional 0-1) - FK to resource_db
    title_type_id BIGINT UNSIGNED NULL,
    
    -- LanguageAndScriptCode (optional 0-1)
    language_and_script_code VARCHAR(20) NULL,
    
    -- SubTitle (optional 0-1)
    sub_title VARCHAR(500) NULL,
    
    -- Sequence for ordering
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (sound_recording_id) REFERENCES ddex_ern_sound_recording(id) ON DELETE CASCADE,
    FOREIGN KEY (title_type_id) REFERENCES resource_db.ddex_title_types(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_add_title_sr (sound_recording_id),
    INDEX idx_ern_add_title_text (title_text),
    INDEX idx_ern_add_title_type (title_type_id),
    INDEX idx_ern_add_title_seq (sequence_number),
    INDEX idx_ern_add_title_active (is_active, is_deleted),
    
    -- Check Constraints
    CONSTRAINT chk_ern_add_title_text_not_empty CHECK (LENGTH(TRIM(title_text)) > 0),
    CONSTRAINT chk_ern_add_title_lang_format CHECK (
        language_and_script_code IS NULL OR 
        language_and_script_code REGEXP '^[a-z]{2,3}(-[A-Z][a-z]{3})?$'
    )
);

-- ERN Duration (optional 0-1) - ISO 8601 Format Enforced
CREATE TABLE ddex_ern_duration (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    sound_recording_id BIGINT UNSIGNED NOT NULL,
    
    -- Duration in ISO 8601 format (PT30S, PT3M30S, PT1H30M45S)
    duration_iso8601 VARCHAR(20) NOT NULL,
    
    -- Duration in seconds (for easier querying)
    duration_seconds INT NOT NULL,
    
    -- Duration precision - FK to resource_db
    duration_precision_id BIGINT UNSIGNED NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (sound_recording_id) REFERENCES ddex_ern_sound_recording(id) ON DELETE CASCADE,
    FOREIGN KEY (duration_precision_id) REFERENCES resource_db.ddex_duration_precision_types(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_duration_sr (sound_recording_id),
    INDEX idx_ern_duration_seconds (duration_seconds),
    INDEX idx_ern_duration_precision (duration_precision_id),
    INDEX idx_ern_duration_active (is_active, is_deleted),
    
    -- Unique Constraint (only one duration per sound recording)
    UNIQUE KEY uk_ern_duration_sr (sound_recording_id),
    
    -- Check Constraints
    CONSTRAINT chk_ern_duration_iso8601_format CHECK (
        duration_iso8601 REGEXP '^PT([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9]+)?S)?$' AND
        duration_iso8601 != 'PT'
    ),
    CONSTRAINT chk_ern_duration_seconds_positive CHECK (duration_seconds > 0)
);

-- ERN DisplayArtistName (optional 0-unbounded) - Proper cardinality
CREATE TABLE ddex_ern_display_artist_name (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    sound_recording_id BIGINT UNSIGNED NOT NULL,
    
    -- ArtistName (required 1)
    artist_name VARCHAR(250) NOT NULL,
    
    -- LanguageAndScriptCode (optional 0-1)
    language_and_script_code VARCHAR(20) NULL,
    
    -- SequenceNumber (for ordering multiple artists)
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- ArtistRole (optional) - FK to resource_db
    artist_role_id BIGINT UNSIGNED NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (sound_recording_id) REFERENCES ddex_ern_sound_recording(id) ON DELETE CASCADE,
    FOREIGN KEY (artist_role_id) REFERENCES resource_db.ddex_artist_role_types(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_artist_name_sr (sound_recording_id),
    INDEX idx_ern_artist_name_name (artist_name),
    INDEX idx_ern_artist_name_seq (sequence_number),
    INDEX idx_ern_artist_name_role (artist_role_id),
    INDEX idx_ern_artist_name_active (is_active, is_deleted),
    
    -- Check Constraints
    CONSTRAINT chk_ern_artist_name_not_empty CHECK (LENGTH(TRIM(artist_name)) > 0),
    CONSTRAINT chk_ern_artist_name_lang_format CHECK (
        language_and_script_code IS NULL OR 
        language_and_script_code REGEXP '^[a-z]{2,3}(-[A-Z][a-z]{3})?$'
    )
);

-- ERN PLine (optional 0-unbounded) - Copyright information
CREATE TABLE ddex_ern_p_line (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    sound_recording_id BIGINT UNSIGNED NOT NULL,
    
    -- Year (optional 0-1)
    p_line_year YEAR NULL,
    
    -- PLineCompany (optional 0-1)
    p_line_company VARCHAR(250) NULL,
    
    -- PLineText (required 1)
    p_line_text VARCHAR(1000) NOT NULL,
    
    -- LanguageAndScriptCode (optional 0-1)
    language_and_script_code VARCHAR(20) NULL,
    
    -- Sequence for multiple P-lines
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (sound_recording_id) REFERENCES ddex_ern_sound_recording(id) ON DELETE CASCADE,
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_p_line_sr (sound_recording_id),
    INDEX idx_ern_p_line_year (p_line_year),
    INDEX idx_ern_p_line_company (p_line_company),
    INDEX idx_ern_p_line_seq (sequence_number),
    INDEX idx_ern_p_line_active (is_active, is_deleted),
    
    -- Check Constraints
    CONSTRAINT chk_ern_p_line_text_not_empty CHECK (LENGTH(TRIM(p_line_text)) > 0),
    CONSTRAINT chk_ern_p_line_year_valid CHECK (
        p_line_year IS NULL OR 
        (p_line_year >= 1900 AND p_line_year <= YEAR(CURDATE()) + 5)
    ),
    CONSTRAINT chk_ern_p_line_lang_format CHECK (
        language_and_script_code IS NULL OR 
        language_and_script_code REGEXP '^[a-z]{2,3}(-[A-Z][a-z]{3})?$'
    )
);

-- =====================================================================================
-- ERN RELEASE IMPLEMENTATION
-- =====================================================================================

-- ERN Release (100% XSD Compliant with FK References)
CREATE TABLE ddex_ern_release (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Message Reference
    ddex_message_id BIGINT UNSIGNED NOT NULL,
    
    -- ReleaseReference (required 1)
    release_reference VARCHAR(50) NOT NULL,
    
    -- ReleaseType (required 1) - FK to resource_db
    release_type_id BIGINT UNSIGNED NOT NULL,
    
    -- IsMainRelease (optional 0-1)
    is_main_release BOOLEAN NULL,
    
    -- Link to Core ASTRO Catalog
    core_album_id BIGINT UNSIGNED NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    archived_at DATETIME NULL,
    archived_by BIGINT UNSIGNED NULL,
    archive_reason VARCHAR(500) NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (ddex_message_id) REFERENCES ddex_message(id) ON DELETE CASCADE,
    FOREIGN KEY (release_type_id) REFERENCES resource_db.ddex_release_types(id),
    FOREIGN KEY (core_album_id) REFERENCES albums(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (archived_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_release_message (ddex_message_id),
    INDEX idx_ern_release_reference (release_reference),
    INDEX idx_ern_release_type (release_type_id),
    INDEX idx_ern_release_main (is_main_release),
    INDEX idx_ern_release_core (core_album_id),
    INDEX idx_ern_release_active (is_active, is_deleted),
    
    -- Unique Constraints
    UNIQUE KEY uk_ern_release_reference (ddex_message_id, release_reference),
    
    -- Check Constraints
    CONSTRAINT chk_ern_release_reference_format CHECK (
        release_reference REGEXP '^[A-Za-z0-9_-]{1,50}$'
    )
);

-- ERN ReleaseId (required 1-unbounded)
CREATE TABLE ddex_ern_release_id (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    release_id BIGINT UNSIGNED NOT NULL,
    
    -- ReleaseIdType (required 1) - FK to resource_db
    release_id_type_id BIGINT UNSIGNED NOT NULL,
    
    -- ReleaseIdValue (required 1) - with format validation
    release_id_value VARCHAR(50) NOT NULL,
    
    -- Namespace (optional 0-1)
    release_id_namespace VARCHAR(100) NULL,
    
    -- Sequence for ordering
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (release_id) REFERENCES ddex_ern_release(id) ON DELETE CASCADE,
    FOREIGN KEY (release_id_type_id) REFERENCES resource_db.ddex_release_id_types(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_rel_id_rel (release_id),
    INDEX idx_ern_rel_id_type (release_id_type_id),
    INDEX idx_ern_rel_id_value (release_id_value),
    INDEX idx_ern_rel_id_sequence (sequence_number),
    INDEX idx_ern_rel_id_active (is_active, is_deleted),
    
    -- Unique Constraints
    UNIQUE KEY uk_ern_rel_id_unique (release_id, release_id_type_id, release_id_value, release_id_namespace)
);

-- ERN Release ReferenceTitle (required 1)
CREATE TABLE ddex_ern_release_reference_title (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    release_id BIGINT UNSIGNED NOT NULL,
    
    -- TitleText (required 1)
    title_text VARCHAR(500) NOT NULL,
    
    -- LanguageAndScriptCode (optional 0-1)
    language_and_script_code VARCHAR(20) NULL,
    
    -- SubTitle (optional 0-1)
    sub_title VARCHAR(500) NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (release_id) REFERENCES ddex_ern_release(id) ON DELETE CASCADE,
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_rel_ref_title_rel (release_id),
    INDEX idx_ern_rel_ref_title_text (title_text),
    INDEX idx_ern_rel_ref_title_active (is_active, is_deleted),
    
    -- Unique Constraint (only one reference title per release)
    UNIQUE KEY uk_ern_rel_ref_title_rel (release_id),
    
    -- Check Constraints
    CONSTRAINT chk_ern_rel_ref_title_text_not_empty CHECK (LENGTH(TRIM(title_text)) > 0),
    CONSTRAINT chk_ern_rel_ref_title_lang_format CHECK (
        language_and_script_code IS NULL OR 
        language_and_script_code REGEXP '^[a-z]{2,3}(-[A-Z][a-z]{3})?$'
    )
);

-- ERN ReleaseResourceReference (required 1-unbounded) - Links to resources
CREATE TABLE ddex_ern_release_resource_reference (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    release_id BIGINT UNSIGNED NOT NULL,
    
    -- ResourceReference (required 1) - must match SoundRecording ResourceReference
    resource_reference VARCHAR(50) NOT NULL,
    
    -- ReleaseResourceType (optional 0-1)
    release_resource_type VARCHAR(50) NULL,
    
    -- SequenceNumber (for track ordering)
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (release_id) REFERENCES ddex_ern_release(id) ON DELETE CASCADE,
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_rel_res_ref_rel (release_id),
    INDEX idx_ern_rel_res_ref_ref (resource_reference),
    INDEX idx_ern_rel_res_ref_seq (sequence_number),
    INDEX idx_ern_rel_res_ref_type (release_resource_type),
    INDEX idx_ern_rel_res_ref_active (is_active, is_deleted),
    
    -- Unique Constraints
    UNIQUE KEY uk_ern_rel_res_ref (release_id, resource_reference),
    
    -- Check Constraints
    CONSTRAINT chk_ern_rel_res_ref_format CHECK (
        resource_reference REGEXP '^[A-Za-z0-9_-]{1,50}$'
    ),
    CONSTRAINT chk_ern_rel_res_type CHECK (
        release_resource_type IS NULL OR 
        release_resource_type IN ('PrimaryResource', 'SecondaryResource', 'HiddenResource')
    )
);

-- ERN ReleaseDetailsByTerritory (required 1-unbounded) - Separate table for proper structure
CREATE TABLE ddex_ern_release_details_by_territory (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    release_id BIGINT UNSIGNED NOT NULL,
    
    -- TerritoryCode (required 1) - FK validated against ISO codes
    territory_code VARCHAR(10) NOT NULL,
    
    -- OriginalReleaseDate (optional 0-1)
    original_release_date DATE NULL,
    
    -- OriginalDigitalReleaseDate (optional 0-1)  
    original_digital_release_date DATE NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (release_id) REFERENCES ddex_ern_release(id) ON DELETE CASCADE,
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_rel_det_terr_rel (release_id),
    INDEX idx_ern_rel_det_terr_terr (territory_code),
    INDEX idx_ern_rel_det_terr_orig_date (original_release_date),
    INDEX idx_ern_rel_det_terr_dig_date (original_digital_release_date),
    INDEX idx_ern_rel_det_terr_active (is_active, is_deleted),
    
    -- Unique Constraints (one detail set per territory per release)
    UNIQUE KEY uk_ern_rel_det_terr (release_id, territory_code),
    
    -- Check Constraints
    CONSTRAINT chk_ern_rel_det_territory_code CHECK (
        territory_code IN (SELECT territory_code FROM resource_db.iso_territory_codes WHERE is_active = TRUE)
    ),
    CONSTRAINT chk_ern_rel_det_release_dates CHECK (
        original_digital_release_date IS NULL OR 
        original_release_date IS NULL OR 
        original_digital_release_date >= original_release_date
    )
);

-- ERN ReleaseDetailsByTerritory DisplayArtistName (required 1-unbounded)
CREATE TABLE ddex_ern_release_display_artist_name (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Parent Reference
    release_details_by_territory_id BIGINT UNSIGNED NOT NULL,
    
    -- ArtistName (required 1)
    artist_name VARCHAR(250) NOT NULL,
    
    -- LanguageAndScriptCode (optional 0-1)
    language_and_script_code VARCHAR(20) NULL,
    
    -- SequenceNumber (for ordering multiple artists)
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (release_details_by_territory_id) REFERENCES ddex_ern_release_details_by_territory(id) ON DELETE CASCADE,
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_ern_rel_disp_artist_det (release_details_by_territory_id),
    INDEX idx_ern_rel_disp_artist_name (artist_name),
    INDEX idx_ern_rel_disp_artist_seq (sequence_number),
    INDEX idx_ern_rel_disp_artist_active (is_active, is_deleted),
    
    -- Check Constraints
    CONSTRAINT chk_ern_rel_disp_artist_name_not_empty CHECK (LENGTH(TRIM(artist_name)) > 0),
    CONSTRAINT chk_ern_rel_disp_artist_lang_format CHECK (
        language_and_script_code IS NULL OR 
        language_and_script_code REGEXP '^[a-z]{2,3}(-[A-Z][a-z]{3})?$'
    )
);

-- =====================================================================================
-- DDEX XML GENERATION ENGINE
-- =====================================================================================

-- DDEX XML Templates (Schema-Based with FK References)
CREATE TABLE ddex_xml_template (
    id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    
    -- Template Identification
    template_name VARCHAR(255) NOT NULL,
    ddex_standard_id BIGINT UNSIGNED NOT NULL,
    ddex_version VARCHAR(10) NOT NULL,
    template_version VARCHAR(20) NOT NULL,
    
    -- Template Content
    xml_namespace_declarations TEXT NOT NULL,
    schema_location VARCHAR(1000) NOT NULL,
    root_element_template LONGTEXT NOT NULL,
    
    -- Field Mappings
    field_mappings JSON NOT NULL, -- Database field to XML element mappings
    transformation_rules JSON NULL, -- Data transformation rules
    validation_rules JSON NULL, -- Custom validation rules
    
    -- Template Metadata
    description TEXT NULL,
    usage_notes TEXT NULL,
    partner_customizations JSON NULL, -- Partner-specific variations
    
    -- Template Status
    is_default BOOLEAN NOT NULL DEFAULT FALSE,
    is_certified BOOLEAN NOT NULL DEFAULT FALSE,
    effective_date DATE NOT NULL,
    expiry_date DATE NULL,
    
    -- Audit Trail
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at DATETIME NULL,
    deleted_by BIGINT UNSIGNED NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED NOT NULL,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED NOT NULL,
    version INT NOT NULL DEFAULT 1,
    
    -- Foreign Keys
    FOREIGN KEY (ddex_standard_id) REFERENCES resource_db.ddex_standards(id),
    FOREIGN KEY (deleted_by) REFERENCES users(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (updated_by) REFERENCES users(id),
    
    -- Indexes
    INDEX idx_xml_template_name (template_name),
    INDEX idx_xml_template_standard (ddex_standard_id),
    INDEX idx_xml_template_version (ddex_version),
    INDEX idx_xml_template_default (is_default),
    INDEX idx_xml_template_certified (is_certified),
    INDEX idx_xml_template_effective (effective_date),
    INDEX idx_xml_template_active (is_active, is_deleted),
    
    -- Unique Constraints
    UNIQUE KEY uk_xml_template (ddex_standard_id, ddex_version, template_name)
);

-- =====================================================================================
-- STORED PROCEDURES FOR 100% SCHEMA-COMPLIANT XML GENERATION
-- =====================================================================================

DELIMITER //

-- Generate 100% Schema-Compliant ERN 4.3 XML (No ENUMs)
CREATE PROCEDURE sp_generate_ern43_xml_100_schema_compliant(
    IN p_ddex_message_id BIGINT,
    IN p_validate_against_xsd BOOLEAN DEFAULT TRUE,
    IN p_created_by BIGINT,
    OUT p_generated_xml LONGTEXT,
    OUT p_validation_status VARCHAR(50),
    OUT p_validation_errors JSON,
    OUT p_status_message VARCHAR(1000)
)
BEGIN
    DECLARE v_xml_declaration TEXT;
    DECLARE v_root_element_start TEXT;
    DECLARE v_message_header TEXT;
    DECLARE v_resource_list TEXT;
    DECLARE v_release_list TEXT;
    DECLARE v_final_xml LONGTEXT;
    DECLARE v_message_id VARCHAR(50);
    DECLARE v_thread_id VARCHAR(50);
    DECLARE v_standard_code VARCHAR(10);
    DECLARE v_validation_errors JSON DEFAULT JSON_ARRAY();
    DECLARE v_error_count INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        GET DIAGNOSTICS CONDITION 1
            p_status_message = MESSAGE_TEXT;
        SET p_generated_xml = NULL;
        SET p_validation_status = 'ERROR';
        SET p_validation_errors = JSON_OBJECT('error', p_status_message);
    END;

    START TRANSACTION;

    -- Get message details with standard verification
    SELECT 
        dm.message_id, 
        dm.message_thread_id,
        ds.standard_code
    INTO 
        v_message_id, 
        v_thread_id,
        v_standard_code
    FROM ddex_message dm
    JOIN resource_db.ddex_standards ds ON dm.ddex_standard_id = ds.id
    WHERE dm.id = p_ddex_message_id;

    -- Verify this is an ERN message
    IF v_standard_code != 'ERN' THEN
        SET p_status_message = 'Message is not an ERN message';
        SET p_validation_status = 'ERROR';
        SET p_validation_errors = JSON_OBJECT('error', p_status_message);
        ROLLBACK;
        LEAVE sp_generate_ern43_xml_100_schema_compliant;
    END IF;

    -- Build XML Declaration
    SET v_xml_declaration = '<?xml version="1.0" encoding="UTF-8"?>';

    -- Build Root Element with Namespaces (100% XSD Compliant)
    SET v_root_element_start = CONCAT(
        '<ern:NewReleaseMessage ',
        'xmlns:ern="http://ddex.net/xml/ern/43" ',
        'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ',
        'xsi:schemaLocation="http://ddex.net/xml/ern/43 ',
        'http://service.ddex.net/xml/ern/43/ern-main.xsd" ',
        'MessageSchemaVersionId="ern/43" ',
        'LanguageAndScriptCode="en">'
    );

    -- Build Message Header (100% Schema Compliant)
    CALL sp_build_ern_message_header_schema_compliant(p_ddex_message_id, v_message_header);

    -- Build ResourceList (100% Schema Compliant)
    CALL sp_build_ern_resource_list_schema_compliant(p_ddex_message_id, v_resource_list);

    -- Build ReleaseList (100% Schema Compliant)
    CALL sp_build_ern_release_list_schema_compliant(p_ddex_message_id, v_release_list);

    -- Assemble Final XML
    SET v_final_xml = CONCAT(
        v_xml_declaration,
        v_root_element_start,
        v_message_header,
        '<ern:UpdateIndicator>OriginalMessage</ern:UpdateIndicator>',
        v_resource_list,
        v_release_list,
        '</ern:NewReleaseMessage>'
    );

    -- Perform 100% Schema Validation
    IF p_validate_against_xsd THEN
        CALL sp_validate_ern_xml_schema_compliant(v_final_xml, v_validation_errors, v_error_count);
    END IF;

    -- Determine validation status
    IF v_error_count = 0 THEN
        SET p_validation_status = 'VALID';
        SET p_status_message = 'ERN 4.3 XML generated and validated successfully';
    ELSE
        SET p_validation_status = 'INVALID';
        SET p_status_message = CONCAT('ERN 4.3 XML validation failed with ', v_error_count, ' errors');
    END IF;

    -- Update message with generated XML
    UPDATE ddex_message 
    SET 
        original_xml_content = v_final_xml,
        processing_status_id = CASE 
            WHEN v_error_count = 0 THEN 
                (SELECT id FROM resource_db.ddex_processing_statuses WHERE status_code = 'XML_GENERATED' LIMIT 1)
            ELSE 
                (SELECT id FROM resource_db.ddex_processing_statuses WHERE status_code = 'VALIDATION_FAILED' LIMIT 1)
        END,
        validation_status_id = CASE 
            WHEN v_error_count = 0 THEN 
                (SELECT id FROM resource_db.ddex_validation_statuses WHERE status_code = 'PASSED' LIMIT 1)
            ELSE 
                (SELECT id FROM resource_db.ddex_validation_statuses WHERE status_code = 'FAILED' LIMIT 1)
        END,
        validation_error_count = v_error_count,
        updated_by = p_created_by
    WHERE id = p_ddex_message_id;

    SET p_generated_xml = v_final_xml;
    SET p_validation_errors = v_validation_errors;

    COMMIT;
END//

-- Build Schema-Compliant Message Header (No ENUMs)
CREATE PROCEDURE sp_build_ern_message_header_schema_compliant(
    IN p_ddex_message_id BIGINT,
    OUT p_message_header_xml TEXT
)
BEGIN
    DECLARE v_message_id VARCHAR(50);
    DECLARE v_thread_id VARCHAR(50);
    DECLARE v_message_created DATETIME;
    DECLARE v_sender_dpid VARCHAR(255);
    DECLARE v_recipient_dpid VARCHAR(255);
    DECLARE v_sender_name VARCHAR(250);
    DECLARE v_recipient_name VARCHAR(250);

    -- Get message details with party information (no ENUMs)
    SELECT 
        dm.message_id,
        dm.message_thread_id,
        dm.message_created_date_time,
        sp_id.party_id_value,
        rp_id.party_id_value,
        sp.full_name,
        rp.full_name
    INTO 
        v_message_id,
        v_thread_id,
        v_message_created,
        v_sender_dpid,
        v_recipient_dpid,
        v_sender_name,
        v_recipient_name
    FROM ddex_message dm
    JOIN ddex_party sp ON dm.sender_party_id = sp.id
    JOIN ddex_party_id sp_id ON sp.id = sp_id.ddex_party_id 
        AND sp_id.party_id_type_id = (SELECT id FROM resource_db.ddex_party_id_types WHERE type_code = 'DPID' LIMIT 1)
    JOIN ddex_party rp ON dm.recipient_party_id = rp.id
    JOIN ddex_party_id rp_id ON rp.id = rp_id.ddex_party_id 
        AND rp_id.party_id_type_id = (SELECT id FROM resource_db.ddex_party_id_types WHERE type_code = 'DPID' LIMIT 1)
    WHERE dm.id = p_ddex_message_id;

    -- Build 100% Schema-Compliant Message Header
    SET p_message_header_xml = CONCAT(
        '<ern:MessageHeader>',
        '<ern:MessageThreadId>', IFNULL(v_thread_id, v_message_id), '</ern:MessageThreadId>',
        '<ern:MessageId>', v_message_id, '</ern:MessageId>',
        '<ern:MessageFileName>', v_message_id, '.xml</ern:MessageFileName>',
        '<ern:MessageCreatedDateTime>', 
        DATE_FORMAT(v_message_created, '%Y-%m-%dT%H:%i:%s'),
        '</ern:MessageCreatedDateTime>',
        '<ern:MessageSchemaVersionId>ern/43</ern:MessageSchemaVersionId>',
        '<ern:LanguageAndScriptCode>en</ern:LanguageAndScriptCode>',
        '<ern:MessageSender>',
        '<ern:PartyId>',
        '<ern:PartyIdType>DPID</ern:PartyIdType>',
        '<ern:PartyIdValue>', v_sender_dpid, '</ern:PartyIdValue>',
        '</ern:PartyId>',
        CASE WHEN v_sender_name IS NOT NULL THEN
            CONCAT('<ern:PartyName><ern:FullName>', v_sender_name, '</ern:FullName></ern:PartyName>')
        ELSE '' END,
        '</ern:MessageSender>',
        '<ern:MessageRecipient>',
        '<ern:PartyId>',
        '<ern:PartyIdType>DPID</ern:PartyIdType>',
        '<ern:PartyIdValue>', v_recipient_dpid, '</ern:PartyIdValue>',
        '</ern:PartyId>',
        CASE WHEN v_recipient_name IS NOT NULL THEN
            CONCAT('<ern:PartyName><ern:FullName>', v_recipient_name, '</ern:FullName></ern:PartyName>')
        ELSE '' END,
        '</ern:MessageRecipient>',
        '</ern:MessageHeader>'
    );
END//

-- Build Schema-Compliant ResourceList (No ENUMs)
CREATE PROCEDURE sp_build_ern_resource_list_schema_compliant(
    IN p_ddex_message_id BIGINT,
    OUT p_resource_list_xml TEXT
)
BEGIN
    DECLARE v_resources_xml TEXT DEFAULT '';
    DECLARE v_resource_xml TEXT;
    DECLARE v_resource_id BIGINT;
    DECLARE v_done INT DEFAULT FALSE;
    
    -- Cursor for sound recordings
    DECLARE resource_cursor CURSOR FOR
        SELECT id
        FROM ddex_ern_sound_recording 
        WHERE ddex_message_id = p_ddex_message_id 
        AND is_active = TRUE
        ORDER BY resource_reference;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;

    OPEN resource_cursor;
    
    resource_loop: LOOP
        FETCH resource_cursor INTO v_resource_id;
            
        IF v_done THEN
            LEAVE resource_loop;
        END IF;

        -- Build individual SoundRecording XML (100% Schema Compliant)
        CALL sp_build_sound_recording_xml_schema_compliant(v_resource_id, v_resource_xml);
        SET v_resources_xml = CONCAT(v_resources_xml, v_resource_xml);
    END LOOP;
    
    CLOSE resource_cursor;

    -- Wrap in ResourceList with proper schema compliance
    SET p_resource_list_xml = CONCAT(
        '<ern:ResourceList>',
        v_resources_xml,
        '</ern:ResourceList>'
    );
END//

-- Build individual SoundRecording XML (Schema Compliant, No ENUMs)
CREATE PROCEDURE sp_build_sound_recording_xml_schema_compliant(
    IN p_sound_recording_id BIGINT,
    OUT p_sound_recording_xml TEXT
)
BEGIN
    DECLARE v_resource_reference VARCHAR(50);
    DECLARE v_sound_recording_type VARCHAR(50);
    DECLARE v_resource_ids_xml TEXT DEFAULT '';
    DECLARE v_reference_title_xml TEXT DEFAULT '';
    DECLARE v_duration_xml TEXT DEFAULT '';
    DECLARE v_display_artists_xml TEXT DEFAULT '';

    -- Get basic sound recording info with type lookup
    SELECT 
        sr.resource_reference,
        rt.type_code
    INTO 
        v_resource_reference,
        v_sound_recording_type
    FROM ddex_ern_sound_recording sr
    JOIN resource_db.ddex_resource_types rt ON sr.sound_recording_type_id = rt.id
    WHERE sr.id = p_sound_recording_id;

    -- Build ResourceIds (required 1-unbounded)
    CALL sp_build_sound_recording_ids_xml_schema_compliant(p_sound_recording_id, v_resource_ids_xml);
    
    -- Build ReferenceTitle (required 1)
    CALL sp_build_reference_title_xml_schema_compliant(p_sound_recording_id, v_reference_title_xml);
    
    -- Build Duration (optional 0-1)
    CALL sp_build_duration_xml_schema_compliant(p_sound_recording_id, v_duration_xml);
    
    -- Build DisplayArtistNames (optional 0-unbounded)
    CALL sp_build_display_artists_xml_schema_compliant(p_sound_recording_id, v_display_artists_xml);

    -- Assemble complete SoundRecording XML
    SET p_sound_recording_xml = CONCAT(
        '<ern:SoundRecording>',
        '<ern:SoundRecordingType>', v_sound_recording_type, '</ern:SoundRecordingType>',
        v_resource_ids_xml,
        '<ern:ResourceReference>', v_resource_reference, '</ern:ResourceReference>',
        v_reference_title_xml,
        v_duration_xml,
        v_display_artists_xml,
        '</ern:SoundRecording>'
    );
END//

DELIMITER ;

-- =====================================================================================
-- GRANTS AND PERMISSIONS (NO ENUM REFERENCES)
-- =====================================================================================

-- Grant permissions to application user
GRANT SELECT, INSERT, UPDATE ON ddex_message TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_party TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_party_id TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_sound_recording TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_sound_recording_id TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_reference_title TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_additional_title TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_duration TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_display_artist_name TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_p_line TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_release TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_release_id TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_release_reference_title TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_release_resource_reference TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_release_details_by_territory TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_ern_release_display_artist_name TO 'astro_app_user'@'%';
GRANT SELECT, INSERT, UPDATE ON ddex_xml_template TO 'astro_app_user'@'%';

-- Grant permissions on stored procedures
GRANT EXECUTE ON PROCEDURE sp_generate_ern43_xml_100_schema_compliant TO 'astro_app_user'@'%';
GRANT EXECUTE ON PROCEDURE sp_build_ern_message_header_schema_compliant TO 'astro_app_user'@'%';
GRANT EXECUTE ON PROCEDURE sp_build_ern_resource_list_schema_compliant TO 'astro_app_user'@'%';
GRANT EXECUTE ON PROCEDURE sp_build_sound_recording_xml_schema_compliant TO 'astro_app_user'@'%';

-- Grant read access to resource_db lookup tables
GRANT SELECT ON resource_db.ddex_standards TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_release_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_usage_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_commercial_model_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_party_id_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_resource_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_resource_id_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_release_id_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.iso_territory_codes TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.iso_currency_codes TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_title_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_artist_role_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_duration_precision_types TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_processing_statuses TO 'astro_app_user'@'%';
GRANT SELECT ON resource_db.ddex_validation_statuses TO 'astro_app_user'@'%';

-- =====================================================
-- Section 8: Agreement & Contract Management Tables
-- =====================================================

-- =====================================================
-- AGREEMENT TEMPLATE TABLES
-- =====================================================

-- Agreement Templates
CREATE TABLE IF NOT EXISTS agreement_template (
    template_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    template_uuid CHAR(36) NOT NULL DEFAULT (UUID()),
    template_code VARCHAR(50) NOT NULL,
    template_name VARCHAR(255) NOT NULL,
    template_type VARCHAR(50) NOT NULL, -- publishing, recording, management, etc.
    template_category VARCHAR(50),
    template_version VARCHAR(20) NOT NULL DEFAULT '1.0.0',
    is_standard BOOLEAN DEFAULT TRUE,
    description TEXT,
    
    -- Template Content
    template_content JSON,
    template_clauses JSON,
    template_variables JSON,
    required_parties JSON,
    required_approvals JSON,
    
    -- Legal Metadata
    jurisdiction VARCHAR(100),
    governing_law VARCHAR(100),
    legal_review_date DATE,
    legal_reviewer VARCHAR(255),
    compliance_notes TEXT,
    
    -- Template Settings
    allow_modifications BOOLEAN DEFAULT TRUE,
    require_legal_review BOOLEAN DEFAULT FALSE,
    auto_numbering_format VARCHAR(100),
    signature_requirements JSON,
    
    -- Metadata
    tags JSON,
    industry_standard VARCHAR(100),
    recommended_for JSON,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_by BIGINT UNSIGNED,
    deleted_at TIMESTAMP NULL,
    row_hash VARCHAR(64),
    
    PRIMARY KEY (template_id),
    UNIQUE KEY uk_template_uuid (template_uuid),
    UNIQUE KEY uk_template_code_version (template_code, template_version),
    INDEX idx_template_type (template_type),
    INDEX idx_template_category (template_category),
    INDEX idx_is_active (is_active, is_deleted),
    INDEX idx_created_at (created_at),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (deleted_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Template Clauses Library
CREATE TABLE IF NOT EXISTS template_clause (
    clause_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    clause_uuid CHAR(36) NOT NULL DEFAULT (UUID()),
    clause_code VARCHAR(50) NOT NULL,
    clause_name VARCHAR(255) NOT NULL,
    clause_category VARCHAR(100),
    clause_type VARCHAR(50), -- standard, custom, optional
    
    -- Clause Content
    clause_text TEXT NOT NULL,
    clause_variables JSON,
    legal_language VARCHAR(10) DEFAULT 'en',
    
    -- Legal Metadata
    legal_jurisdiction VARCHAR(100),
    legal_review_date DATE,
    compliance_standards JSON,
    risk_level VARCHAR(20), -- low, medium, high
    
    -- Usage
    applicable_to JSON, -- agreement types this clause applies to
    incompatible_with JSON, -- clauses that conflict
    requires_clauses JSON, -- dependent clauses
    
    -- Metadata
    tags JSON,
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_by BIGINT UNSIGNED,
    deleted_at TIMESTAMP NULL,
    
    PRIMARY KEY (clause_id),
    UNIQUE KEY uk_clause_uuid (clause_uuid),
    UNIQUE KEY uk_clause_code (clause_code),
    INDEX idx_clause_category (clause_category),
    INDEX idx_clause_type (clause_type),
    INDEX idx_legal_language (legal_language),
    INDEX idx_is_active (is_active, is_deleted),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (deleted_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- CORE AGREEMENT TABLES
-- =====================================================

-- Master Agreement Table
CREATE TABLE IF NOT EXISTS agreement (
    agreement_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_uuid CHAR(36) NOT NULL DEFAULT (UUID()),
    agreement_number VARCHAR(100) NOT NULL,
    agreement_name VARCHAR(500) NOT NULL,
    agreement_type VARCHAR(50) NOT NULL,
    agreement_subtype VARCHAR(50),
    
    -- Version Control
    parent_agreement_id BIGINT UNSIGNED,
    version_number VARCHAR(20) NOT NULL DEFAULT '1.0',
    version_type VARCHAR(20) DEFAULT 'initial', -- initial, amendment, renewal, etc.
    is_current_version BOOLEAN DEFAULT TRUE,
    
    -- Template Reference
    template_id BIGINT UNSIGNED,
    template_version_used VARCHAR(20),
    
    -- Parties
    primary_party_id BIGINT UNSIGNED NOT NULL,
    primary_party_role VARCHAR(50),
    counterparty_id BIGINT UNSIGNED,
    counterparty_role VARCHAR(50),
    
    -- Status and Workflow
    status VARCHAR(50) NOT NULL DEFAULT 'draft',
    workflow_stage VARCHAR(50),
    workflow_id BIGINT UNSIGNED,
    
    -- Key Dates
    effective_date DATE,
    expiration_date DATE,
    execution_date DATE,
    termination_date DATE,
    
    -- Terms
    term_length_value INT,
    term_length_unit VARCHAR(20), -- days, months, years
    auto_renewal BOOLEAN DEFAULT FALSE,
    renewal_notice_days INT,
    renewal_terms JSON,
    
    -- Territory and Language
    territory_scope VARCHAR(50) DEFAULT 'worldwide',
    territories JSON,
    excluded_territories JSON,
    governing_law VARCHAR(100),
    jurisdiction VARCHAR(100),
    agreement_language VARCHAR(10) DEFAULT 'en',
    
    -- Financial Summary
    currency_code CHAR(3) DEFAULT 'USD',
    total_advance_amount DECIMAL(20,4),
    total_guaranteed_amount DECIMAL(20,4),
    estimated_total_value DECIMAL(20,4),
    
    -- Content Scope
    covers_all_works BOOLEAN DEFAULT FALSE,
    covers_all_recordings BOOLEAN DEFAULT FALSE,
    content_scope_description TEXT,
    
    -- Rights Granted
    rights_granted JSON,
    rights_reserved JSON,
    usage_restrictions JSON,
    
    -- Document Management
    document_url TEXT,
    document_hash VARCHAR(64),
    document_size_bytes BIGINT,
    document_mime_type VARCHAR(100),
    
    -- Legal and Compliance
    requires_legal_review BOOLEAN DEFAULT FALSE,
    legal_review_status VARCHAR(50),
    legal_review_date TIMESTAMP NULL,
    legal_reviewer_id BIGINT UNSIGNED,
    compliance_checklist JSON,
    
    -- Notifications
    notification_emails JSON,
    reminder_settings JSON,
    
    -- Metadata
    tags JSON,
    custom_fields JSON,
    notes TEXT,
    internal_notes TEXT,
    
    -- Search
    search_text TEXT,
    
    -- Security
    access_level VARCHAR(20) DEFAULT 'private',
    encryption_version VARCHAR(10),
    row_hash VARCHAR(64),
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_by BIGINT UNSIGNED,
    deleted_at TIMESTAMP NULL,
    
    PRIMARY KEY (agreement_id),
    UNIQUE KEY uk_agreement_uuid (agreement_uuid),
    UNIQUE KEY uk_agreement_number (agreement_number),
    INDEX idx_agreement_type (agreement_type, agreement_subtype),
    INDEX idx_parent_agreement (parent_agreement_id),
    INDEX idx_template (template_id),
    INDEX idx_primary_party (primary_party_id),
    INDEX idx_counterparty (counterparty_id),
    INDEX idx_status (status),
    INDEX idx_workflow (workflow_id),
    INDEX idx_effective_date (effective_date),
    INDEX idx_expiration_date (expiration_date),
    INDEX idx_is_current (is_current_version, is_active, is_deleted),
    INDEX idx_created_at (created_at),
    FULLTEXT idx_search (agreement_name, search_text),
    FOREIGN KEY (parent_agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (template_id) REFERENCES agreement_template(template_id),
    FOREIGN KEY (primary_party_id) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (counterparty_id) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (legal_reviewer_id) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (deleted_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement History (Audit Trail)
CREATE TABLE IF NOT EXISTS agreement_history (
    history_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    version_number VARCHAR(20) NOT NULL,
    
    -- Change Information
    action VARCHAR(50) NOT NULL, -- created, updated, signed, terminated, etc.
    change_type VARCHAR(50), -- status_change, content_update, party_change, etc.
    change_description TEXT,
    changed_fields JSON,
    previous_values JSON,
    new_values JSON,
    
    -- User and Timestamp
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    change_reason TEXT,
    
    -- Document Snapshot
    document_snapshot JSON,
    document_hash VARCHAR(64),
    
    -- Metadata
    ip_address VARCHAR(45),
    user_agent TEXT,
    session_id VARCHAR(128),
    
    PRIMARY KEY (history_id),
    INDEX idx_agreement_history (agreement_id, changed_at),
    INDEX idx_version (agreement_id, version_number),
    INDEX idx_action (action),
    INDEX idx_changed_by (changed_by),
    INDEX idx_changed_at (changed_at),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (changed_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Parties (Multiple parties per agreement)
CREATE TABLE IF NOT EXISTS agreement_party (
    agreement_party_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    party_id BIGINT UNSIGNED NOT NULL,
    
    -- Party Role and Details
    party_role VARCHAR(100) NOT NULL, -- licensor, licensee, artist, label, etc.
    party_type VARCHAR(50), -- individual, company, group
    is_primary_party BOOLEAN DEFAULT FALSE,
    party_number INT NOT NULL DEFAULT 1,
    
    -- Representation
    represented_by_party_id BIGINT UNSIGNED,
    legal_representative VARCHAR(255),
    power_of_attorney BOOLEAN DEFAULT FALSE,
    
    -- Contact for Agreement
    contact_name VARCHAR(255),
    contact_email VARCHAR(255),
    contact_phone VARCHAR(50),
    contact_address JSON,
    
    -- Signing Authority
    signatory_name VARCHAR(255),
    signatory_title VARCHAR(255),
    signatory_email VARCHAR(255),
    signing_capacity VARCHAR(100),
    
    -- Status
    approval_status VARCHAR(50) DEFAULT 'pending',
    approval_date TIMESTAMP NULL,
    signature_status VARCHAR(50) DEFAULT 'pending',
    signature_date TIMESTAMP NULL,
    
    -- Party-Specific Terms
    party_specific_terms JSON,
    party_obligations JSON,
    party_rights JSON,
    
    -- Financial Interest
    revenue_share_percentage DECIMAL(6,4),
    advance_share_percentage DECIMAL(6,4),
    expense_share_percentage DECIMAL(6,4),
    
    -- Metadata
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (agreement_party_id),
    UNIQUE KEY uk_agreement_party (agreement_id, party_id, party_role),
    INDEX idx_party (party_id),
    INDEX idx_party_role (party_role),
    INDEX idx_represented_by (represented_by_party_id),
    INDEX idx_approval_status (approval_status),
    INDEX idx_signature_status (signature_status),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (party_id) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (represented_by_party_id) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Terms and Conditions
CREATE TABLE IF NOT EXISTS agreement_term (
    term_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    
    -- Term Details
    term_type VARCHAR(100) NOT NULL, -- payment, delivery, performance, etc.
    term_category VARCHAR(50),
    term_number VARCHAR(20),
    term_title VARCHAR(255),
    
    -- Content
    term_text TEXT NOT NULL,
    term_summary VARCHAR(500),
    
    -- Source
    clause_id BIGINT UNSIGNED,
    is_standard_term BOOLEAN DEFAULT TRUE,
    is_negotiated BOOLEAN DEFAULT FALSE,
    
    -- Conditions
    conditions JSON,
    dependencies JSON,
    
    -- Compliance
    compliance_required BOOLEAN DEFAULT FALSE,
    compliance_standard VARCHAR(100),
    compliance_status VARCHAR(50),
    
    -- Metadata
    display_order INT,
    is_material_term BOOLEAN DEFAULT FALSE,
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (term_id),
    INDEX idx_agreement_term (agreement_id, display_order),
    INDEX idx_term_type (term_type),
    INDEX idx_clause (clause_id),
    INDEX idx_compliance (compliance_required, compliance_status),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (clause_id) REFERENCES template_clause(clause_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Financial Terms
CREATE TABLE IF NOT EXISTS agreement_financial_term (
    financial_term_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    
    -- Term Identification
    term_name VARCHAR(255) NOT NULL,
    term_type VARCHAR(50) NOT NULL, -- advance, royalty, fee, bonus, etc.
    term_category VARCHAR(50),
    
    -- Amount and Currency
    amount DECIMAL(20,4),
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    exchange_rate DECIMAL(10,6) DEFAULT 1.000000,
    
    -- Payment Structure
    payment_structure VARCHAR(50), -- one-time, recurring, milestone-based
    payment_frequency VARCHAR(50), -- monthly, quarterly, annually, etc.
    
    -- Royalty Rates
    royalty_base VARCHAR(50), -- net_receipts, gross_receipts, ppd
    royalty_rate DECIMAL(6,4),
    royalty_tiers JSON,
    minimum_royalty DECIMAL(20,4),
    maximum_royalty DECIMAL(20,4),
    
    -- Advance Terms
    is_recoupable BOOLEAN DEFAULT TRUE,
    recoupment_rate DECIMAL(6,4) DEFAULT 100.0000,
    cross_collateralized BOOLEAN DEFAULT FALSE,
    cross_collateral_agreements JSON,
    
    -- Payment Schedule
    first_payment_date DATE,
    payment_schedule JSON,
    
    -- Conditions
    payment_conditions JSON,
    escalation_clauses JSON,
    
    -- Territory-Specific
    territory_specific BOOLEAN DEFAULT FALSE,
    territory_rates JSON,
    
    -- Accounting
    accounting_period VARCHAR(50),
    statement_frequency VARCHAR(50),
    audit_rights BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    notes TEXT,
    calculation_formula TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (financial_term_id),
    INDEX idx_agreement_financial (agreement_id),
    INDEX idx_term_type (term_type),
    INDEX idx_payment_structure (payment_structure),
    INDEX idx_first_payment (first_payment_date),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Territories
CREATE TABLE IF NOT EXISTS agreement_territory (
    territory_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    
    -- Territory Definition
    territory_code VARCHAR(10) NOT NULL,
    territory_name VARCHAR(100) NOT NULL,
    territory_type VARCHAR(50), -- country, region, worldwide
    is_included BOOLEAN DEFAULT TRUE, -- true for included, false for excluded
    
    -- Rights by Territory
    rights_granted JSON,
    rights_excluded JSON,
    
    -- Territory-Specific Terms
    territory_terms JSON,
    local_partner_id BIGINT UNSIGNED,
    
    -- Language Requirements
    required_languages JSON,
    translation_required BOOLEAN DEFAULT FALSE,
    
    -- Compliance
    local_compliance_required BOOLEAN DEFAULT FALSE,
    compliance_notes TEXT,
    
    -- Metadata
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (territory_id),
    INDEX idx_agreement_territory (agreement_id, territory_code),
    INDEX idx_territory_type (territory_type),
    INDEX idx_is_included (is_included),
    INDEX idx_local_partner (local_partner_id),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (local_partner_id) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Works Coverage
CREATE TABLE IF NOT EXISTS agreement_work (
    agreement_work_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    
    -- Coverage Details
    coverage_type VARCHAR(50) NOT NULL, -- full, partial, specific_rights
    ownership_percentage DECIMAL(6,4),
    rights_granted JSON,
    rights_excluded JSON,
    
    -- Term
    effective_date DATE,
    expiration_date DATE,
    in_perpetuity BOOLEAN DEFAULT FALSE,
    
    -- Territory
    territory_scope VARCHAR(50) DEFAULT 'as_per_agreement',
    specific_territories JSON,
    
    -- Usage Restrictions
    usage_restrictions JSON,
    approval_required BOOLEAN DEFAULT FALSE,
    
    -- Financial Override
    specific_royalty_rate DECIMAL(6,4),
    specific_terms JSON,
    
    -- Metadata
    inclusion_date DATE,
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (agreement_work_id),
    UNIQUE KEY uk_agreement_work (agreement_id, work_id),
    INDEX idx_work (work_id),
    INDEX idx_coverage_type (coverage_type),
    INDEX idx_effective_date (effective_date),
    INDEX idx_expiration_date (expiration_date),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (work_id) REFERENCES catalog_db.musical_work(work_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Recordings Coverage
CREATE TABLE IF NOT EXISTS agreement_recording (
    agreement_recording_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    recording_id BIGINT UNSIGNED NOT NULL,
    
    -- Coverage Details
    coverage_type VARCHAR(50) NOT NULL, -- master, distribution, licensing
    ownership_percentage DECIMAL(6,4),
    rights_granted JSON,
    rights_excluded JSON,
    
    -- Term
    effective_date DATE,
    expiration_date DATE,
    in_perpetuity BOOLEAN DEFAULT FALSE,
    
    -- Territory
    territory_scope VARCHAR(50) DEFAULT 'as_per_agreement',
    specific_territories JSON,
    
    -- Usage Restrictions
    usage_restrictions JSON,
    approval_required BOOLEAN DEFAULT FALSE,
    
    -- Distribution Rights
    distribution_channels JSON,
    excluded_platforms JSON,
    
    -- Financial Override
    specific_royalty_rate DECIMAL(6,4),
    specific_terms JSON,
    
    -- Metadata
    inclusion_date DATE,
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (agreement_recording_id),
    UNIQUE KEY uk_agreement_recording (agreement_id, recording_id),
    INDEX idx_recording (recording_id),
    INDEX idx_coverage_type (coverage_type),
    INDEX idx_effective_date (effective_date),
    INDEX idx_expiration_date (expiration_date),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (recording_id) REFERENCES catalog_db.recording(recording_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Milestones
CREATE TABLE IF NOT EXISTS agreement_milestone (
    milestone_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    
    -- Milestone Details
    milestone_name VARCHAR(255) NOT NULL,
    milestone_type VARCHAR(50) NOT NULL, -- delivery, performance, payment, approval
    milestone_category VARCHAR(50),
    
    -- Target
    target_date DATE,
    target_value DECIMAL(20,4),
    target_unit VARCHAR(50),
    target_description TEXT,
    
    -- Status
    status VARCHAR(50) DEFAULT 'pending',
    completion_date DATE,
    actual_value DECIMAL(20,4),
    completion_percentage DECIMAL(5,2),
    
    -- Verification
    requires_verification BOOLEAN DEFAULT TRUE,
    verified_by BIGINT UNSIGNED,
    verification_date TIMESTAMP NULL,
    verification_notes TEXT,
    
    -- Consequences
    is_material BOOLEAN DEFAULT FALSE,
    failure_consequences JSON,
    success_triggers JSON,
    
    -- Notifications
    notification_days_before INT,
    notification_recipients JSON,
    
    -- Metadata
    evidence_required JSON,
    attachments JSON,
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (milestone_id),
    INDEX idx_agreement_milestone (agreement_id, target_date),
    INDEX idx_milestone_type (milestone_type),
    INDEX idx_status (status),
    INDEX idx_target_date (target_date),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (verified_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Advances
CREATE TABLE IF NOT EXISTS agreement_advance (
    advance_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    financial_term_id BIGINT UNSIGNED,
    
    -- Advance Details
    advance_type VARCHAR(50) NOT NULL, -- signing, option, milestone
    advance_amount DECIMAL(20,4) NOT NULL,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Payment Details
    payment_date DATE NOT NULL,
    payment_status VARCHAR(50) DEFAULT 'scheduled',
    actual_payment_date DATE,
    payment_reference VARCHAR(255),
    
    -- Recoupment
    is_recoupable BOOLEAN DEFAULT TRUE,
    recouped_amount DECIMAL(20,4) DEFAULT 0.0000,
    recoupment_percentage DECIMAL(6,4) DEFAULT 100.0000,
    fully_recouped BOOLEAN DEFAULT FALSE,
    recoupment_date DATE,
    
    -- Cross-Collateralization
    cross_collateralized BOOLEAN DEFAULT FALSE,
    cross_collateral_pool VARCHAR(100),
    
    -- Conditions
    payment_conditions JSON,
    conditions_met BOOLEAN DEFAULT FALSE,
    
    -- Accounting
    transaction_id BIGINT UNSIGNED,
    accounting_period VARCHAR(20),
    
    -- Metadata
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (advance_id),
    INDEX idx_agreement_advance (agreement_id),
    INDEX idx_financial_term (financial_term_id),
    INDEX idx_payment_date (payment_date),
    INDEX idx_payment_status (payment_status),
    INDEX idx_recoupable (is_recoupable, fully_recouped),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (financial_term_id) REFERENCES agreement_financial_term(financial_term_id),
    FOREIGN KEY (transaction_id) REFERENCES financial_db.transaction(transaction_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Recoupment Tracking
CREATE TABLE IF NOT EXISTS agreement_recoupment (
    recoupment_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    advance_id BIGINT UNSIGNED NOT NULL,
    
    -- Recoupment Details
    recoupment_date DATE NOT NULL,
    recoupment_amount DECIMAL(20,4) NOT NULL,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Source
    source_type VARCHAR(50) NOT NULL, -- royalty, sync_fee, advance_recovery
    source_id BIGINT UNSIGNED,
    source_description VARCHAR(500),
    
    -- Calculation
    gross_amount DECIMAL(20,4),
    recoupment_rate DECIMAL(6,4),
    net_amount DECIMAL(20,4),
    
    -- Balance
    balance_before DECIMAL(20,4),
    balance_after DECIMAL(20,4),
    
    -- Accounting
    accounting_period VARCHAR(20),
    statement_id BIGINT UNSIGNED,
    transaction_id BIGINT UNSIGNED,
    
    -- Metadata
    notes TEXT,
    
    -- Standard fields
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY (recoupment_id),
    INDEX idx_agreement_recoupment (agreement_id),
    INDEX idx_advance (advance_id),
    INDEX idx_recoupment_date (recoupment_date),
    INDEX idx_source (source_type, source_id),
    INDEX idx_statement (statement_id),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (advance_id) REFERENCES agreement_advance(advance_id),
    FOREIGN KEY (statement_id) REFERENCES royalty_db.royalty_statement(statement_id),
    FOREIGN KEY (transaction_id) REFERENCES financial_db.transaction(transaction_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Options
CREATE TABLE IF NOT EXISTS agreement_option (
    option_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    
    -- Option Details
    option_number INT NOT NULL,
    option_type VARCHAR(50) NOT NULL, -- term_extension, territory_expansion, catalog_addition
    option_description TEXT,
    
    -- Exercise Period
    exercise_start_date DATE,
    exercise_end_date DATE,
    notice_required_days INT,
    
    -- Terms
    option_terms JSON,
    financial_terms JSON,
    additional_advance DECIMAL(20,4),
    
    -- Exercise Status
    exercise_status VARCHAR(50) DEFAULT 'available',
    exercised_date DATE,
    exercised_by BIGINT UNSIGNED,
    exercise_notice_date DATE,
    
    -- Conditions
    exercise_conditions JSON,
    conditions_met BOOLEAN DEFAULT FALSE,
    
    -- New Agreement
    new_agreement_id BIGINT UNSIGNED,
    
    -- Metadata
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (option_id),
    INDEX idx_agreement_option (agreement_id, option_number),
    INDEX idx_option_type (option_type),
    INDEX idx_exercise_dates (exercise_start_date, exercise_end_date),
    INDEX idx_exercise_status (exercise_status),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (exercised_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (new_agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Agreement Amendments
CREATE TABLE IF NOT EXISTS agreement_amendment (
    amendment_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    amendment_agreement_id BIGINT UNSIGNED,
    
    -- Amendment Details
    amendment_number VARCHAR(50) NOT NULL,
    amendment_type VARCHAR(50) NOT NULL,
    amendment_date DATE NOT NULL,
    effective_date DATE NOT NULL,
    
    -- Changes
    sections_modified JSON,
    terms_added JSON,
    terms_removed JSON,
    terms_modified JSON,
    
    -- Reason
    amendment_reason TEXT,
    requested_by BIGINT UNSIGNED,
    
    -- Approval
    requires_all_parties BOOLEAN DEFAULT TRUE,
    approval_status VARCHAR(50) DEFAULT 'pending',
    
    -- Document
    document_url TEXT,
    document_hash VARCHAR(64),
    
    -- Metadata
    notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (amendment_id),
    UNIQUE KEY uk_amendment_number (agreement_id, amendment_number),
    INDEX idx_amendment_agreement (amendment_agreement_id),
    INDEX idx_amendment_date (amendment_date),
    INDEX idx_effective_date (effective_date),
    INDEX idx_approval_status (approval_status),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (amendment_agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (requested_by) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- SIGNATURE AND APPROVAL TABLES
-- =====================================================

-- Electronic Signatures
CREATE TABLE IF NOT EXISTS agreement_signature (
    signature_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    agreement_party_id BIGINT UNSIGNED NOT NULL,
    
    -- Signature Details
    signature_type VARCHAR(50) NOT NULL, -- electronic, wet, docusign, adobe_sign
    signature_status VARCHAR(50) DEFAULT 'pending',
    
    -- Signatory
    signatory_name VARCHAR(255) NOT NULL,
    signatory_email VARCHAR(255) NOT NULL,
    signatory_title VARCHAR(255),
    signing_capacity VARCHAR(100),
    
    -- Signature Process
    signature_request_id VARCHAR(255), -- External system ID
    signature_request_sent TIMESTAMP NULL,
    reminder_sent_count INT DEFAULT 0,
    last_reminder_sent TIMESTAMP NULL,
    
    -- Completion
    signed_date TIMESTAMP NULL,
    signature_method VARCHAR(50),
    ip_address VARCHAR(45),
    
    -- Verification
    certificate_id VARCHAR(255),
    verification_status VARCHAR(50),
    verification_details JSON,
    
    -- Document
    signed_document_url TEXT,
    signed_document_hash VARCHAR(64),
    
    -- Metadata
    signature_image MEDIUMBLOB,
    device_info JSON,
    location_data JSON,
    
    -- Standard fields
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (signature_id),
    INDEX idx_agreement_signature (agreement_id),
    INDEX idx_agreement_party (agreement_party_id),
    INDEX idx_signature_status (signature_status),
    INDEX idx_signature_request (signature_request_id),
    INDEX idx_signed_date (signed_date),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (agreement_party_id) REFERENCES agreement_party(agreement_party_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Approval Workflow Chain
CREATE TABLE IF NOT EXISTS agreement_approval_chain (
    approval_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    agreement_id BIGINT UNSIGNED NOT NULL,
    
    -- Approval Details
    approval_level INT NOT NULL,
    approval_type VARCHAR(50) NOT NULL, -- legal, financial, executive, party
    approver_id BIGINT UNSIGNED,
    approver_party_id BIGINT UNSIGNED,
    
    -- Requirements
    approval_required BOOLEAN DEFAULT TRUE,
    can_delegate BOOLEAN DEFAULT FALSE,
    delegated_to BIGINT UNSIGNED,
    
    -- Status
    approval_status VARCHAR(50) DEFAULT 'pending',
    approval_date TIMESTAMP NULL,
    
    -- Response
    approval_comments TEXT,
    conditions_imposed JSON,
    
    -- Deadline
    approval_deadline DATE,
    escalation_date DATE,
    escalated_to BIGINT UNSIGNED,
    
    -- Metadata
    reminder_count INT DEFAULT 0,
    last_reminder_sent TIMESTAMP NULL,
    
    -- Standard fields
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (approval_id),
    INDEX idx_agreement_approval (agreement_id, approval_level),
    INDEX idx_approval_type (approval_type),
    INDEX idx_approver (approver_id),
    INDEX idx_approver_party (approver_party_id),
    INDEX idx_approval_status (approval_status),
    INDEX idx_approval_deadline (approval_deadline),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (approver_id) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (approver_party_id) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (delegated_to) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (escalated_to) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- SPLIT SHEET TABLES
-- =====================================================

-- Split Sheets
CREATE TABLE IF NOT EXISTS split_sheet (
    split_sheet_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    split_sheet_uuid CHAR(36) NOT NULL DEFAULT (UUID()),
    split_sheet_number VARCHAR(100) NOT NULL,
    
    -- Work Reference
    work_id BIGINT UNSIGNED NOT NULL,
    work_title VARCHAR(500) NOT NULL,
    alternate_titles JSON,
    
    -- Status
    status VARCHAR(50) DEFAULT 'draft',
    version_number VARCHAR(20) DEFAULT '1.0',
    is_final BOOLEAN DEFAULT FALSE,
    
    -- Creation Details
    created_date DATE NOT NULL,
    session_date DATE,
    studio_name VARCHAR(255),
    
    -- Agreement Link
    agreement_id BIGINT UNSIGNED,
    
    -- Total Verification
    total_writer_share DECIMAL(6,4) DEFAULT 0.0000,
    total_publisher_share DECIMAL(6,4) DEFAULT 0.0000,
    is_balanced BOOLEAN DEFAULT FALSE,
    
    -- Additional Rights
    master_recording_splits JSON,
    production_splits JSON,
    
    -- Metadata
    notes TEXT,
    session_notes TEXT,
    
    -- Standard fields
    is_active BOOLEAN DEFAULT TRUE,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_by BIGINT UNSIGNED,
    deleted_at TIMESTAMP NULL,
    
    PRIMARY KEY (split_sheet_id),
    UNIQUE KEY uk_split_sheet_uuid (split_sheet_uuid),
    UNIQUE KEY uk_split_sheet_number (split_sheet_number),
    INDEX idx_work (work_id),
    INDEX idx_status (status),
    INDEX idx_agreement (agreement_id),
    INDEX idx_created_date (created_date),
    INDEX idx_is_final (is_final, is_active, is_deleted),
    FOREIGN KEY (work_id) REFERENCES catalog_db.musical_work(work_id),
    FOREIGN KEY (agreement_id) REFERENCES agreement(agreement_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (deleted_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Split Sheet Parties
CREATE TABLE IF NOT EXISTS split_sheet_party (
    split_party_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    split_sheet_id BIGINT UNSIGNED NOT NULL,
    party_id BIGINT UNSIGNED NOT NULL,
    
    -- Role and Contribution
    party_role VARCHAR(50) NOT NULL, -- writer, publisher, admin, producer
    contribution_type VARCHAR(100), -- lyrics, music, both, production
    contribution_description TEXT,
    
    -- Ownership Splits
    writer_share DECIMAL(6,4) DEFAULT 0.0000,
    publisher_share DECIMAL(6,4) DEFAULT 0.0000,
    total_share DECIMAL(6,4) DEFAULT 0.0000,
    
    -- Publisher Information
    controlled_publisher_id BIGINT UNSIGNED,
    admin_rights BOOLEAN DEFAULT FALSE,
    
    -- PRO Affiliation
    pro_name VARCHAR(100),
    pro_affiliation_number VARCHAR(100),
    
    -- Agreement Status
    agreed_to_splits BOOLEAN DEFAULT FALSE,
    agreement_date TIMESTAMP NULL,
    dispute_flag BOOLEAN DEFAULT FALSE,
    dispute_notes TEXT,
    
    -- Contact for Split
    contact_email VARCHAR(255),
    contact_phone VARCHAR(50),
    
    -- Metadata
    notes TEXT,
    
    -- Standard fields
    created_by BIGINT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_by BIGINT UNSIGNED,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (split_party_id),
    UNIQUE KEY uk_split_party (split_sheet_id, party_id, party_role),
    INDEX idx_party (party_id),
    INDEX idx_party_role (party_role),
    INDEX idx_controlled_publisher (controlled_publisher_id),
    INDEX idx_agreed_status (agreed_to_splits),
    FOREIGN KEY (split_sheet_id) REFERENCES split_sheet(split_sheet_id),
    FOREIGN KEY (party_id) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (controlled_publisher_id) REFERENCES resource_db.party(party_id),
    FOREIGN KEY (created_by) REFERENCES resource_db.user(user_id),
    FOREIGN KEY (updated_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Split Sheet Signatures
CREATE TABLE IF NOT EXISTS split_sheet_signature (
    signature_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    split_sheet_id BIGINT UNSIGNED NOT NULL,
    split_party_id BIGINT UNSIGNED NOT NULL,
    
    -- Signature Status
    signature_status VARCHAR(50) DEFAULT 'pending',
    signature_date TIMESTAMP NULL,
    
    -- Signatory Details
    signatory_name VARCHAR(255),
    signatory_email VARCHAR(255),
    signatory_confirms_splits BOOLEAN DEFAULT FALSE,
    
    -- Signature Method
    signature_method VARCHAR(50),
    signature_token VARCHAR(255),
    ip_address VARCHAR(45),
    
    -- Dispute Resolution
    disputes_splits BOOLEAN DEFAULT FALSE,
    dispute_details TEXT,
    
    -- Metadata
    device_info JSON,
    
    -- Standard fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY (signature_id),
    UNIQUE KEY uk_split_signature (split_sheet_id, split_party_id),
    INDEX idx_signature_status (signature_status),
    INDEX idx_signature_date (signature_date),
    FOREIGN KEY (split_sheet_id) REFERENCES split_sheet(split_sheet_id),
    FOREIGN KEY (split_party_id) REFERENCES split_sheet_party(split_party_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Split Sheet History
CREATE TABLE IF NOT EXISTS split_sheet_history (
    history_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    split_sheet_id BIGINT UNSIGNED NOT NULL,
    
    -- Change Information
    action VARCHAR(50) NOT NULL,
    change_description TEXT,
    previous_values JSON,
    new_values JSON,
    
    -- User and Timestamp
    changed_by BIGINT UNSIGNED NOT NULL,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY (history_id),
    INDEX idx_split_history (split_sheet_id, changed_at),
    FOREIGN KEY (split_sheet_id) REFERENCES split_sheet(split_sheet_id),
    FOREIGN KEY (changed_by) REFERENCES resource_db.user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

DELIMITER //

-- Create Agreement from Template
CREATE PROCEDURE sp_create_agreement_from_template(
    IN p_template_id BIGINT,
    IN p_agreement_name VARCHAR(500),
    IN p_primary_party_id BIGINT,
    IN p_counterparty_id BIGINT,
    IN p_created_by BIGINT,
    OUT p_agreement_id BIGINT
)
BEGIN
    DECLARE v_agreement_number VARCHAR(100);
    DECLARE v_template_content JSON;
    DECLARE v_year VARCHAR(4);
    
    -- Start transaction
    START TRANSACTION;
    
    -- Get current year
    SET v_year = YEAR(CURRENT_DATE);
    
    -- Generate agreement number
    SELECT CONCAT('AGR-', v_year, '-', LPAD(IFNULL(MAX(CAST(SUBSTRING_INDEX(agreement_number, '-', -1) AS UNSIGNED)), 0) + 1, 6, '0'))
    INTO v_agreement_number
    FROM agreement
    WHERE agreement_number LIKE CONCAT('AGR-', v_year, '-%');
    
    -- Get template content
    SELECT template_content, template_type, template_version
    INTO v_template_content, @template_type, @template_version
    FROM agreement_template
    WHERE template_id = p_template_id AND is_active = TRUE;
    
    -- Create agreement
    INSERT INTO agreement (
        agreement_number, agreement_name, agreement_type,
        template_id, template_version_used,
        primary_party_id, counterparty_id,
        status, created_by
    ) VALUES (
        v_agreement_number, p_agreement_name, @template_type,
        p_template_id, @template_version,
        p_primary_party_id, p_counterparty_id,
        'draft', p_created_by
    );
    
    SET p_agreement_id = LAST_INSERT_ID();
    
    -- Create parties
    INSERT INTO agreement_party (agreement_id, party_id, party_role, is_primary_party, created_by)
    VALUES 
        (p_agreement_id, p_primary_party_id, 'primary', TRUE, p_created_by),
        (p_agreement_id, p_counterparty_id, 'counterparty', FALSE, p_created_by);
    
    -- Create initial history entry
    INSERT INTO agreement_history (
        agreement_id, version_number, action, change_type,
        change_description, changed_by
    ) VALUES (
        p_agreement_id, '1.0', 'created', 'initial_creation',
        CONCAT('Agreement created from template: ', @template_type),
        p_created_by
    );
    
    COMMIT;
END//

-- Update Agreement Version
CREATE PROCEDURE sp_update_agreement_version(
    IN p_agreement_id BIGINT,
    IN p_version_type VARCHAR(20),
    IN p_change_description TEXT,
    IN p_updated_by BIGINT
)
BEGIN
    DECLARE v_current_version VARCHAR(20);
    DECLARE v_new_version VARCHAR(20);
    
    -- Get current version
    SELECT version_number INTO v_current_version
    FROM agreement
    WHERE agreement_id = p_agreement_id;
    
    -- Calculate new version
    IF p_version_type = 'minor' THEN
        SET v_new_version = CONCAT(
            SUBSTRING_INDEX(v_current_version, '.', 1), '.',
            CAST(SUBSTRING_INDEX(v_current_version, '.', -1) AS UNSIGNED) + 1
        );
    ELSE
        SET v_new_version = CONCAT(
            CAST(SUBSTRING_INDEX(v_current_version, '.', 1) AS UNSIGNED) + 1, '.0'
        );
    END IF;
    
    -- Update version
    UPDATE agreement
    SET version_number = v_new_version,
        updated_by = p_updated_by
    WHERE agreement_id = p_agreement_id;
    
    -- Log history
    INSERT INTO agreement_history (
        agreement_id, version_number, action, change_type,
        change_description, changed_by
    ) VALUES (
        p_agreement_id, v_new_version, 'updated', 'version_update',
        p_change_description, p_updated_by
    );
END//

-- Approve Agreement Step
CREATE PROCEDURE sp_approve_agreement_step(
    IN p_agreement_id BIGINT,
    IN p_approval_id BIGINT,
    IN p_approval_status VARCHAR(50),
    IN p_comments TEXT,
    IN p_approved_by BIGINT
)
BEGIN
    DECLARE v_all_approved BOOLEAN;
    
    START TRANSACTION;
    
    -- Update approval
    UPDATE agreement_approval_chain
    SET approval_status = p_approval_status,
        approval_date = CURRENT_TIMESTAMP,
        approval_comments = p_comments,
        updated_by = p_approved_by
    WHERE approval_id = p_approval_id;
    
    -- Check if all required approvals are complete
    SELECT NOT EXISTS(
        SELECT 1 FROM agreement_approval_chain
        WHERE agreement_id = p_agreement_id
        AND approval_required = TRUE
        AND approval_status != 'approved'
    ) INTO v_all_approved;
    
    -- Update agreement status if all approved
    IF v_all_approved THEN
        UPDATE agreement
        SET status = 'approved',
            workflow_stage = 'ready_for_signature'
        WHERE agreement_id = p_agreement_id;
    END IF;
    
    -- Log history
    INSERT INTO agreement_history (
        agreement_id, version_number, action, change_type,
        change_description, changed_by
    ) VALUES (
        p_agreement_id,
        (SELECT version_number FROM agreement WHERE agreement_id = p_agreement_id),
        'approval_update',
        'approval',
        CONCAT('Approval ', p_approval_status, ': ', p_comments),
        p_approved_by
    );
    
    COMMIT;
END//

-- Execute Agreement
CREATE PROCEDURE sp_execute_agreement(
    IN p_agreement_id BIGINT,
    IN p_execution_date DATE,
    IN p_executed_by BIGINT
)
BEGIN
    DECLARE v_all_signed BOOLEAN;
    
    START TRANSACTION;
    
    -- Check all signatures
    SELECT NOT EXISTS(
        SELECT 1 FROM agreement_party ap
        LEFT JOIN agreement_signature as ON ap.agreement_party_id = as.agreement_party_id
        WHERE ap.agreement_id = p_agreement_id
        AND (as.signature_status IS NULL OR as.signature_status != 'completed')
    ) INTO v_all_signed;
    
    IF NOT v_all_signed THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Not all parties have signed';
    END IF;
    
    -- Update agreement
    UPDATE agreement
    SET status = 'executed',
        execution_date = p_execution_date,
        updated_by = p_executed_by
    WHERE agreement_id = p_agreement_id;
    
    -- Activate all related records
    UPDATE agreement_work SET is_active = TRUE WHERE agreement_id = p_agreement_id;
    UPDATE agreement_recording SET is_active = TRUE WHERE agreement_id = p_agreement_id;
    UPDATE agreement_financial_term SET is_active = TRUE WHERE agreement_id = p_agreement_id;
    
    -- Log history
    INSERT INTO agreement_history (
        agreement_id, version_number, action, change_type,
        change_description, changed_by
    ) VALUES (
        p_agreement_id,
        (SELECT version_number FROM agreement WHERE agreement_id = p_agreement_id),
        'executed',
        'status_change',
        'Agreement executed and activated',
        p_executed_by
    );
    
    COMMIT;
END//

-- Calculate Financial Terms
CREATE PROCEDURE sp_calculate_financial_terms(
    IN p_agreement_id BIGINT,
    IN p_calculation_date DATE
)
BEGIN
    DECLARE v_total_advance DECIMAL(20,4) DEFAULT 0;
    DECLARE v_total_guaranteed DECIMAL(20,4) DEFAULT 0;
    
    -- Calculate total advances
    SELECT IFNULL(SUM(advance_amount), 0)
    INTO v_total_advance
    FROM agreement_advance
    WHERE agreement_id = p_agreement_id
    AND payment_date <= p_calculation_date;
    
    -- Calculate total guaranteed amounts
    SELECT IFNULL(SUM(
        CASE 
            WHEN term_type = 'guaranteed_minimum' THEN amount
            ELSE 0
        END
    ), 0)
    INTO v_total_guaranteed
    FROM agreement_financial_term
    WHERE agreement_id = p_agreement_id
    AND is_active = TRUE;
    
    -- Update agreement
    UPDATE agreement
    SET total_advance_amount = v_total_advance,
        total_guaranteed_amount = v_total_guaranteed
    WHERE agreement_id = p_agreement_id;
    
    -- Return results
    SELECT 
        v_total_advance as total_advances,
        v_total_guaranteed as total_guaranteed,
        (v_total_advance + v_total_guaranteed) as total_commitment;
END//

-- Generate Split Sheet
CREATE PROCEDURE sp_generate_split_sheet(
    IN p_work_id BIGINT,
    IN p_created_by BIGINT,
    OUT p_split_sheet_id BIGINT
)
BEGIN
    DECLARE v_split_number VARCHAR(100);
    DECLARE v_work_title VARCHAR(500);
    
    START TRANSACTION;
    
    -- Get work title
    SELECT title INTO v_work_title
    FROM catalog_db.musical_work
    WHERE work_id = p_work_id;
    
    -- Generate split sheet number
    SELECT CONCAT('SPLIT-', DATE_FORMAT(CURRENT_DATE, '%Y%m%d'), '-', 
                  LPAD(IFNULL(MAX(CAST(SUBSTRING_INDEX(split_sheet_number, '-', -1) AS UNSIGNED)), 0) + 1, 4, '0'))
    INTO v_split_number
    FROM split_sheet
    WHERE split_sheet_number LIKE CONCAT('SPLIT-', DATE_FORMAT(CURRENT_DATE, '%Y%m%d'), '-%');
    
    -- Create split sheet
    INSERT INTO split_sheet (
        split_sheet_number, work_id, work_title,
        created_date, status, created_by
    ) VALUES (
        v_split_number, p_work_id, v_work_title,
        CURRENT_DATE, 'draft', p_created_by
    );
    
    SET p_split_sheet_id = LAST_INSERT_ID();
    
    -- Add writers from work
    INSERT INTO split_sheet_party (
        split_sheet_id, party_id, party_role,
        writer_share, created_by
    )
    SELECT 
        p_split_sheet_id,
        wc.contributor_id,
        'writer',
        wc.ownership_share,
        p_created_by
    FROM catalog_db.work_contributor wc
    WHERE wc.work_id = p_work_id
    AND wc.contributor_role IN ('writer', 'composer', 'lyricist');
    
    COMMIT;
END//

DELIMITER ;

-- =====================================================
-- VIEWS
-- =====================================================

-- Active Agreements View
CREATE OR REPLACE VIEW v_active_agreements AS
SELECT 
    a.agreement_id,
    a.agreement_number,
    a.agreement_name,
    a.agreement_type,
    a.status,
    a.effective_date,
    a.expiration_date,
    pp.name as primary_party_name,
    cp.name as counterparty_name,
    a.total_advance_amount,
    a.currency_code
FROM agreement a
LEFT JOIN resource_db.party pp ON a.primary_party_id = pp.party_id
LEFT JOIN resource_db.party cp ON a.counterparty_id = cp.party_id
WHERE a.is_active = TRUE 
AND a.is_deleted = FALSE
AND a.is_current_version = TRUE;

-- Financial Terms Summary View
CREATE OR REPLACE VIEW v_financial_terms_summary AS
SELECT 
    a.agreement_id,
    a.agreement_number,
    COUNT(DISTINCT ft.financial_term_id) as term_count,
    SUM(CASE WHEN ft.term_type = 'advance' THEN ft.amount ELSE 0 END) as total_advances,
    SUM(CASE WHEN ft.term_type = 'guaranteed_minimum' THEN ft.amount ELSE 0 END) as total_guaranteed,
    AVG(CASE WHEN ft.term_type = 'royalty' THEN ft.royalty_rate ELSE NULL END) as avg_royalty_rate,
    a.currency_code
FROM agreement a
LEFT JOIN agreement_financial_term ft ON a.agreement_id = ft.agreement_id
WHERE a.is_active = TRUE AND ft.is_active = TRUE
GROUP BY a.agreement_id;

-- Milestone Tracking View
CREATE OR REPLACE VIEW v_milestone_tracking AS
SELECT 
    m.milestone_id,
    a.agreement_number,
    a.agreement_name,
    m.milestone_name,
    m.milestone_type,
    m.target_date,
    m.status,
    m.completion_percentage,
    DATEDIFF(m.target_date, CURRENT_DATE) as days_until_due,
    CASE 
        WHEN m.status = 'completed' THEN 'Completed'
        WHEN DATEDIFF(m.target_date, CURRENT_DATE) < 0 THEN 'Overdue'
        WHEN DATEDIFF(m.target_date, CURRENT_DATE) <= 7 THEN 'Due Soon'
        ELSE 'On Track'
    END as milestone_health
FROM agreement_milestone m
JOIN agreement a ON m.agreement_id = a.agreement_id
WHERE m.is_active = TRUE
AND a.is_active = TRUE;

-- Signature Status Dashboard View
CREATE OR REPLACE VIEW v_signature_status AS
SELECT 
    a.agreement_id,
    a.agreement_number,
    a.agreement_name,
    COUNT(DISTINCT ap.agreement_party_id) as total_parties,
    COUNT(DISTINCT s.signature_id) as signatures_completed,
    GROUP_CONCAT(
        CASE WHEN s.signature_status != 'completed' OR s.signature_status IS NULL
        THEN ap.party_id END
    ) as pending_party_ids,
    CASE 
        WHEN COUNT(DISTINCT ap.agreement_party_id) = COUNT(DISTINCT CASE WHEN s.signature_status = 'completed' THEN s.agreement_party_id END)
        THEN 'All Signed'
        WHEN COUNT(DISTINCT CASE WHEN s.signature_status = 'completed' THEN s.agreement_party_id END) > 0
        THEN 'Partially Signed'
        ELSE 'No Signatures'
    END as signature_status
FROM agreement a
JOIN agreement_party ap ON a.agreement_id = ap.agreement_id
LEFT JOIN agreement_signature s ON ap.agreement_party_id = s.agreement_party_id
WHERE a.is_active = TRUE
GROUP BY a.agreement_id;

-- Split Sheet Status View
CREATE OR REPLACE VIEW v_split_sheet_status AS
SELECT 
    ss.split_sheet_id,
    ss.split_sheet_number,
    w.title as work_title,
    ss.status,
    ss.total_writer_share,
    ss.total_publisher_share,
    ss.is_balanced,
    COUNT(DISTINCT ssp.split_party_id) as total_parties,
    COUNT(DISTINCT CASE WHEN ssp.agreed_to_splits = TRUE THEN ssp.split_party_id END) as parties_agreed,
    COUNT(DISTINCT CASE WHEN ssp.dispute_flag = TRUE THEN ssp.split_party_id END) as disputes
FROM split_sheet ss
JOIN catalog_db.musical_work w ON ss.work_id = w.work_id
LEFT JOIN split_sheet_party ssp ON ss.split_sheet_id = ssp.split_sheet_id
WHERE ss.is_active = TRUE AND ss.is_deleted = FALSE
GROUP BY ss.split_sheet_id;

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Additional performance indexes
CREATE INDEX idx_agreement_search ON agreement(status, agreement_type, effective_date);
CREATE INDEX idx_financial_calculation ON agreement_financial_term(agreement_id, term_type, is_active);
CREATE INDEX idx_milestone_due ON agreement_milestone(target_date, status);
CREATE INDEX idx_signature_pending ON agreement_signature(signature_status, agreement_id);
CREATE INDEX idx_split_balance ON split_sheet(is_balanced, status);

-- =====================================================
-- Section 9: SMART CONTRACT & BLOCKCHAIN INTEGRATION
-- =====================================================

-- =====================================================
-- WALLET MANAGEMENT TABLES
-- =====================================================

-- Blockchain wallet addresses for users
CREATE TABLE wallet_address (
    wallet_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    user_id BIGINT UNSIGNED NOT NULL,
    blockchain_network VARCHAR(50) NOT NULL, -- ethereum, polygon, solana, arbitrum, private
    wallet_address VARCHAR(255) NOT NULL,
    wallet_type VARCHAR(50) NOT NULL, -- metamask, walletconnect, phantom, ledger
    is_primary TINYINT(1) DEFAULT 0,
    is_verified TINYINT(1) DEFAULT 0,
    verification_status VARCHAR(50) DEFAULT 'pending', -- pending, verified, failed, suspended
    label VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_active TINYINT(1) DEFAULT 1,
    deleted_at TIMESTAMP NULL,
    PRIMARY KEY (wallet_id),
    INDEX idx_user_id (user_id),
    INDEX idx_wallet_address (wallet_address),
    INDEX idx_blockchain_network (blockchain_network),
    INDEX idx_verification_status (verification_status),
    UNIQUE KEY uk_wallet_network (wallet_address, blockchain_network)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- KYC/AML verification for wallets
CREATE TABLE wallet_verification (
    verification_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    wallet_id BIGINT UNSIGNED NOT NULL,
    verification_type VARCHAR(50) NOT NULL, -- kyc, aml, accreditation, identity
    verification_provider VARCHAR(100), -- jumio, onfido, chainalysis
    verification_data JSON,
    verification_score DECIMAL(5,2),
    risk_level VARCHAR(20), -- low, medium, high, critical
    country_code CHAR(2),
    verification_date TIMESTAMP NULL,
    expiry_date DATE,
    document_hash VARCHAR(255),
    ipfs_hash VARCHAR(255),
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    is_active TINYINT(1) DEFAULT 1,
    PRIMARY KEY (verification_id),
    INDEX idx_wallet_id (wallet_id),
    INDEX idx_verification_type (verification_type),
    INDEX idx_risk_level (risk_level),
    INDEX idx_expiry_date (expiry_date),
    FOREIGN KEY (wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- SMART CONTRACT MANAGEMENT
-- =====================================================

-- Smart contract templates
CREATE TABLE smart_contract_template (
    template_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    template_name VARCHAR(255) NOT NULL,
    template_type VARCHAR(100) NOT NULL, -- master_rights, publishing_rights, sync_license, nft_collection, royalty_pool
    contract_version VARCHAR(20) NOT NULL,
    blockchain_network VARCHAR(50) NOT NULL,
    contract_standard VARCHAR(50), -- ERC20, ERC721, ERC1155, custom
    source_code TEXT,
    compiled_bytecode TEXT,
    abi_definition JSON,
    constructor_params JSON,
    gas_estimate BIGINT UNSIGNED,
    security_audit_status VARCHAR(50), -- pending, passed, failed, in_progress
    audit_report_url VARCHAR(500),
    features JSON, -- List of features like multi-sig, pausable, upgradeable
    required_oracles JSON,
    documentation_url VARCHAR(500),
    is_deprecated TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    PRIMARY KEY (template_id),
    INDEX idx_template_type (template_type),
    INDEX idx_blockchain_network (blockchain_network),
    INDEX idx_contract_standard (contract_standard),
    INDEX idx_security_audit_status (security_audit_status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Deployed smart contracts
CREATE TABLE smart_contract (
    contract_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    template_id BIGINT UNSIGNED,
    contract_address VARCHAR(255) NOT NULL,
    blockchain_network VARCHAR(50) NOT NULL,
    contract_type VARCHAR(100) NOT NULL,
    deployment_tx_hash VARCHAR(255),
    deployment_block_number BIGINT UNSIGNED,
    deployment_timestamp TIMESTAMP NULL,
    deployer_wallet_id BIGINT UNSIGNED,
    owner_wallet_id BIGINT UNSIGNED,
    contract_name VARCHAR(255),
    contract_metadata JSON, -- Additional metadata specific to contract type
    initialization_params JSON,
    is_proxy TINYINT(1) DEFAULT 0,
    implementation_address VARCHAR(255),
    admin_address VARCHAR(255),
    is_paused TINYINT(1) DEFAULT 0,
    pause_reason VARCHAR(500),
    total_gas_used BIGINT UNSIGNED DEFAULT 0,
    total_transactions INT UNSIGNED DEFAULT 0,
    last_interaction_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    is_active TINYINT(1) DEFAULT 1,
    terminated_at TIMESTAMP NULL,
    termination_reason VARCHAR(500),
    PRIMARY KEY (contract_id),
    INDEX idx_contract_address (contract_address),
    INDEX idx_blockchain_network (blockchain_network),
    INDEX idx_contract_type (contract_type),
    INDEX idx_deployment_block (deployment_block_number),
    INDEX idx_owner_wallet (owner_wallet_id),
    UNIQUE KEY uk_contract_network (contract_address, blockchain_network),
    FOREIGN KEY (template_id) REFERENCES smart_contract_template(template_id),
    FOREIGN KEY (deployer_wallet_id) REFERENCES wallet_address(wallet_id),
    FOREIGN KEY (owner_wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Smart contract state tracking
CREATE TABLE smart_contract_state (
    state_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    state_variable VARCHAR(255) NOT NULL,
    state_value JSON NOT NULL,
    previous_value JSON,
    block_number BIGINT UNSIGNED NOT NULL,
    transaction_hash VARCHAR(255),
    timestamp TIMESTAMP NOT NULL,
    gas_used BIGINT UNSIGNED,
    updated_by_address VARCHAR(255),
    update_function VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (state_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_state_variable (state_variable),
    INDEX idx_block_number (block_number),
    INDEX idx_timestamp (timestamp),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Smart contract events
CREATE TABLE smart_contract_event (
    event_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    event_name VARCHAR(255) NOT NULL,
    event_signature VARCHAR(255),
    transaction_hash VARCHAR(255) NOT NULL,
    block_number BIGINT UNSIGNED NOT NULL,
    log_index INT UNSIGNED,
    event_data JSON,
    indexed_params JSON,
    event_timestamp TIMESTAMP NOT NULL,
    gas_used BIGINT UNSIGNED,
    emitter_address VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_at TIMESTAMP NULL,
    PRIMARY KEY (event_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_event_name (event_name),
    INDEX idx_transaction_hash (transaction_hash),
    INDEX idx_block_number (block_number),
    INDEX idx_event_timestamp (event_timestamp),
    INDEX idx_processed_at (processed_at),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- BLOCKCHAIN TRANSACTION MANAGEMENT
-- =====================================================

-- All blockchain transactions
CREATE TABLE blockchain_transaction (
    transaction_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    transaction_hash VARCHAR(255) NOT NULL,
    blockchain_network VARCHAR(50) NOT NULL,
    transaction_type VARCHAR(100) NOT NULL, -- deployment, interaction, transfer, mint, burn
    from_address VARCHAR(255) NOT NULL,
    to_address VARCHAR(255),
    contract_id BIGINT UNSIGNED,
    wallet_id BIGINT UNSIGNED,
    value_wei VARCHAR(100), -- Store as string to handle large numbers
    value_decimal DECIMAL(36,18),
    gas_limit BIGINT UNSIGNED,
    gas_price_wei VARCHAR(100),
    gas_used BIGINT UNSIGNED,
    gas_fee_wei VARCHAR(100),
    gas_fee_usd DECIMAL(20,6),
    nonce BIGINT UNSIGNED,
    input_data TEXT,
    status VARCHAR(50) DEFAULT 'pending', -- pending, confirmed, failed, dropped
    block_number BIGINT UNSIGNED,
    block_timestamp TIMESTAMP NULL,
    confirmation_count INT UNSIGNED DEFAULT 0,
    error_message TEXT,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (transaction_id),
    INDEX idx_transaction_hash (transaction_hash),
    INDEX idx_blockchain_network (blockchain_network),
    INDEX idx_from_address (from_address),
    INDEX idx_to_address (to_address),
    INDEX idx_contract_id (contract_id),
    INDEX idx_wallet_id (wallet_id),
    INDEX idx_status (status),
    INDEX idx_block_number (block_number),
    INDEX idx_created_at (created_at),
    UNIQUE KEY uk_tx_network (transaction_hash, blockchain_network),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id),
    FOREIGN KEY (wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Transaction confirmation tracking
CREATE TABLE blockchain_confirmation (
    confirmation_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    transaction_id BIGINT UNSIGNED NOT NULL,
    confirmation_number INT UNSIGNED NOT NULL,
    block_hash VARCHAR(255),
    block_number BIGINT UNSIGNED,
    confirmation_timestamp TIMESTAMP NOT NULL,
    reorganized TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (confirmation_id),
    INDEX idx_transaction_id (transaction_id),
    INDEX idx_confirmation_number (confirmation_number),
    INDEX idx_block_number (block_number),
    UNIQUE KEY uk_tx_confirmation (transaction_id, confirmation_number),
    FOREIGN KEY (transaction_id) REFERENCES blockchain_transaction(transaction_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Gas fee tracking and optimization
CREATE TABLE gas_fee_tracking (
    gas_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    blockchain_network VARCHAR(50) NOT NULL,
    base_fee_wei VARCHAR(100),
    priority_fee_wei VARCHAR(100),
    max_fee_wei VARCHAR(100),
    gas_price_gwei DECIMAL(20,9),
    gas_price_usd DECIMAL(20,6),
    network_congestion VARCHAR(20), -- low, medium, high, critical
    block_number BIGINT UNSIGNED,
    timestamp TIMESTAMP NOT NULL,
    eth_price_usd DECIMAL(20,6),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (gas_id),
    INDEX idx_blockchain_network (blockchain_network),
    INDEX idx_timestamp (timestamp),
    INDEX idx_network_congestion (network_congestion)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- CONTRACT INTERACTIONS & OPERATIONS
-- =====================================================

-- User interactions with contracts
CREATE TABLE contract_interaction (
    interaction_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    wallet_id BIGINT UNSIGNED NOT NULL,
    transaction_id BIGINT UNSIGNED,
    function_name VARCHAR(255) NOT NULL,
    function_signature VARCHAR(255),
    parameters JSON,
    return_values JSON,
    interaction_type VARCHAR(100), -- read, write, approve, transfer, mint, burn
    status VARCHAR(50) DEFAULT 'pending',
    gas_estimated BIGINT UNSIGNED,
    gas_used BIGINT UNSIGNED,
    error_code VARCHAR(100),
    error_message TEXT,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP NULL,
    PRIMARY KEY (interaction_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_wallet_id (wallet_id),
    INDEX idx_transaction_id (transaction_id),
    INDEX idx_function_name (function_name),
    INDEX idx_interaction_type (interaction_type),
    INDEX idx_status (status),
    INDEX idx_created_at (created_at),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id),
    FOREIGN KEY (wallet_id) REFERENCES wallet_address(wallet_id),
    FOREIGN KEY (transaction_id) REFERENCES blockchain_transaction(transaction_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Oracle data feeds
CREATE TABLE oracle_feed (
    oracle_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    oracle_name VARCHAR(255) NOT NULL,
    oracle_type VARCHAR(100) NOT NULL, -- price, streaming_count, exchange_rate, random
    provider VARCHAR(100), -- chainlink, band, api3, custom
    blockchain_network VARCHAR(50),
    contract_address VARCHAR(255),
    endpoint_url VARCHAR(500),
    update_frequency_seconds INT UNSIGNED,
    last_update_timestamp TIMESTAMP NULL,
    last_value JSON,
    decimals TINYINT UNSIGNED,
    description TEXT,
    is_active TINYINT(1) DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (oracle_id),
    INDEX idx_oracle_type (oracle_type),
    INDEX idx_provider (provider),
    INDEX idx_blockchain_network (blockchain_network),
    INDEX idx_is_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Contract upgrades and migrations
CREATE TABLE contract_upgrade (
    upgrade_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    old_implementation VARCHAR(255),
    new_implementation VARCHAR(255),
    upgrade_type VARCHAR(50), -- implementation, logic, storage, emergency
    upgrade_transaction_hash VARCHAR(255),
    upgrade_block_number BIGINT UNSIGNED,
    upgrade_timestamp TIMESTAMP NULL,
    initiated_by_wallet_id BIGINT UNSIGNED,
    approval_count INT UNSIGNED DEFAULT 0,
    required_approvals INT UNSIGNED,
    upgrade_data JSON,
    rollback_possible TINYINT(1) DEFAULT 1,
    rollback_deadline TIMESTAMP NULL,
    status VARCHAR(50) DEFAULT 'pending', -- pending, approved, executed, rolled_back
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    executed_at TIMESTAMP NULL,
    PRIMARY KEY (upgrade_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_status (status),
    INDEX idx_upgrade_timestamp (upgrade_timestamp),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id),
    FOREIGN KEY (initiated_by_wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- MUSIC RIGHTS NFT TABLES
-- =====================================================

-- NFT collections for music rights
CREATE TABLE nft_collection (
    collection_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    collection_name VARCHAR(255) NOT NULL,
    collection_symbol VARCHAR(20),
    collection_type VARCHAR(50), -- song_rights, recording_rights, royalty_shares, fan_tokens
    total_supply BIGINT UNSIGNED,
    max_supply BIGINT UNSIGNED,
    base_uri VARCHAR(500),
    metadata_standard VARCHAR(50), -- opensea, rarible, custom
    royalty_percentage DECIMAL(5,2),
    royalty_recipient_wallet_id BIGINT UNSIGNED,
    minting_enabled TINYINT(1) DEFAULT 1,
    trading_enabled TINYINT(1) DEFAULT 1,
    reveal_timestamp TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (collection_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_collection_type (collection_type),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id),
    FOREIGN KEY (royalty_recipient_wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Individual NFT tokens
CREATE TABLE nft_token (
    token_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    collection_id BIGINT UNSIGNED NOT NULL,
    token_number BIGINT UNSIGNED NOT NULL,
    current_owner_wallet_id BIGINT UNSIGNED,
    work_id BIGINT UNSIGNED, -- Link to musical work
    recording_id BIGINT UNSIGNED, -- Link to recording
    rights_percentage DECIMAL(10,6), -- Percentage of rights represented
    metadata_uri VARCHAR(500),
    metadata_json JSON,
    minted_by_wallet_id BIGINT UNSIGNED,
    mint_transaction_id BIGINT UNSIGNED,
    mint_timestamp TIMESTAMP NULL,
    burn_transaction_id BIGINT UNSIGNED,
    burn_timestamp TIMESTAMP NULL,
    is_burned TINYINT(1) DEFAULT 0,
    lock_until TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (token_id),
    INDEX idx_collection_id (collection_id),
    INDEX idx_token_number (token_number),
    INDEX idx_current_owner (current_owner_wallet_id),
    INDEX idx_work_id (work_id),
    INDEX idx_recording_id (recording_id),
    UNIQUE KEY uk_collection_token (collection_id, token_number),
    FOREIGN KEY (collection_id) REFERENCES nft_collection(collection_id),
    FOREIGN KEY (current_owner_wallet_id) REFERENCES wallet_address(wallet_id),
    FOREIGN KEY (minted_by_wallet_id) REFERENCES wallet_address(wallet_id),
    FOREIGN KEY (mint_transaction_id) REFERENCES blockchain_transaction(transaction_id),
    FOREIGN KEY (burn_transaction_id) REFERENCES blockchain_transaction(transaction_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- NFT transfer history
CREATE TABLE nft_transfer (
    transfer_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    token_id BIGINT UNSIGNED NOT NULL,
    from_wallet_id BIGINT UNSIGNED,
    to_wallet_id BIGINT UNSIGNED NOT NULL,
    transaction_id BIGINT UNSIGNED NOT NULL,
    transfer_type VARCHAR(50), -- mint, transfer, burn, sale
    price_amount DECIMAL(36,18),
    price_currency VARCHAR(10),
    price_usd DECIMAL(20,6),
    marketplace VARCHAR(100), -- opensea, rarible, astro, direct
    transfer_timestamp TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (transfer_id),
    INDEX idx_token_id (token_id),
    INDEX idx_from_wallet (from_wallet_id),
    INDEX idx_to_wallet (to_wallet_id),
    INDEX idx_transaction_id (transaction_id),
    INDEX idx_transfer_type (transfer_type),
    INDEX idx_transfer_timestamp (transfer_timestamp),
    FOREIGN KEY (token_id) REFERENCES nft_token(token_id),
    FOREIGN KEY (from_wallet_id) REFERENCES wallet_address(wallet_id),
    FOREIGN KEY (to_wallet_id) REFERENCES wallet_address(wallet_id),
    FOREIGN KEY (transaction_id) REFERENCES blockchain_transaction(transaction_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- ROYALTY DISTRIBUTION CONTRACTS
-- =====================================================

-- Royalty split contracts
CREATE TABLE royalty_split_contract (
    split_contract_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED,
    recording_id BIGINT UNSIGNED,
    split_name VARCHAR(255),
    total_recipients INT UNSIGNED,
    distribution_frequency VARCHAR(50), -- realtime, daily, weekly, monthly
    minimum_distribution_amount DECIMAL(20,6),
    distribution_currency VARCHAR(10),
    recoupment_enabled TINYINT(1) DEFAULT 0,
    recoupment_amount DECIMAL(20,6),
    recouped_amount DECIMAL(20,6) DEFAULT 0,
    total_distributed DECIMAL(20,6) DEFAULT 0,
    last_distribution_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    is_active TINYINT(1) DEFAULT 1,
    PRIMARY KEY (split_contract_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_work_id (work_id),
    INDEX idx_recording_id (recording_id),
    INDEX idx_distribution_frequency (distribution_frequency),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Recipients of royalty splits
CREATE TABLE royalty_split_recipient (
    recipient_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    split_contract_id BIGINT UNSIGNED NOT NULL,
    wallet_id BIGINT UNSIGNED NOT NULL,
    party_id BIGINT UNSIGNED,
    split_percentage DECIMAL(10,6) NOT NULL,
    role VARCHAR(100), -- writer, producer, performer, label, publisher
    recoupment_percentage DECIMAL(10,6),
    minimum_payout DECIMAL(20,6),
    total_received DECIMAL(20,6) DEFAULT 0,
    pending_amount DECIMAL(20,6) DEFAULT 0,
    is_active TINYINT(1) DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (recipient_id),
    INDEX idx_split_contract_id (split_contract_id),
    INDEX idx_wallet_id (wallet_id),
    INDEX idx_party_id (party_id),
    INDEX idx_role (role),
    FOREIGN KEY (split_contract_id) REFERENCES royalty_split_contract(split_contract_id),
    FOREIGN KEY (wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Royalty distribution transactions
CREATE TABLE royalty_distribution (
    distribution_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    split_contract_id BIGINT UNSIGNED NOT NULL,
    transaction_id BIGINT UNSIGNED,
    distribution_batch VARCHAR(100),
    source_type VARCHAR(50), -- streaming, sync, mechanical, performance
    source_reference VARCHAR(255),
    gross_amount DECIMAL(20,6) NOT NULL,
    recoupment_amount DECIMAL(20,6) DEFAULT 0,
    distribution_amount DECIMAL(20,6) NOT NULL,
    currency VARCHAR(10),
    exchange_rate DECIMAL(20,10),
    distribution_timestamp TIMESTAMP NULL,
    block_number BIGINT UNSIGNED,
    gas_fee_amount DECIMAL(20,6),
    status VARCHAR(50) DEFAULT 'pending',
    error_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP NULL,
    PRIMARY KEY (distribution_id),
    INDEX idx_split_contract_id (split_contract_id),
    INDEX idx_transaction_id (transaction_id),
    INDEX idx_distribution_batch (distribution_batch),
    INDEX idx_source_type (source_type),
    INDEX idx_status (status),
    INDEX idx_distribution_timestamp (distribution_timestamp),
    FOREIGN KEY (split_contract_id) REFERENCES royalty_split_contract(split_contract_id),
    FOREIGN KEY (transaction_id) REFERENCES blockchain_transaction(transaction_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- LICENSING SMART CONTRACTS
-- =====================================================

-- Automated licensing contracts
CREATE TABLE licensing_contract (
    licensing_contract_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    license_type VARCHAR(100) NOT NULL, -- sync, mechanical, public_performance, master
    licensor_wallet_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED,
    recording_id BIGINT UNSIGNED,
    territory_restrictions JSON,
    usage_restrictions JSON,
    pricing_model VARCHAR(50), -- fixed, percentage, tiered, dynamic
    base_price DECIMAL(20,6),
    currency VARCHAR(10),
    automatic_approval TINYINT(1) DEFAULT 0,
    approval_threshold DECIMAL(20,6),
    max_licenses INT UNSIGNED,
    issued_licenses INT UNSIGNED DEFAULT 0,
    total_revenue DECIMAL(20,6) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    is_active TINYINT(1) DEFAULT 1,
    PRIMARY KEY (licensing_contract_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_license_type (license_type),
    INDEX idx_licensor_wallet_id (licensor_wallet_id),
    INDEX idx_work_id (work_id),
    INDEX idx_recording_id (recording_id),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id),
    FOREIGN KEY (licensor_wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Issued licenses from smart contracts
CREATE TABLE smart_license_grant (
    grant_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    licensing_contract_id BIGINT UNSIGNED NOT NULL,
    licensee_wallet_id BIGINT UNSIGNED NOT NULL,
    transaction_id BIGINT UNSIGNED,
    license_terms JSON,
    grant_date TIMESTAMP NOT NULL,
    expiry_date TIMESTAMP NULL,
    territory VARCHAR(500),
    usage_type VARCHAR(255),
    payment_amount DECIMAL(20,6),
    payment_currency VARCHAR(10),
    token_id BIGINT UNSIGNED, -- If license is tokenized
    ipfs_hash VARCHAR(255), -- License document on IPFS
    status VARCHAR(50) DEFAULT 'active', -- active, expired, revoked, pending
    revocation_reason VARCHAR(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (grant_id),
    INDEX idx_licensing_contract_id (licensing_contract_id),
    INDEX idx_licensee_wallet_id (licensee_wallet_id),
    INDEX idx_transaction_id (transaction_id),
    INDEX idx_status (status),
    INDEX idx_grant_date (grant_date),
    INDEX idx_expiry_date (expiry_date),
    FOREIGN KEY (licensing_contract_id) REFERENCES licensing_contract(licensing_contract_id),
    FOREIGN KEY (licensee_wallet_id) REFERENCES wallet_address(wallet_id),
    FOREIGN KEY (transaction_id) REFERENCES blockchain_transaction(transaction_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- DEFI INTEGRATION TABLES
-- =====================================================

-- Tokenized royalty streams
CREATE TABLE royalty_token (
    royalty_token_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    token_name VARCHAR(255) NOT NULL,
    token_symbol VARCHAR(20) NOT NULL,
    work_id BIGINT UNSIGNED,
    recording_id BIGINT UNSIGNED,
    total_supply DECIMAL(36,18),
    circulating_supply DECIMAL(36,18),
    locked_supply DECIMAL(36,18),
    revenue_share_percentage DECIMAL(10,6),
    revenue_period_days INT UNSIGNED,
    total_revenue_distributed DECIMAL(20,6) DEFAULT 0,
    last_distribution_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (royalty_token_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_work_id (work_id),
    INDEX idx_recording_id (recording_id),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Liquidity pools for music assets
CREATE TABLE liquidity_pool (
    pool_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    pool_name VARCHAR(255),
    token_a_address VARCHAR(255),
    token_b_address VARCHAR(255),
    dex_platform VARCHAR(100), -- uniswap, sushiswap, custom
    total_liquidity_usd DECIMAL(20,6),
    volume_24h_usd DECIMAL(20,6),
    fees_24h_usd DECIMAL(20,6),
    apy_percentage DECIMAL(10,4),
    impermanent_loss DECIMAL(10,4),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (pool_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_dex_platform (dex_platform),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- AUDIT AND COMPLIANCE
-- =====================================================

-- Complete audit trail for smart contracts
CREATE TABLE smart_contract_audit (
    audit_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    contract_id BIGINT UNSIGNED NOT NULL,
    audit_type VARCHAR(100) NOT NULL, -- deployment, interaction, state_change, upgrade
    audit_action VARCHAR(255) NOT NULL,
    actor_wallet_id BIGINT UNSIGNED,
    actor_address VARCHAR(255),
    transaction_hash VARCHAR(255),
    block_number BIGINT UNSIGNED,
    audit_data JSON,
    risk_score DECIMAL(5,2),
    compliance_check VARCHAR(50), -- passed, failed, flagged
    audit_timestamp TIMESTAMP NOT NULL,
    ip_address VARCHAR(45),
    user_agent VARCHAR(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (audit_id),
    INDEX idx_contract_id (contract_id),
    INDEX idx_audit_type (audit_type),
    INDEX idx_actor_wallet_id (actor_wallet_id),
    INDEX idx_compliance_check (compliance_check),
    INDEX idx_audit_timestamp (audit_timestamp),
    FOREIGN KEY (contract_id) REFERENCES smart_contract(contract_id),
    FOREIGN KEY (actor_wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Regulatory compliance tracking
CREATE TABLE blockchain_compliance (
    compliance_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    entity_type VARCHAR(50) NOT NULL, -- wallet, contract, transaction
    entity_id BIGINT UNSIGNED NOT NULL,
    compliance_type VARCHAR(100), -- kyc, aml, securities, tax
    jurisdiction VARCHAR(100),
    regulation_code VARCHAR(100),
    compliance_status VARCHAR(50), -- compliant, non_compliant, pending, exempt
    verification_method VARCHAR(100),
    verification_data JSON,
    expiry_date DATE,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    verified_by BIGINT UNSIGNED,
    PRIMARY KEY (compliance_id),
    INDEX idx_entity_type_id (entity_type, entity_id),
    INDEX idx_compliance_type (compliance_type),
    INDEX idx_compliance_status (compliance_status),
    INDEX idx_expiry_date (expiry_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- CROSS-CHAIN BRIDGE TABLES
-- =====================================================

-- Cross-chain bridge transactions
CREATE TABLE bridge_transaction (
    bridge_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    source_network VARCHAR(50) NOT NULL,
    destination_network VARCHAR(50) NOT NULL,
    source_transaction_id BIGINT UNSIGNED,
    destination_transaction_id BIGINT UNSIGNED,
    bridge_protocol VARCHAR(100), -- wormhole, layerzero, axelar
    asset_type VARCHAR(50), -- token, nft, message
    asset_address VARCHAR(255),
    amount DECIMAL(36,18),
    sender_wallet_id BIGINT UNSIGNED,
    recipient_address VARCHAR(255),
    bridge_fee DECIMAL(20,6),
    status VARCHAR(50) DEFAULT 'initiated',
    initiated_at TIMESTAMP NOT NULL,
    completed_at TIMESTAMP NULL,
    error_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (bridge_id),
    INDEX idx_source_network (source_network),
    INDEX idx_destination_network (destination_network),
    INDEX idx_status (status),
    INDEX idx_initiated_at (initiated_at),
    FOREIGN KEY (source_transaction_id) REFERENCES blockchain_transaction(transaction_id),
    FOREIGN KEY (destination_transaction_id) REFERENCES blockchain_transaction(transaction_id),
    FOREIGN KEY (sender_wallet_id) REFERENCES wallet_address(wallet_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- VIEWS FOR BLOCKCHAIN ANALYTICS
-- =====================================================

-- Active smart contracts summary
CREATE OR REPLACE VIEW v_active_smart_contracts AS
SELECT 
    sc.contract_id,
    sc.contract_name,
    sc.contract_type,
    sc.blockchain_network,
    sc.contract_address,
    sc.total_gas_used,
    sc.total_transactions,
    COUNT(DISTINCT ci.wallet_id) as unique_users,
    SUM(CASE WHEN ci.created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY) THEN 1 ELSE 0 END) as interactions_7d,
    SUM(CASE WHEN ci.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY) THEN 1 ELSE 0 END) as interactions_30d
FROM smart_contract sc
LEFT JOIN contract_interaction ci ON sc.contract_id = ci.contract_id
WHERE sc.is_active = 1
GROUP BY sc.contract_id;

-- NFT collection analytics
CREATE OR REPLACE VIEW v_nft_collection_stats AS
SELECT 
    nc.collection_id,
    nc.collection_name,
    nc.collection_type,
    nc.total_supply,
    COUNT(DISTINCT nt.token_id) as minted_tokens,
    COUNT(DISTINCT nt.current_owner_wallet_id) as unique_holders,
    SUM(CASE WHEN nt.is_burned = 0 THEN 1 ELSE 0 END) as active_tokens,
    COUNT(DISTINCT ntr.transfer_id) as total_transfers,
    COALESCE(AVG(ntr.price_usd), 0) as avg_price_usd,
    COALESCE(MAX(ntr.price_usd), 0) as max_price_usd
FROM nft_collection nc
LEFT JOIN nft_token nt ON nc.collection_id = nt.collection_id
LEFT JOIN nft_transfer ntr ON nt.token_id = ntr.token_id
GROUP BY nc.collection_id;

-- Royalty distribution summary
CREATE OR REPLACE VIEW v_royalty_distribution_summary AS
SELECT 
    rsc.split_contract_id,
    rsc.split_name,
    rsc.distribution_frequency,
    rsc.total_distributed,
    rsc.recouped_amount,
    COUNT(DISTINCT rsr.wallet_id) as recipient_count,
    COUNT(DISTINCT rd.distribution_id) as distribution_count,
    SUM(CASE WHEN rd.status = 'completed' THEN rd.distribution_amount ELSE 0 END) as completed_distributions,
    SUM(CASE WHEN rd.status = 'pending' THEN rd.distribution_amount ELSE 0 END) as pending_distributions
FROM royalty_split_contract rsc
LEFT JOIN royalty_split_recipient rsr ON rsc.split_contract_id = rsr.split_contract_id
LEFT JOIN royalty_distribution rd ON rsc.split_contract_id = rd.split_contract_id
WHERE rsc.is_active = 1
GROUP BY rsc.split_contract_id;

-- Gas optimization insights
CREATE OR REPLACE VIEW v_gas_optimization AS
SELECT 
    sc.contract_type,
    sc.blockchain_network,
    ci.function_name,
    COUNT(*) as call_count,
    AVG(ci.gas_used) as avg_gas_used,
    MIN(ci.gas_used) as min_gas_used,
    MAX(ci.gas_used) as max_gas_used,
    STD(ci.gas_used) as gas_std_dev,
    AVG(bt.gas_fee_usd) as avg_fee_usd
FROM contract_interaction ci
JOIN smart_contract sc ON ci.contract_id = sc.contract_id
LEFT JOIN blockchain_transaction bt ON ci.transaction_id = bt.transaction_id
WHERE ci.status = 'completed'
GROUP BY sc.contract_type, sc.blockchain_network, ci.function_name
HAVING call_count >= 10
ORDER BY avg_gas_used DESC;

-- =====================================================
-- STORED PROCEDURES FOR BLOCKCHAIN OPERATIONS
-- =====================================================

DELIMITER //

-- Deploy smart contract procedure
CREATE PROCEDURE sp_deploy_smart_contract(
    IN p_template_id BIGINT,
    IN p_deployer_wallet_id BIGINT,
    IN p_contract_name VARCHAR(255),
    IN p_initialization_params JSON,
    IN p_blockchain_network VARCHAR(50)
)
BEGIN
    DECLARE v_contract_id BIGINT;
    DECLARE v_estimated_gas BIGINT;
    
    -- Get gas estimate from template
    SELECT gas_estimate INTO v_estimated_gas
    FROM smart_contract_template
    WHERE template_id = p_template_id;
    
    -- Insert contract record
    INSERT INTO smart_contract (
        template_id,
        blockchain_network,
        contract_type,
        deployer_wallet_id,
        owner_wallet_id,
        contract_name,
        initialization_params,
        created_at
    )
    SELECT 
        p_template_id,
        p_blockchain_network,
        template_type,
        p_deployer_wallet_id,
        p_deployer_wallet_id,
        p_contract_name,
        p_initialization_params,
        NOW()
    FROM smart_contract_template
    WHERE template_id = p_template_id;
    
    SET v_contract_id = LAST_INSERT_ID();
    
    -- Return contract details
    SELECT v_contract_id as contract_id, v_estimated_gas as estimated_gas;
END//

-- Process royalty distribution
CREATE PROCEDURE sp_process_royalty_distribution(
    IN p_split_contract_id BIGINT,
    IN p_gross_amount DECIMAL(20,6),
    IN p_source_type VARCHAR(50),
    IN p_source_reference VARCHAR(255)
)
BEGIN
    DECLARE v_recoupment_amount DECIMAL(20,6) DEFAULT 0;
    DECLARE v_distribution_amount DECIMAL(20,6);
    DECLARE v_remaining_recoupment DECIMAL(20,6);
    DECLARE v_distribution_id BIGINT;
    
    -- Start transaction
    START TRANSACTION;
    
    -- Get recoupment info
    SELECT 
        GREATEST(0, recoupment_amount - recouped_amount) INTO v_remaining_recoupment
    FROM royalty_split_contract
    WHERE split_contract_id = p_split_contract_id
    AND recoupment_enabled = 1;
    
    -- Calculate recoupment
    IF v_remaining_recoupment > 0 THEN
        SET v_recoupment_amount = LEAST(p_gross_amount, v_remaining_recoupment);
        SET v_distribution_amount = p_gross_amount - v_recoupment_amount;
        
        -- Update recouped amount
        UPDATE royalty_split_contract
        SET recouped_amount = recouped_amount + v_recoupment_amount
        WHERE split_contract_id = p_split_contract_id;
    ELSE
        SET v_distribution_amount = p_gross_amount;
    END IF;
    
    -- Create distribution record
    INSERT INTO royalty_distribution (
        split_contract_id,
        source_type,
        source_reference,
        gross_amount,
        recoupment_amount,
        distribution_amount,
        currency,
        status,
        created_at
    ) VALUES (
        p_split_contract_id,
        p_source_type,
        p_source_reference,
        p_gross_amount,
        v_recoupment_amount,
        v_distribution_amount,
        'USD',
        'pending',
        NOW()
    );
    
    SET v_distribution_id = LAST_INSERT_ID();
    
    -- Update recipient pending amounts
    UPDATE royalty_split_recipient rsr
    SET pending_amount = pending_amount + (v_distribution_amount * (rsr.split_percentage / 100))
    WHERE rsr.split_contract_id = p_split_contract_id
    AND rsr.is_active = 1;
    
    -- Update contract totals
    UPDATE royalty_split_contract
    SET total_distributed = total_distributed + v_distribution_amount
    WHERE split_contract_id = p_split_contract_id;
    
    COMMIT;
    
    SELECT v_distribution_id as distribution_id, v_distribution_amount as distributed_amount;
END//

DELIMITER ;

-- =====================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- =====================================================

-- Additional performance indexes
CREATE INDEX idx_wallet_active ON wallet_address(is_active, blockchain_network);
CREATE INDEX idx_contract_active ON smart_contract(is_active, contract_type);
CREATE INDEX idx_tx_recent ON blockchain_transaction(created_at DESC, status);
CREATE INDEX idx_event_processing ON smart_contract_event(processed_at, contract_id);
CREATE INDEX idx_distribution_pending ON royalty_distribution(status, created_at) WHERE status = 'pending';
CREATE INDEX idx_nft_ownership ON nft_token(current_owner_wallet_id, is_burned);
CREATE INDEX idx_gas_optimization ON gas_fee_tracking(blockchain_network, timestamp DESC);

-- =============================================================================
-- Section 10: Enhanced NFT Tables
-- =============================================================================

-- -----------------------------------------------------------------------------
-- CORE NFT INFRASTRUCTURE (Enhancement)
-- -----------------------------------------------------------------------------

-- NFT Metadata Storage with IPFS Integration
CREATE TABLE nft_metadata (
    metadata_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    version INT UNSIGNED NOT NULL DEFAULT 1,
    ipfs_hash VARCHAR(100) NOT NULL,
    arweave_id VARCHAR(100),
    metadata_uri VARCHAR(500),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    image_url VARCHAR(500),
    animation_url VARCHAR(500),
    external_url VARCHAR(500),
    background_color VARCHAR(7),
    youtube_url VARCHAR(500),
    attributes JSON,
    properties JSON,
    localization JSON,
    content_rating VARCHAR(10),
    content_warnings JSON,
    is_active BOOLEAN DEFAULT TRUE,
    created_by INT UNSIGNED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_nft_version (nft_id, version),
    INDEX idx_ipfs (ipfs_hash),
    INDEX idx_active (is_active, created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Dynamic NFT Traits and Achievements
CREATE TABLE nft_trait (
    trait_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    trait_type VARCHAR(100) NOT NULL,
    trait_value VARCHAR(255) NOT NULL,
    display_type VARCHAR(50), -- number, date, boost_percentage, boost_number
    max_value DECIMAL(20,8),
    trait_count INT UNSIGNED DEFAULT 0,
    rarity_score DECIMAL(5,4),
    is_dynamic BOOLEAN DEFAULT FALSE,
    update_frequency VARCHAR(50), -- real_time, daily, weekly, milestone
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_nft_trait (nft_id, trait_type),
    INDEX idx_trait_value (trait_type, trait_value),
    INDEX idx_dynamic (is_dynamic, update_frequency),
    INDEX idx_rarity (rarity_score)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Current NFT Ownership with Fractional Support
CREATE TABLE nft_ownership (
    ownership_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    owner_address VARCHAR(42) NOT NULL,
    fraction_amount DECIMAL(36,18) NOT NULL DEFAULT 1.000000000000000000,
    fraction_percentage DECIMAL(20,18),
    acquisition_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    acquisition_price DECIMAL(20,8),
    acquisition_currency VARCHAR(10),
    lock_until TIMESTAMP NULL,
    delegation_address VARCHAR(42),
    delegation_until TIMESTAMP NULL,
    is_custodial BOOLEAN DEFAULT FALSE,
    custodian_id INT UNSIGNED,
    metadata JSON,
    INDEX idx_owner (owner_address, nft_id),
    INDEX idx_nft_owner (nft_id, fraction_amount DESC),
    INDEX idx_lock (lock_until),
    INDEX idx_delegation (delegation_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Complete Ownership History Trail
CREATE TABLE nft_ownership_history (
    history_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    from_address VARCHAR(42),
    to_address VARCHAR(42) NOT NULL,
    fraction_amount DECIMAL(36,18) NOT NULL,
    transaction_type VARCHAR(50) NOT NULL, -- mint, transfer, burn, fractionalize
    transaction_hash VARCHAR(66),
    block_number BIGINT UNSIGNED,
    gas_price DECIMAL(20,8),
    gas_used INT UNSIGNED,
    price DECIMAL(20,8),
    currency VARCHAR(10),
    marketplace_id INT UNSIGNED,
    transfer_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata JSON,
    INDEX idx_nft_history (nft_id, transfer_date DESC),
    INDEX idx_from (from_address, transfer_date DESC),
    INDEX idx_to (to_address, transfer_date DESC),
    INDEX idx_tx (transaction_hash),
    INDEX idx_block (block_number)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- MARKETPLACE & TRADING
-- -----------------------------------------------------------------------------

-- Multi-Marketplace NFT Listings
CREATE TABLE nft_marketplace_listing (
    listing_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    seller_address VARCHAR(42) NOT NULL,
    marketplace_name VARCHAR(100) NOT NULL,
    marketplace_id VARCHAR(255),
    listing_type VARCHAR(50) NOT NULL, -- fixed_price, auction, dutch_auction
    price DECIMAL(20,8) NOT NULL,
    currency VARCHAR(10) NOT NULL,
    fraction_amount DECIMAL(36,18) DEFAULT 1.000000000000000000,
    min_bid DECIMAL(20,8),
    reserve_price DECIMAL(20,8),
    buy_now_price DECIMAL(20,8),
    start_price DECIMAL(20,8),
    end_price DECIMAL(20,8),
    auction_start TIMESTAMP NULL,
    auction_end TIMESTAMP NULL,
    private_sale_to VARCHAR(42),
    bundle_id INT UNSIGNED,
    status VARCHAR(50) DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NULL,
    metadata JSON,
    INDEX idx_nft_listing (nft_id, status),
    INDEX idx_seller (seller_address, status),
    INDEX idx_marketplace (marketplace_name, status),
    INDEX idx_price (currency, price),
    INDEX idx_auction (auction_end, status),
    INDEX idx_bundle (bundle_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Bid Management for Auctions and Offers
CREATE TABLE nft_bid (
    bid_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    listing_id INT UNSIGNED,
    nft_id INT UNSIGNED NOT NULL,
    bidder_address VARCHAR(42) NOT NULL,
    bid_amount DECIMAL(20,8) NOT NULL,
    currency VARCHAR(10) NOT NULL,
    fraction_amount DECIMAL(36,18) DEFAULT 1.000000000000000000,
    bid_type VARCHAR(50) NOT NULL, -- auction_bid, collection_offer, token_offer
    expiration_date TIMESTAMP NULL,
    message TEXT,
    signature VARCHAR(132),
    status VARCHAR(50) DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    accepted_at TIMESTAMP NULL,
    rejected_at TIMESTAMP NULL,
    outbid_at TIMESTAMP NULL,
    metadata JSON,
    INDEX idx_listing_bids (listing_id, bid_amount DESC),
    INDEX idx_nft_bids (nft_id, status, bid_amount DESC),
    INDEX idx_bidder (bidder_address, status),
    INDEX idx_status (status, created_at DESC),
    INDEX idx_expiration (expiration_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Completed NFT Sales
CREATE TABLE nft_sale (
    sale_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    listing_id INT UNSIGNED,
    seller_address VARCHAR(42) NOT NULL,
    buyer_address VARCHAR(42) NOT NULL,
    sale_price DECIMAL(20,8) NOT NULL,
    currency VARCHAR(10) NOT NULL,
    fraction_amount DECIMAL(36,18) DEFAULT 1.000000000000000000,
    marketplace_name VARCHAR(100),
    marketplace_fee DECIMAL(20,8),
    creator_royalty DECIMAL(20,8),
    gas_fee DECIMAL(20,8),
    net_seller_amount DECIMAL(20,8),
    transaction_hash VARCHAR(66),
    block_number BIGINT UNSIGNED,
    sale_type VARCHAR(50), -- primary, secondary, auction, offer_accepted
    bundle_id INT UNSIGNED,
    sale_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata JSON,
    INDEX idx_nft_sales (nft_id, sale_date DESC),
    INDEX idx_seller_sales (seller_address, sale_date DESC),
    INDEX idx_buyer_sales (buyer_address, sale_date DESC),
    INDEX idx_marketplace_sales (marketplace_name, sale_date DESC),
    INDEX idx_tx_hash (transaction_hash),
    INDEX idx_bundle_sale (bundle_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- On-chain Royalty Enforcement
CREATE TABLE nft_royalty (
    royalty_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    collection_id INT UNSIGNED,
    recipient_address VARCHAR(42) NOT NULL,
    royalty_percentage DECIMAL(5,4) NOT NULL, -- Up to 99.99%
    min_royalty_amount DECIMAL(20,8),
    royalty_type VARCHAR(50) DEFAULT 'standard', -- standard, tiered, dynamic
    tier_threshold DECIMAL(20,8),
    is_enforced BOOLEAN DEFAULT TRUE,
    enforcement_type VARCHAR(50), -- on_chain, operator_filter, marketplace
    split_contract_address VARCHAR(42),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NULL,
    metadata JSON,
    INDEX idx_nft_royalty (nft_id),
    INDEX idx_collection_royalty (collection_id),
    INDEX idx_recipient (recipient_address),
    INDEX idx_enforced (is_enforced, enforcement_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- FAN TOKEN SYSTEM
-- -----------------------------------------------------------------------------

-- Token Distribution Events
CREATE TABLE token_distribution (
    distribution_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    token_address VARCHAR(42) NOT NULL,
    distribution_type VARCHAR(50) NOT NULL, -- airdrop, claim, reward, vesting
    distribution_name VARCHAR(255),
    total_amount DECIMAL(36,18) NOT NULL,
    recipients_count INT UNSIGNED NOT NULL,
    amount_per_recipient DECIMAL(36,18),
    eligibility_criteria JSON,
    merkle_root VARCHAR(66),
    ipfs_data VARCHAR(100),
    claim_start TIMESTAMP NULL,
    claim_end TIMESTAMP NULL,
    claimed_amount DECIMAL(36,18) DEFAULT 0,
    claims_count INT UNSIGNED DEFAULT 0,
    status VARCHAR(50) DEFAULT 'pending',
    created_by VARCHAR(42),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    executed_at TIMESTAMP NULL,
    metadata JSON,
    INDEX idx_token_dist (token_address, status),
    INDEX idx_type (distribution_type, status),
    INDEX idx_claim_period (claim_start, claim_end),
    INDEX idx_merkle (merkle_root)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Current Token Holder Balances
CREATE TABLE token_holder (
    holder_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    token_address VARCHAR(42) NOT NULL,
    holder_address VARCHAR(42) NOT NULL,
    balance DECIMAL(36,18) NOT NULL DEFAULT 0,
    locked_balance DECIMAL(36,18) DEFAULT 0,
    staked_balance DECIMAL(36,18) DEFAULT 0,
    delegated_balance DECIMAL(36,18) DEFAULT 0,
    voting_power DECIMAL(36,18),
    holder_since TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_transaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    holder_rank INT UNSIGNED,
    percentage_ownership DECIMAL(20,18),
    is_contract BOOLEAN DEFAULT FALSE,
    tags JSON,
    metadata JSON,
    UNIQUE KEY uk_token_holder (token_address, holder_address),
    INDEX idx_balance (token_address, balance DESC),
    INDEX idx_holder (holder_address),
    INDEX idx_rank (token_address, holder_rank),
    INDEX idx_last_tx (last_transaction DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- All Token Transactions
CREATE TABLE token_transaction (
    transaction_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    token_address VARCHAR(42) NOT NULL,
    transaction_hash VARCHAR(66) NOT NULL,
    block_number BIGINT UNSIGNED NOT NULL,
    from_address VARCHAR(42),
    to_address VARCHAR(42) NOT NULL,
    amount DECIMAL(36,18) NOT NULL,
    transaction_type VARCHAR(50), -- transfer, mint, burn, stake, unstake
    gas_price DECIMAL(20,8),
    gas_used INT UNSIGNED,
    log_index INT UNSIGNED,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata JSON,
    INDEX idx_token_tx (token_address, transaction_date DESC),
    INDEX idx_from_tx (from_address, transaction_date DESC),
    INDEX idx_to_tx (to_address, transaction_date DESC),
    INDEX idx_tx_hash (transaction_hash),
    INDEX idx_block (block_number),
    INDEX idx_type (transaction_type, transaction_date DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Token Vesting Schedules
CREATE TABLE token_vesting (
    vesting_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    token_address VARCHAR(42) NOT NULL,
    beneficiary_address VARCHAR(42) NOT NULL,
    total_amount DECIMAL(36,18) NOT NULL,
    released_amount DECIMAL(36,18) DEFAULT 0,
    vesting_type VARCHAR(50) NOT NULL, -- linear, cliff, stepped, custom
    cliff_duration INT UNSIGNED, -- in seconds
    vesting_duration INT UNSIGNED NOT NULL, -- in seconds
    vesting_interval INT UNSIGNED, -- in seconds
    start_date TIMESTAMP NOT NULL,
    cliff_date TIMESTAMP NULL,
    end_date TIMESTAMP NOT NULL,
    is_revocable BOOLEAN DEFAULT FALSE,
    revoked_at TIMESTAMP NULL,
    revoked_by VARCHAR(42),
    last_release_date TIMESTAMP NULL,
    next_release_date TIMESTAMP NULL,
    next_release_amount DECIMAL(36,18),
    metadata JSON,
    INDEX idx_beneficiary (beneficiary_address, token_address),
    INDEX idx_token_vesting (token_address),
    INDEX idx_next_release (next_release_date),
    INDEX idx_active (revoked_at, end_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Token Burn Events
CREATE TABLE token_burn (
    burn_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    token_address VARCHAR(42) NOT NULL,
    burner_address VARCHAR(42) NOT NULL,
    amount DECIMAL(36,18) NOT NULL,
    burn_type VARCHAR(50), -- manual, fee, buyback, mechanism
    burn_reason VARCHAR(255),
    transaction_hash VARCHAR(66),
    block_number BIGINT UNSIGNED,
    burn_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    usd_value_at_burn DECIMAL(20,8),
    total_supply_before DECIMAL(36,18),
    total_supply_after DECIMAL(36,18),
    metadata JSON,
    INDEX idx_token_burns (token_address, burn_date DESC),
    INDEX idx_burner (burner_address, burn_date DESC),
    INDEX idx_type (burn_type, burn_date DESC),
    INDEX idx_tx (transaction_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- MUSIC-SPECIFIC NFT FEATURES
-- -----------------------------------------------------------------------------

-- Detailed Music Metadata for NFTs
CREATE TABLE nft_music_metadata (
    music_metadata_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    song_id INT UNSIGNED,
    isrc VARCHAR(12),
    iswc VARCHAR(11),
    title VARCHAR(255) NOT NULL,
    artist_name VARCHAR(255) NOT NULL,
    album_name VARCHAR(255),
    genre VARCHAR(100),
    sub_genre VARCHAR(100),
    mood JSON,
    bpm DECIMAL(6,2),
    musical_key VARCHAR(10),
    time_signature VARCHAR(10),
    duration_seconds INT UNSIGNED,
    release_date DATE,
    recording_date DATE,
    recording_location VARCHAR(255),
    producer_names JSON,
    songwriter_names JSON,
    musician_credits JSON,
    engineering_credits JSON,
    label_name VARCHAR(255),
    catalog_number VARCHAR(50),
    audio_format VARCHAR(50),
    bitrate INT UNSIGNED,
    sample_rate INT UNSIGNED,
    lyrics_ipfs_hash VARCHAR(100),
    audio_ipfs_hash VARCHAR(100),
    waveform_data JSON,
    audio_fingerprint VARCHAR(255),
    ai_generated BOOLEAN DEFAULT FALSE,
    ai_model_used VARCHAR(100),
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uk_nft_music (nft_id),
    INDEX idx_isrc (isrc),
    INDEX idx_iswc (iswc),
    INDEX idx_song (song_id),
    INDEX idx_artist (artist_name),
    INDEX idx_genre (genre, sub_genre),
    INDEX idx_bpm_key (bpm, musical_key),
    INDEX idx_release (release_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Stem File Access Control
CREATE TABLE nft_stem_access (
    stem_access_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    stem_type VARCHAR(50) NOT NULL, -- vocals, drums, bass, guitar, keys, other
    stem_name VARCHAR(255),
    file_ipfs_hash VARCHAR(100) NOT NULL,
    file_format VARCHAR(50),
    duration_seconds INT UNSIGNED,
    access_type VARCHAR(50) NOT NULL, -- listen, download, remix, commercial
    min_ownership_percentage DECIMAL(20,18),
    requires_token_gate BOOLEAN DEFAULT FALSE,
    token_gate_address VARCHAR(42),
    token_gate_amount DECIMAL(36,18),
    download_count INT UNSIGNED DEFAULT 0,
    max_downloads INT UNSIGNED,
    watermark_enabled BOOLEAN DEFAULT TRUE,
    encryption_key_hash VARCHAR(64),
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_nft_stems (nft_id, stem_type),
    INDEX idx_access (access_type, requires_token_gate),
    INDEX idx_token_gate (token_gate_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Remix Rights Management
CREATE TABLE nft_remix_rights (
    remix_rights_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    rights_type VARCHAR(50) NOT NULL, -- full, limited, non_commercial, attribution
    commercial_use BOOLEAN DEFAULT FALSE,
    derivative_works BOOLEAN DEFAULT TRUE,
    territory_restrictions JSON,
    genre_restrictions JSON,
    platform_restrictions JSON,
    attribution_required BOOLEAN DEFAULT TRUE,
    approval_required BOOLEAN DEFAULT FALSE,
    revenue_share_percentage DECIMAL(5,2),
    master_royalty_percentage DECIMAL(5,2),
    publishing_royalty_percentage DECIMAL(5,2),
    remix_chain_tracking BOOLEAN DEFAULT TRUE,
    max_derivatives INT UNSIGNED,
    expires_at TIMESTAMP NULL,
    terms_ipfs_hash VARCHAR(100),
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uk_nft_remix (nft_id),
    INDEX idx_rights_type (rights_type, commercial_use),
    INDEX idx_expires (expires_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Dynamic NFT Achievement Milestones
CREATE TABLE nft_achievement_milestone (
    milestone_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    milestone_type VARCHAR(50) NOT NULL, -- streams, sales, chart_position, social
    milestone_name VARCHAR(255),
    milestone_value BIGINT UNSIGNED NOT NULL,
    achieved_value BIGINT UNSIGNED,
    achieved_at TIMESTAMP NULL,
    unlock_type VARCHAR(50), -- trait_upgrade, content_unlock, rarity_boost
    unlock_data JSON,
    verification_source VARCHAR(100),
    verification_data JSON,
    oracle_address VARCHAR(42),
    points_awarded INT UNSIGNED,
    badge_ipfs_hash VARCHAR(100),
    notification_sent BOOLEAN DEFAULT FALSE,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_nft_milestones (nft_id, achieved_at),
    INDEX idx_type (milestone_type, achieved_at),
    INDEX idx_achieved (achieved_at),
    INDEX idx_oracle (oracle_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Unlockable Content Management
CREATE TABLE nft_unlockable_content (
    unlockable_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    content_type VARCHAR(50) NOT NULL, -- audio, video, image, text, experience
    content_name VARCHAR(255) NOT NULL,
    content_description TEXT,
    ipfs_hash VARCHAR(100),
    encrypted_url VARCHAR(500),
    unlock_condition VARCHAR(50) NOT NULL, -- ownership, milestone, time, token_gate
    unlock_data JSON,
    min_ownership_duration INT UNSIGNED, -- in seconds
    min_ownership_percentage DECIMAL(20,18),
    token_gate_address VARCHAR(42),
    token_gate_amount DECIMAL(36,18),
    available_from TIMESTAMP NULL,
    available_until TIMESTAMP NULL,
    total_unlocks INT UNSIGNED DEFAULT 0,
    max_unlocks INT UNSIGNED,
    is_transferable BOOLEAN DEFAULT TRUE,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_nft_unlockables (nft_id, unlock_condition),
    INDEX idx_content_type (content_type),
    INDEX idx_availability (available_from, available_until),
    INDEX idx_token_gate_content (token_gate_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Multi-Artist Collaboration Splits
CREATE TABLE nft_collaboration (
    collaboration_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    collaborator_address VARCHAR(42) NOT NULL,
    collaborator_role VARCHAR(50) NOT NULL, -- artist, producer, writer, featured
    revenue_share_percentage DECIMAL(5,4) NOT NULL,
    voting_power_percentage DECIMAL(5,4),
    credit_name VARCHAR(255),
    credit_type VARCHAR(50),
    is_primary BOOLEAN DEFAULT FALSE,
    approval_required BOOLEAN DEFAULT TRUE,
    approved_at TIMESTAMP NULL,
    split_contract_address VARCHAR(42),
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_nft_collab (nft_id),
    INDEX idx_collaborator (collaborator_address),
    INDEX idx_role (collaborator_role),
    INDEX idx_split_contract (split_contract_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Embedded License Terms
CREATE TABLE nft_licensing_terms (
    license_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    license_type VARCHAR(100) NOT NULL,
    license_name VARCHAR(255),
    usage_rights JSON,
    territory VARCHAR(255) DEFAULT 'Worldwide',
    term_length_days INT UNSIGNED,
    start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    end_date TIMESTAMP NULL,
    exclusive BOOLEAN DEFAULT FALSE,
    transferable BOOLEAN DEFAULT TRUE,
    sublicensable BOOLEAN DEFAULT FALSE,
    commercial_use BOOLEAN DEFAULT TRUE,
    modification_allowed BOOLEAN DEFAULT FALSE,
    attribution_text TEXT,
    restrictions JSON,
    fee_structure JSON,
    payment_terms VARCHAR(100),
    termination_conditions JSON,
    governing_law VARCHAR(100),
    dispute_resolution VARCHAR(100),
    license_text_ipfs VARCHAR(100),
    signature_hash VARCHAR(132),
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uk_nft_license (nft_id),
    INDEX idx_license_type (license_type),
    INDEX idx_territory (territory),
    INDEX idx_dates (start_date, end_date),
    INDEX idx_exclusive (exclusive, transferable)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Performance Rights for Live Shows
CREATE TABLE nft_performance_rights (
    performance_rights_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    performance_type VARCHAR(50) NOT NULL, -- live, broadcast, streaming, sync
    venue_restrictions JSON,
    territory_allowed JSON,
    max_performances INT UNSIGNED,
    performances_used INT UNSIGNED DEFAULT 0,
    revenue_share_percentage DECIMAL(5,2),
    advance_notice_days INT UNSIGNED DEFAULT 30,
    approval_required BOOLEAN DEFAULT TRUE,
    setlist_submission_required BOOLEAN DEFAULT TRUE,
    recording_allowed BOOLEAN DEFAULT FALSE,
    streaming_allowed BOOLEAN DEFAULT FALSE,
    merchandise_rights BOOLEAN DEFAULT FALSE,
    valid_from TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    valid_until TIMESTAMP NULL,
    blackout_dates JSON,
    technical_requirements JSON,
    insurance_requirements JSON,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY uk_nft_performance (nft_id),
    INDEX idx_performance_type (performance_type),
    INDEX idx_validity (valid_from, valid_until),
    INDEX idx_usage (performances_used, max_performances)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- ADVANCED FEATURES
-- -----------------------------------------------------------------------------

-- Fractional Ownership Records
CREATE TABLE nft_fraction (
    fraction_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    vault_address VARCHAR(42) NOT NULL,
    token_address VARCHAR(42) NOT NULL,
    token_symbol VARCHAR(10),
    token_name VARCHAR(100),
    total_supply DECIMAL(36,18) NOT NULL,
    fractions_available DECIMAL(36,18),
    fraction_price DECIMAL(20,8),
    currency VARCHAR(10),
    buyout_price DECIMAL(20,8),
    curator_fee_percentage DECIMAL(5,2),
    fractionalization_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    reconstitution_date TIMESTAMP NULL,
    status VARCHAR(50) DEFAULT 'active',
    metadata JSON,
    INDEX idx_nft_fractions (nft_id),
    INDEX idx_vault (vault_address),
    INDEX idx_token (token_address),
    INDEX idx_status (status, fractionalization_date DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- AMM Liquidity Pools for Rights Trading
CREATE TABLE nft_liquidity_pool (
    pool_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    pool_address VARCHAR(42) NOT NULL,
    token_a_address VARCHAR(42) NOT NULL,
    token_b_address VARCHAR(42) NOT NULL,
    token_a_symbol VARCHAR(10),
    token_b_symbol VARCHAR(10),
    token_a_reserves DECIMAL(36,18),
    token_b_reserves DECIMAL(36,18),
    total_liquidity DECIMAL(36,18),
    fee_percentage DECIMAL(5,4) DEFAULT 0.3000,
    price_ratio DECIMAL(36,18),
    volume_24h DECIMAL(20,8),
    volume_7d DECIMAL(20,8),
    fees_earned_24h DECIMAL(20,8),
    fees_earned_total DECIMAL(20,8),
    apy DECIMAL(10,4),
    impermanent_loss DECIMAL(10,4),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_swap_at TIMESTAMP NULL,
    metadata JSON,
    UNIQUE KEY uk_pool_address (pool_address),
    INDEX idx_tokens (token_a_address, token_b_address),
    INDEX idx_liquidity (total_liquidity DESC),
    INDEX idx_volume (volume_24h DESC),
    INDEX idx_apy (apy DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Governance Voting System
CREATE TABLE nft_governance (
    governance_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    proposal_id VARCHAR(100) NOT NULL,
    nft_collection_id INT UNSIGNED,
    token_address VARCHAR(42),
    proposal_type VARCHAR(50) NOT NULL, -- parameter, upgrade, treasury, general
    title VARCHAR(255) NOT NULL,
    description TEXT,
    proposer_address VARCHAR(42) NOT NULL,
    ipfs_hash VARCHAR(100),
    voting_start TIMESTAMP NOT NULL,
    voting_end TIMESTAMP NOT NULL,
    quorum_required DECIMAL(20,18),
    approval_threshold DECIMAL(5,2),
    total_votes_for DECIMAL(36,18) DEFAULT 0,
    total_votes_against DECIMAL(36,18) DEFAULT 0,
    total_votes_abstain DECIMAL(36,18) DEFAULT 0,
    unique_voters INT UNSIGNED DEFAULT 0,
    execution_delay INT UNSIGNED, -- in seconds
    execution_deadline TIMESTAMP NULL,
    executed_at TIMESTAMP NULL,
    execution_tx_hash VARCHAR(66),
    status VARCHAR(50) DEFAULT 'pending',
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY uk_proposal_id (proposal_id),
    INDEX idx_collection_gov (nft_collection_id),
    INDEX idx_token_gov (token_address),
    INDEX idx_status (status, voting_end),
    INDEX idx_proposer (proposer_address),
    INDEX idx_voting_period (voting_start, voting_end)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Staking Mechanisms
CREATE TABLE nft_staking (
    staking_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED,
    token_address VARCHAR(42),
    staker_address VARCHAR(42) NOT NULL,
    staking_contract VARCHAR(42) NOT NULL,
    amount_staked DECIMAL(36,18) NOT NULL,
    reward_token_address VARCHAR(42),
    reward_rate DECIMAL(36,18),
    rewards_earned DECIMAL(36,18) DEFAULT 0,
    rewards_claimed DECIMAL(36,18) DEFAULT 0,
    multiplier DECIMAL(5,2) DEFAULT 1.00,
    lock_period_days INT UNSIGNED,
    stake_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    unlock_date TIMESTAMP NULL,
    last_claim_date TIMESTAMP NULL,
    unstake_date TIMESTAMP NULL,
    auto_compound BOOLEAN DEFAULT FALSE,
    status VARCHAR(50) DEFAULT 'active',
    metadata JSON,
    INDEX idx_staker (staker_address, status),
    INDEX idx_nft_staking (nft_id),
    INDEX idx_token_staking (token_address),
    INDEX idx_contract (staking_contract),
    INDEX idx_unlock (unlock_date),
    INDEX idx_rewards (rewards_earned)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Oracle Data Feeds for Dynamic NFTs
CREATE TABLE nft_oracle_feed (
    feed_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    oracle_address VARCHAR(42) NOT NULL,
    feed_name VARCHAR(100) NOT NULL,
    feed_type VARCHAR(50) NOT NULL, -- price, streaming_count, social_metrics
    data_source VARCHAR(100),
    update_frequency INT UNSIGNED, -- in seconds
    last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_value VARCHAR(255),
    last_value_numeric DECIMAL(36,18),
    aggregation_method VARCHAR(50),
    heartbeat_interval INT UNSIGNED,
    deviation_threshold DECIMAL(10,4),
    is_active BOOLEAN DEFAULT TRUE,
    reliability_score DECIMAL(5,4),
    total_updates BIGINT UNSIGNED DEFAULT 0,
    failed_updates INT UNSIGNED DEFAULT 0,
    metadata JSON,
    INDEX idx_oracle (oracle_address),
    INDEX idx_feed_type (feed_type, is_active),
    INDEX idx_last_update (last_update),
    INDEX idx_reliability (reliability_score DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Cross-Chain NFT Bridge Records
CREATE TABLE nft_cross_chain (
    bridge_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nft_id INT UNSIGNED NOT NULL,
    source_chain VARCHAR(50) NOT NULL,
    source_token_id VARCHAR(100),
    source_contract VARCHAR(42),
    destination_chain VARCHAR(50) NOT NULL,
    destination_token_id VARCHAR(100),
    destination_contract VARCHAR(42),
    bridge_contract VARCHAR(42),
    owner_address VARCHAR(42) NOT NULL,
    bridge_type VARCHAR(50), -- lock_mint, burn_mint, wrapped
    source_tx_hash VARCHAR(66),
    destination_tx_hash VARCHAR(66),
    bridge_fee DECIMAL(20,8),
    status VARCHAR(50) DEFAULT 'initiated',
    initiated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP NULL,
    metadata JSON,
    INDEX idx_nft_bridge (nft_id),
    INDEX idx_chains (source_chain, destination_chain),
    INDEX idx_owner_bridge (owner_address, status),
    INDEX idx_status (status, initiated_at DESC),
    INDEX idx_tx (source_tx_hash, destination_tx_hash)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------------------------------
-- VIEWS FOR NFT ANALYTICS
-- -----------------------------------------------------------------------------

-- NFT Portfolio Overview
CREATE VIEW vw_nft_portfolio AS
SELECT 
    o.owner_address,
    COUNT(DISTINCT o.nft_id) as total_nfts,
    SUM(o.fraction_amount) as total_fractions,
    COUNT(DISTINCT CASE WHEN mm.music_metadata_id IS NOT NULL THEN o.nft_id END) as music_nfts,
    COALESCE(SUM(l.price * o.fraction_percentage), 0) as portfolio_value,
    MAX(o.acquisition_date) as last_acquisition
FROM nft_ownership o
LEFT JOIN nft_music_metadata mm ON o.nft_id = mm.nft_id
LEFT JOIN nft_marketplace_listing l ON o.nft_id = l.nft_id AND l.status = 'active'
GROUP BY o.owner_address;

-- Music NFT Analytics
CREATE VIEW vw_music_nft_analytics AS
SELECT 
    mm.nft_id,
    mm.title,
    mm.artist_name,
    mm.genre,
    COUNT(DISTINCT o.owner_address) as unique_holders,
    COALESCE(SUM(s.sale_price), 0) as total_sales_volume,
    COUNT(s.sale_id) as total_sales,
    AVG(s.sale_price) as average_sale_price,
    MAX(s.sale_date) as last_sale_date,
    GROUP_CONCAT(DISTINCT t.trait_value) as dynamic_traits
FROM nft_music_metadata mm
LEFT JOIN nft_ownership o ON mm.nft_id = o.nft_id
LEFT JOIN nft_sale s ON mm.nft_id = s.nft_id
LEFT JOIN nft_trait t ON mm.nft_id = t.nft_id AND t.is_dynamic = TRUE
GROUP BY mm.nft_id, mm.title, mm.artist_name, mm.genre;

-- Token Holder Distribution
CREATE VIEW vw_token_holder_distribution AS
SELECT 
    token_address,
    COUNT(DISTINCT holder_address) as total_holders,
    SUM(balance) as total_supply,
    AVG(balance) as average_balance,
    MAX(balance) as largest_holder_balance,
    SUM(CASE WHEN balance >= 1000000 THEN 1 ELSE 0 END) as whale_count,
    SUM(CASE WHEN staked_balance > 0 THEN 1 ELSE 0 END) as stakers_count,
    SUM(staked_balance) as total_staked
FROM token_holder
WHERE balance > 0
GROUP BY token_address;

-- Active NFT Markets
CREATE VIEW vw_active_nft_markets AS
SELECT 
    marketplace_name,
    COUNT(DISTINCT listing_id) as active_listings,
    COUNT(DISTINCT nft_id) as unique_nfts,
    SUM(price) as total_listing_value,
    AVG(price) as average_price,
    MIN(price) as floor_price,
    MAX(price) as ceiling_price,
    COUNT(DISTINCT seller_address) as unique_sellers
FROM nft_marketplace_listing
WHERE status = 'active' AND expires_at > NOW()
GROUP BY marketplace_name;

-- -----------------------------------------------------------------------------
-- INDEXES FOR OPTIMAL PERFORMANCE
-- -----------------------------------------------------------------------------

-- Additional composite indexes for complex queries
CREATE INDEX idx_nft_trading ON nft_sale(nft_id, sale_date, sale_price);
CREATE INDEX idx_holder_portfolio ON nft_ownership(owner_address, nft_id, fraction_amount);
CREATE INDEX idx_dynamic_updates ON nft_trait(is_dynamic, update_frequency, last_updated);
CREATE INDEX idx_token_analytics ON token_holder(token_address, balance DESC, holder_rank);
CREATE INDEX idx_milestone_tracking ON nft_achievement_milestone(nft_id, milestone_type, achieved_at);

-- Indexes for join performance
CREATE INDEX idx_music_join ON nft_music_metadata(nft_id, artist_name, genre);
CREATE INDEX idx_collab_join ON nft_collaboration(nft_id, collaborator_address, revenue_share_percentage);
CREATE INDEX idx_remix_join ON nft_remix_rights(nft_id, rights_type, commercial_use);

-- =============================================
-- Section 11: FAN TOKENIZATION TABLES
-- =============================================

-- =============================================
-- CORE INVESTMENT INFRASTRUCTURE
-- =============================================

-- Table: fan_investment
-- Core investment transactions and terms
CREATE TABLE IF NOT EXISTS fan_investment (
    investment_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    investor_id CHAR(36) NOT NULL,
    asset_id CHAR(36) NOT NULL,
    offering_id CHAR(36) NOT NULL,
    
    -- Investment details
    investment_amount DECIMAL(20,8) NOT NULL CHECK (investment_amount > 0),
    investment_currency VARCHAR(10) NOT NULL, -- USD, EUR, BTC, ETH, etc.
    investment_amount_usd DECIMAL(20,8) NOT NULL, -- Normalized to USD
    tokens_purchased DECIMAL(30,18) NOT NULL, -- Support fractional tokens
    token_price DECIMAL(20,8) NOT NULL,
    
    -- Investment type and terms
    investment_type VARCHAR(20) NOT NULL, -- PRE_RELEASE, POST_RELEASE, SECONDARY, CROWDFUND
    revenue_share_percentage DECIMAL(10,6) NOT NULL, -- Percentage of revenue
    investment_tier VARCHAR(50), -- BRONZE, SILVER, GOLD, PLATINUM
    vesting_schedule JSON, -- {"cliff": 6, "duration": 24, "percentage": 100}
    
    -- Transaction details
    transaction_hash VARCHAR(100),
    blockchain_network VARCHAR(50),
    gas_fee DECIMAL(20,8),
    
    -- Dates and status
    investment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    maturity_date DATE,
    status VARCHAR(20) DEFAULT 'PENDING', -- PENDING, CONFIRMED, FAILED, REFUNDED, MATURED
    
    -- Compliance
    kyc_verified BOOLEAN DEFAULT FALSE,
    accredited_investor BOOLEAN DEFAULT FALSE,
    investment_limit_check BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    investment_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_investor (investor_id),
    INDEX idx_asset (asset_id),
    INDEX idx_offering (offering_id),
    INDEX idx_investment_date (investment_date),
    INDEX idx_status (status),
    FOREIGN KEY (investor_id) REFERENCES users(user_id),
    FOREIGN KEY (asset_id) REFERENCES music_assets(asset_id),
    FOREIGN KEY (offering_id) REFERENCES token_offering(offering_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: fan_investor_kyc
-- Compliance and verification for investors
CREATE TABLE IF NOT EXISTS fan_investor_kyc (
    kyc_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    investor_id CHAR(36) NOT NULL,
    
    -- Identity verification
    verification_status VARCHAR(20) DEFAULT 'PENDING', -- PENDING, VERIFIED, REJECTED, EXPIRED
    verification_level VARCHAR(20) DEFAULT 'BASIC', -- BASIC, ENHANCED, ACCREDITED
    verification_date TIMESTAMP,
    expiry_date DATE,
    
    -- Compliance data
    country_code VARCHAR(3) NOT NULL,
    state_province VARCHAR(100),
    tax_id_hash VARCHAR(255), -- Encrypted tax ID
    id_document_type VARCHAR(50),
    id_document_hash VARCHAR(255), -- Encrypted document reference
    
    -- Investment limits
    annual_income_range VARCHAR(50),
    net_worth_range VARCHAR(50),
    investment_experience VARCHAR(50),
    risk_tolerance VARCHAR(20), -- CONSERVATIVE, MODERATE, AGGRESSIVE
    
    -- Accreditation
    accredited_status BOOLEAN DEFAULT FALSE,
    accreditation_type VARCHAR(100),
    accreditation_verified_by VARCHAR(100),
    accreditation_date DATE,
    
    -- Restrictions
    restricted_countries JSON, -- ["US", "CN", "KP"]
    investment_limit_annual DECIMAL(20,2),
    investment_limit_per_asset DECIMAL(20,2),
    
    -- Anti-money laundering
    aml_check_status VARCHAR(20) DEFAULT 'PENDING', -- PENDING, CLEARED, FLAGGED, BLOCKED
    aml_check_date TIMESTAMP,
    aml_risk_score DECIMAL(5,2),
    sanctions_check BOOLEAN DEFAULT FALSE,
    pep_check BOOLEAN DEFAULT FALSE, -- Politically Exposed Person
    
    -- Metadata
    kyc_provider VARCHAR(100),
    provider_reference_id VARCHAR(255),
    verification_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_investor (investor_id),
    INDEX idx_verification_status (verification_status),
    INDEX idx_country (country_code),
    INDEX idx_accredited (accredited_status),
    FOREIGN KEY (investor_id) REFERENCES users(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: revenue_share_token
-- Tokenized revenue streams
CREATE TABLE IF NOT EXISTS revenue_share_token (
    token_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    asset_id CHAR(36) NOT NULL,
    contract_address VARCHAR(100) NOT NULL,
    
    -- Token details
    token_symbol VARCHAR(10) NOT NULL,
    token_name VARCHAR(100) NOT NULL,
    total_supply DECIMAL(30,18) NOT NULL,
    decimals INT DEFAULT 18,
    token_standard VARCHAR(20) DEFAULT 'ERC20', -- ERC20, ERC1155, SPL, BEP20
    
    -- Revenue share parameters
    revenue_types JSON NOT NULL, -- ["STREAMING", "SYNC", "PERFORMANCE", "MECHANICAL"]
    revenue_share_percentage DECIMAL(10,6) NOT NULL, -- Total % of revenue tokenized
    minimum_distribution DECIMAL(20,8), -- Minimum amount before distribution
    distribution_frequency VARCHAR(20) DEFAULT 'MONTHLY', -- REAL_TIME, DAILY, WEEKLY, MONTHLY, QUARTERLY
    
    -- Token economics
    initial_price DECIMAL(20,8) NOT NULL,
    current_price DECIMAL(20,8) NOT NULL,
    market_cap DECIMAL(30,8),
    circulating_supply DECIMAL(30,18),
    locked_supply DECIMAL(30,18),
    
    -- Compliance
    security_token BOOLEAN DEFAULT TRUE,
    regulatory_approval JSON, -- {"SEC": "approved", "date": "2024-01-01"}
    transfer_restrictions JSON, -- {"lockup_period": 180, "whitelist_required": true}
    
    -- Status
    status VARCHAR(20) DEFAULT 'PLANNED', -- PLANNED, DEPLOYED, ACTIVE, PAUSED, RETIRED
    deployment_date TIMESTAMP,
    retirement_date TIMESTAMP,
    
    -- Metadata
    token_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_contract_address (contract_address),
    UNIQUE KEY uk_token_symbol (token_symbol),
    INDEX idx_asset (asset_id),
    INDEX idx_status (status),
    INDEX idx_security_token (security_token),
    FOREIGN KEY (asset_id) REFERENCES music_assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: token_offering
-- Primary token sales/STOs
CREATE TABLE IF NOT EXISTS token_offering (
    offering_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    token_id CHAR(36) NOT NULL,
    asset_id CHAR(36) NOT NULL,
    
    -- Offering details
    offering_type VARCHAR(30) NOT NULL, -- PRIVATE_SALE, PUBLIC_SALE, CROWDFUND, AUCTION, BONDING_CURVE
    offering_name VARCHAR(200) NOT NULL,
    offering_description TEXT,
    
    -- Token allocation
    tokens_offered DECIMAL(30,18) NOT NULL,
    tokens_sold DECIMAL(30,18) DEFAULT 0,
    tokens_reserved DECIMAL(30,18) DEFAULT 0,
    minimum_investment DECIMAL(20,8) NOT NULL,
    maximum_investment DECIMAL(20,8),
    
    -- Pricing
    token_price DECIMAL(20,8) NOT NULL,
    pricing_model VARCHAR(20) DEFAULT 'FIXED', -- FIXED, DUTCH_AUCTION, BONDING_CURVE, DYNAMIC
    price_parameters JSON, -- {"start_price": 1.0, "end_price": 0.5, "curve": "linear"}
    accepted_currencies JSON, -- ["USD", "ETH", "BTC", "USDC"]
    
    -- Fundraising goals
    soft_cap DECIMAL(20,2),
    hard_cap DECIMAL(20,2) NOT NULL,
    funds_raised DECIMAL(20,2) DEFAULT 0,
    funds_raised_usd DECIMAL(20,2) DEFAULT 0,
    
    -- Timeline
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    early_bird_end TIMESTAMP,
    whitelist_end TIMESTAMP,
    
    -- Investor tiers
    investor_tiers JSON, -- [{"tier": "GOLD", "discount": 20, "minimum": 10000}]
    early_bird_bonus DECIMAL(5,2) DEFAULT 0,
    referral_bonus DECIMAL(5,2) DEFAULT 0,
    
    -- Restrictions
    kyc_required BOOLEAN DEFAULT TRUE,
    accredited_only BOOLEAN DEFAULT FALSE,
    geographic_restrictions JSON, -- {"allowed": ["US", "EU"], "blocked": ["CN"]}
    max_investors INT,
    
    -- Status
    status VARCHAR(20) DEFAULT 'DRAFT', -- DRAFT, UPCOMING, ACTIVE, COMPLETED, CANCELLED, FAILED
    completion_date TIMESTAMP,
    
    -- Smart contract
    offering_contract_address VARCHAR(100),
    escrow_address VARCHAR(100),
    
    -- Metadata
    offering_metadata JSON,
    marketing_materials JSON, -- {"whitepaper": "url", "pitch_deck": "url"}
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_token (token_id),
    INDEX idx_asset (asset_id),
    INDEX idx_status (status),
    INDEX idx_dates (start_date, end_date),
    INDEX idx_offering_type (offering_type),
    FOREIGN KEY (token_id) REFERENCES revenue_share_token(token_id),
    FOREIGN KEY (asset_id) REFERENCES music_assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- DISTRIBUTION & RETURNS
-- =============================================

-- Table: token_dividend
-- Automated distributions to token holders
CREATE TABLE IF NOT EXISTS token_dividend (
    dividend_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    token_id CHAR(36) NOT NULL,
    calculation_id CHAR(36) NOT NULL,
    
    -- Distribution details
    period_start DATE NOT NULL,
    period_end DATE NOT NULL,
    revenue_amount DECIMAL(20,8) NOT NULL,
    distribution_amount DECIMAL(20,8) NOT NULL,
    distribution_currency VARCHAR(10) NOT NULL,
    
    -- Per token metrics
    amount_per_token DECIMAL(30,18) NOT NULL,
    eligible_token_supply DECIMAL(30,18) NOT NULL,
    snapshot_date TIMESTAMP NOT NULL,
    
    -- Distribution execution
    distribution_date TIMESTAMP,
    distribution_type VARCHAR(20) DEFAULT 'AUTOMATIC', -- AUTOMATIC, MANUAL, CLAIM_BASED
    distribution_status VARCHAR(20) DEFAULT 'CALCULATING', -- CALCULATING, READY, IN_PROGRESS, COMPLETED, FAILED
    
    -- Blockchain details
    distribution_tx_hash VARCHAR(100),
    gas_cost_total DECIMAL(20,8),
    distributions_count INT DEFAULT 0,
    
    -- Efficiency metrics
    batch_size INT DEFAULT 100,
    batches_completed INT DEFAULT 0,
    total_batches INT,
    
    -- Metadata
    calculation_metadata JSON,
    distribution_report JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_token (token_id),
    INDEX idx_period (period_start, period_end),
    INDEX idx_status (distribution_status),
    INDEX idx_distribution_date (distribution_date),
    FOREIGN KEY (token_id) REFERENCES revenue_share_token(token_id),
    FOREIGN KEY (calculation_id) REFERENCES dividend_calculation(calculation_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: dividend_calculation
-- Complex calculation engine for distributions
CREATE TABLE IF NOT EXISTS dividend_calculation (
    calculation_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    token_id CHAR(36) NOT NULL,
    
    -- Calculation parameters
    calculation_type VARCHAR(20) NOT NULL, -- REVENUE_SHARE, PROFIT_SHARE, MILESTONE, BONUS
    calculation_period VARCHAR(50) NOT NULL, -- "2024-Q1", "2024-01", etc.
    
    -- Revenue sources
    streaming_revenue DECIMAL(20,8) DEFAULT 0,
    sync_revenue DECIMAL(20,8) DEFAULT 0,
    performance_revenue DECIMAL(20,8) DEFAULT 0,
    mechanical_revenue DECIMAL(20,8) DEFAULT 0,
    merchandise_revenue DECIMAL(20,8) DEFAULT 0,
    other_revenue DECIMAL(20,8) DEFAULT 0,
    total_revenue DECIMAL(20,8) NOT NULL,
    
    -- Deductions
    platform_fee DECIMAL(20,8) DEFAULT 0,
    management_fee DECIMAL(20,8) DEFAULT 0,
    expenses DECIMAL(20,8) DEFAULT 0,
    reserves DECIMAL(20,8) DEFAULT 0,
    
    -- Distribution calculation
    distributable_amount DECIMAL(20,8) NOT NULL,
    token_holder_share DECIMAL(10,6) NOT NULL, -- Percentage
    distribution_amount DECIMAL(20,8) NOT NULL,
    
    -- Token metrics at calculation time
    total_supply DECIMAL(30,18) NOT NULL,
    circulating_supply DECIMAL(30,18) NOT NULL,
    excluded_tokens DECIMAL(30,18) DEFAULT 0, -- Treasury, locked, etc.
    
    -- Calculation details
    calculation_formula TEXT,
    calculation_parameters JSON,
    calculation_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Verification
    verified_by VARCHAR(100),
    verification_date TIMESTAMP,
    audit_trail JSON,
    
    -- Status
    status VARCHAR(20) DEFAULT 'DRAFT', -- DRAFT, PENDING_VERIFICATION, VERIFIED, APPROVED, REJECTED
    
    -- Metadata
    calculation_notes TEXT,
    supporting_documents JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_token (token_id),
    INDEX idx_period (calculation_period),
    INDEX idx_status (status),
    INDEX idx_calculation_type (calculation_type),
    FOREIGN KEY (token_id) REFERENCES revenue_share_token(token_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: investment_return
-- ROI and performance tracking
CREATE TABLE IF NOT EXISTS investment_return (
    return_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    investment_id CHAR(36) NOT NULL,
    investor_id CHAR(36) NOT NULL,
    
    -- Return calculation
    calculation_date DATE NOT NULL,
    initial_investment DECIMAL(20,8) NOT NULL,
    current_value DECIMAL(20,8) NOT NULL,
    total_distributions DECIMAL(20,8) DEFAULT 0,
    unrealized_gain_loss DECIMAL(20,8),
    realized_gain_loss DECIMAL(20,8) DEFAULT 0,
    
    -- Performance metrics
    roi_percentage DECIMAL(10,4), -- Return on Investment %
    irr_percentage DECIMAL(10,4), -- Internal Rate of Return %
    multiple_on_money DECIMAL(10,4), -- e.g., 2.5x
    
    -- Time-based returns
    daily_return DECIMAL(10,6),
    weekly_return DECIMAL(10,6),
    monthly_return DECIMAL(10,6),
    annual_return DECIMAL(10,6),
    
    -- Benchmarking
    benchmark_index VARCHAR(50), -- "MUSIC_INDEX", "SP500", etc.
    benchmark_return DECIMAL(10,4),
    alpha DECIMAL(10,4), -- Excess return vs benchmark
    
    -- Token metrics
    tokens_held DECIMAL(30,18) NOT NULL,
    average_token_price DECIMAL(20,8),
    current_token_price DECIMAL(20,8),
    
    -- Ranking
    percentile_rank DECIMAL(5,2), -- Among all investors
    performance_tier VARCHAR(20), -- TOP_1, TOP_5, TOP_10, TOP_25, AVERAGE, BELOW_AVERAGE
    
    -- Metadata
    calculation_method VARCHAR(50),
    market_conditions JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_investment_date (investment_id, calculation_date),
    INDEX idx_investor (investor_id),
    INDEX idx_calculation_date (calculation_date),
    INDEX idx_roi (roi_percentage),
    INDEX idx_performance_tier (performance_tier),
    FOREIGN KEY (investment_id) REFERENCES fan_investment(investment_id),
    FOREIGN KEY (investor_id) REFERENCES users(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- TRADING & LIQUIDITY
-- =============================================

-- Table: investor_wallet
-- Wallet management and restrictions
CREATE TABLE IF NOT EXISTS investor_wallet (
    wallet_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    investor_id CHAR(36) NOT NULL,
    
    -- Wallet details
    wallet_address VARCHAR(100) NOT NULL,
    wallet_type VARCHAR(20) NOT NULL, -- CUSTODIAL, NON_CUSTODIAL, HARDWARE, MULTI_SIG
    blockchain_network VARCHAR(50) NOT NULL,
    
    -- Verification
    verified BOOLEAN DEFAULT FALSE,
    verification_date TIMESTAMP,
    verification_signature VARCHAR(255),
    
    -- Restrictions
    withdrawal_whitelist JSON, -- ["0x123...", "0x456..."]
    daily_withdrawal_limit DECIMAL(20,8),
    requires_2fa BOOLEAN DEFAULT TRUE,
    lockup_until DATE,
    
    -- Token balances (denormalized for performance)
    token_balances JSON, -- {"TOKEN_ID": {"balance": 1000, "locked": 100}}
    total_value_usd DECIMAL(20,2),
    
    -- Trading permissions
    trading_enabled BOOLEAN DEFAULT TRUE,
    trading_restrictions JSON, -- {"max_daily_volume": 10000, "blocked_tokens": []}
    
    -- Security
    last_activity TIMESTAMP,
    suspicious_activity_score DECIMAL(5,2) DEFAULT 0,
    frozen BOOLEAN DEFAULT FALSE,
    freeze_reason VARCHAR(255),
    
    -- Metadata
    wallet_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_wallet_address (wallet_address, blockchain_network),
    INDEX idx_investor (investor_id),
    INDEX idx_verified (verified),
    INDEX idx_network (blockchain_network),
    FOREIGN KEY (investor_id) REFERENCES users(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: token_secondary_market
-- P2P trading mechanisms
CREATE TABLE IF NOT EXISTS token_secondary_market (
    market_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    token_id CHAR(36) NOT NULL,
    
    -- Market configuration
    market_type VARCHAR(20) NOT NULL, -- ORDER_BOOK, AMM, AUCTION, OTC
    trading_enabled BOOLEAN DEFAULT TRUE,
    
    -- Liquidity metrics
    total_volume_24h DECIMAL(30,8) DEFAULT 0,
    total_volume_7d DECIMAL(30,8) DEFAULT 0,
    total_volume_30d DECIMAL(30,8) DEFAULT 0,
    unique_traders_24h INT DEFAULT 0,
    
    -- Price discovery
    last_price DECIMAL(20,8),
    price_change_24h DECIMAL(10,4),
    high_24h DECIMAL(20,8),
    low_24h DECIMAL(20,8),
    vwap_24h DECIMAL(20,8), -- Volume Weighted Average Price
    
    -- Order book metrics (if applicable)
    bid_ask_spread DECIMAL(10,6),
    order_book_depth DECIMAL(30,8),
    
    -- Trading rules
    minimum_trade_size DECIMAL(30,18),
    maximum_trade_size DECIMAL(30,18),
    tick_size DECIMAL(20,8),
    
    -- Fee structure
    maker_fee_percentage DECIMAL(5,4) DEFAULT 0.1,
    taker_fee_percentage DECIMAL(5,4) DEFAULT 0.2,
    
    -- Market hours (null = 24/7)
    trading_hours JSON, -- {"monday": {"open": "09:00", "close": "17:00"}}
    
    -- Metadata
    market_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_token (token_id),
    INDEX idx_market_type (market_type),
    INDEX idx_volume (total_volume_24h),
    FOREIGN KEY (token_id) REFERENCES revenue_share_token(token_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: token_liquidity_pool
-- AMM pools for instant trading
CREATE TABLE IF NOT EXISTS token_liquidity_pool (
    pool_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    token_id CHAR(36) NOT NULL,
    
    -- Pool configuration
    pool_type VARCHAR(20) NOT NULL, -- UNISWAP_V2, UNISWAP_V3, BALANCER, CURVE, CUSTOM
    base_token VARCHAR(100) NOT NULL, -- Music token
    quote_token VARCHAR(100) NOT NULL, -- USDC, ETH, etc.
    
    -- Liquidity
    base_token_reserve DECIMAL(30,18) NOT NULL,
    quote_token_reserve DECIMAL(30,18) NOT NULL,
    total_liquidity_usd DECIMAL(30,8),
    
    -- Pool tokens
    lp_token_address VARCHAR(100),
    lp_token_supply DECIMAL(30,18),
    
    -- Pricing
    current_price DECIMAL(30,18), -- Quote per base
    price_impact_1_percent DECIMAL(10,6), -- Price impact for 1% of liquidity
    
    -- Volume and fees
    volume_24h DECIMAL(30,8) DEFAULT 0,
    fees_24h DECIMAL(30,8) DEFAULT 0,
    total_fees_earned DECIMAL(30,8) DEFAULT 0,
    
    -- Pool parameters
    fee_tier DECIMAL(5,4) DEFAULT 0.3, -- 0.3%
    slippage_tolerance DECIMAL(5,4) DEFAULT 1.0, -- 1%
    
    -- Incentives
    liquidity_mining_enabled BOOLEAN DEFAULT FALSE,
    reward_token_address VARCHAR(100),
    reward_rate_per_day DECIMAL(30,18),
    
    -- Status
    active BOOLEAN DEFAULT TRUE,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Metadata
    pool_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_token (token_id),
    INDEX idx_pool_type (pool_type),
    INDEX idx_liquidity (total_liquidity_usd),
    INDEX idx_volume (volume_24h),
    FOREIGN KEY (token_id) REFERENCES revenue_share_token(token_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- GOVERNANCE & TERMS
-- =============================================

-- Table: investment_agreement
-- Smart contract terms for investments
CREATE TABLE IF NOT EXISTS investment_agreement (
    agreement_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    investment_id CHAR(36) NOT NULL,
    
    -- Agreement details
    agreement_type VARCHAR(30) NOT NULL, -- SAFE, TOKEN_PURCHASE, REVENUE_SHARE, CONVERTIBLE_NOTE
    agreement_version VARCHAR(20) NOT NULL,
    
    -- Key terms
    investment_terms JSON NOT NULL, -- Complete terms structure
    revenue_share_terms JSON,
    conversion_terms JSON, -- For convertible instruments
    
    -- Rights and restrictions
    voting_rights BOOLEAN DEFAULT FALSE,
    transfer_restrictions JSON,
    right_of_first_refusal BOOLEAN DEFAULT FALSE,
    tag_along_rights BOOLEAN DEFAULT FALSE,
    
    -- Milestones and conditions
    performance_milestones JSON,
    vesting_conditions JSON,
    buyback_terms JSON,
    
    -- Legal
    governing_law VARCHAR(100),
    dispute_resolution VARCHAR(20), -- ARBITRATION, COURT, MEDIATION
    
    -- Signatures
    investor_signature VARCHAR(255),
    investor_signed_date TIMESTAMP,
    issuer_signature VARCHAR(255),
    issuer_signed_date TIMESTAMP,
    
    -- Smart contract
    contract_address VARCHAR(100),
    deployment_tx_hash VARCHAR(100),
    
    -- Status
    status VARCHAR(20) DEFAULT 'DRAFT', -- DRAFT, PENDING_SIGNATURE, EXECUTED, AMENDED, TERMINATED
    
    -- Metadata
    agreement_document_hash VARCHAR(255), -- IPFS hash
    amendments JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_investment (investment_id),
    INDEX idx_status (status),
    INDEX idx_agreement_type (agreement_type),
    FOREIGN KEY (investment_id) REFERENCES fan_investment(investment_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: investment_milestone
-- Funding release triggers
CREATE TABLE IF NOT EXISTS investment_milestone (
    milestone_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    offering_id CHAR(36) NOT NULL,
    
    -- Milestone details
    milestone_name VARCHAR(200) NOT NULL,
    milestone_description TEXT,
    milestone_order INT NOT NULL,
    
    -- Release conditions
    release_percentage DECIMAL(5,2) NOT NULL, -- % of funds to release
    release_amount DECIMAL(20,8),
    
    -- Triggers
    trigger_type VARCHAR(20) NOT NULL, -- DATE, STREAMS, REVENUE, DELIVERABLE, MANUAL
    trigger_value VARCHAR(255), -- Date, stream count, revenue amount, etc.
    trigger_parameters JSON,
    
    -- Verification
    requires_verification BOOLEAN DEFAULT TRUE,
    verification_method VARCHAR(20), -- AUTOMATIC, ORACLE, MANUAL, DAO_VOTE
    verifiers JSON, -- List of authorized verifiers
    
    -- Status
    status VARCHAR(20) DEFAULT 'PENDING', -- PENDING, ACHIEVED, VERIFIED, RELEASED, FAILED
    achieved_date TIMESTAMP,
    verified_date TIMESTAMP,
    released_date TIMESTAMP,
    
    -- Evidence
    evidence_required TEXT,
    evidence_submitted JSON,
    
    -- Metadata
    milestone_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_offering (offering_id),
    INDEX idx_status (status),
    INDEX idx_trigger_type (trigger_type),
    INDEX idx_order (milestone_order),
    FOREIGN KEY (offering_id) REFERENCES token_offering(offering_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: investor_voting
-- Token holder governance
CREATE TABLE IF NOT EXISTS investor_voting (
    vote_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    proposal_id CHAR(36) NOT NULL,
    investor_id CHAR(36) NOT NULL,
    
    -- Voting power
    tokens_held DECIMAL(30,18) NOT NULL,
    voting_power DECIMAL(30,18) NOT NULL, -- May differ due to quadratic voting, etc.
    
    -- Vote details
    vote_choice VARCHAR(10) NOT NULL, -- FOR, AGAINST, ABSTAIN
    vote_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    vote_tx_hash VARCHAR(100),
    
    -- Delegation
    delegated_from VARCHAR(100), -- Address if voting power was delegated
    delegation_tx_hash VARCHAR(100),
    
    -- Metadata
    vote_reason TEXT,
    vote_metadata JSON,
    
    UNIQUE KEY uk_proposal_investor (proposal_id, investor_id),
    INDEX idx_investor (investor_id),
    INDEX idx_vote_choice (vote_choice),
    INDEX idx_timestamp (vote_timestamp),
    FOREIGN KEY (investor_id) REFERENCES users(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: investment_performance
-- Analytics and reporting
CREATE TABLE IF NOT EXISTS investment_performance (
    performance_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    asset_id CHAR(36) NOT NULL,
    token_id CHAR(36),
    
    -- Performance period
    period_type VARCHAR(20) NOT NULL, -- DAILY, WEEKLY, MONTHLY, QUARTERLY, ANNUAL
    period_date DATE NOT NULL,
    
    -- Revenue metrics
    streaming_revenue DECIMAL(20,8) DEFAULT 0,
    sync_revenue DECIMAL(20,8) DEFAULT 0,
    total_revenue DECIMAL(20,8) NOT NULL,
    revenue_growth_rate DECIMAL(10,4),
    
    -- Investment metrics
    total_invested DECIMAL(30,8) DEFAULT 0,
    number_of_investors INT DEFAULT 0,
    average_investment DECIMAL(20,8),
    
    -- Token metrics
    token_price_open DECIMAL(20,8),
    token_price_close DECIMAL(20,8),
    token_price_high DECIMAL(20,8),
    token_price_low DECIMAL(20,8),
    price_change_percentage DECIMAL(10,4),
    
    -- Trading metrics
    trading_volume DECIMAL(30,8) DEFAULT 0,
    number_of_trades INT DEFAULT 0,
    unique_traders INT DEFAULT 0,
    
    -- Distribution metrics
    distributions_paid DECIMAL(30,8) DEFAULT 0,
    distribution_yield DECIMAL(10,4), -- Annual yield %
    
    -- Market sentiment
    sentiment_score DECIMAL(5,2), -- 0-100
    social_mentions INT DEFAULT 0,
    
    -- Benchmarking
    market_rank INT,
    percentile_rank DECIMAL(5,2),
    
    -- Metadata
    performance_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_asset_period (asset_id, period_type, period_date),
    INDEX idx_token (token_id),
    INDEX idx_period (period_date),
    INDEX idx_period_type (period_type),
    FOREIGN KEY (asset_id) REFERENCES music_assets(asset_id),
    FOREIGN KEY (token_id) REFERENCES revenue_share_token(token_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- ADVANCED FEATURES
-- =============================================

-- Table: token_bonding_curve
-- Dynamic pricing mechanisms
CREATE TABLE IF NOT EXISTS token_bonding_curve (
    curve_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    token_id CHAR(36) NOT NULL,
    
    -- Curve parameters
    curve_type VARCHAR(20) NOT NULL, -- LINEAR, POLYNOMIAL, EXPONENTIAL, SIGMOID, CUSTOM
    curve_formula TEXT NOT NULL,
    
    -- Price parameters
    initial_price DECIMAL(20,8) NOT NULL,
    current_price DECIMAL(20,8) NOT NULL,
    reserve_ratio DECIMAL(5,4), -- For Bancor-style curves
    
    -- Supply parameters
    current_supply DECIMAL(30,18) NOT NULL,
    max_supply DECIMAL(30,18),
    
    -- Curve bounds
    price_floor DECIMAL(20,8),
    price_ceiling DECIMAL(20,8),
    
    -- Reserve pool
    reserve_balance DECIMAL(30,8) NOT NULL,
    reserve_currency VARCHAR(10) NOT NULL,
    
    -- Fee parameters
    buy_fee_percentage DECIMAL(5,4) DEFAULT 0,
    sell_fee_percentage DECIMAL(5,4) DEFAULT 0,
    
    -- Status
    active BOOLEAN DEFAULT TRUE,
    activation_date TIMESTAMP,
    
    -- Metadata
    curve_parameters JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_token (token_id),
    INDEX idx_curve_type (curve_type),
    INDEX idx_active (active),
    FOREIGN KEY (token_id) REFERENCES revenue_share_token(token_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: revenue_forecast
-- AI-driven revenue projections
CREATE TABLE IF NOT EXISTS revenue_forecast (
    forecast_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    asset_id CHAR(36) NOT NULL,
    
    -- Forecast details
    forecast_date DATE NOT NULL,
    forecast_horizon_months INT NOT NULL,
    model_version VARCHAR(50) NOT NULL,
    
    -- Revenue projections (monthly)
    projected_revenues JSON NOT NULL, -- Array of monthly projections
    confidence_intervals JSON, -- Upper/lower bounds
    
    -- Growth metrics
    projected_growth_rate DECIMAL(10,4),
    breakeven_month INT,
    
    -- Model inputs
    historical_data_points INT,
    external_factors JSON, -- Genre trends, market conditions, etc.
    
    -- Accuracy metrics
    model_accuracy DECIMAL(5,2), -- Historical accuracy %
    r_squared DECIMAL(5,4),
    
    -- Scenario analysis
    best_case_revenue DECIMAL(20,8),
    base_case_revenue DECIMAL(20,8),
    worst_case_revenue DECIMAL(20,8),
    
    -- Metadata
    model_parameters JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_asset (asset_id),
    INDEX idx_forecast_date (forecast_date),
    FOREIGN KEY (asset_id) REFERENCES music_assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: investment_tier
-- Tiered benefits system
CREATE TABLE IF NOT EXISTS investment_tier (
    tier_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    offering_id CHAR(36) NOT NULL,
    
    -- Tier details
    tier_name VARCHAR(50) NOT NULL, -- BRONZE, SILVER, GOLD, PLATINUM, DIAMOND
    tier_level INT NOT NULL,
    minimum_investment DECIMAL(20,8) NOT NULL,
    maximum_investors INT,
    
    -- Benefits
    token_bonus_percentage DECIMAL(5,2) DEFAULT 0,
    early_access_days INT DEFAULT 0,
    
    -- Perks
    perks JSON NOT NULL, -- ["Meet & greet", "Signed merch", "Studio access"]
    
    -- Revenue share
    enhanced_revenue_share DECIMAL(5,2) DEFAULT 0, -- Additional %
    priority_distributions BOOLEAN DEFAULT FALSE,
    
    -- Governance
    voting_power_multiplier DECIMAL(5,2) DEFAULT 1.0,
    proposal_rights BOOLEAN DEFAULT FALSE,
    
    -- Access
    exclusive_content BOOLEAN DEFAULT FALSE,
    vip_events BOOLEAN DEFAULT FALSE,
    
    -- NFT benefits
    exclusive_nft_drop BOOLEAN DEFAULT FALSE,
    nft_rarity_boost DECIMAL(5,2) DEFAULT 0,
    
    -- Status
    available_slots INT,
    filled_slots INT DEFAULT 0,
    
    -- Metadata
    tier_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_offering (offering_id),
    INDEX idx_tier_level (tier_level),
    INDEX idx_minimum_investment (minimum_investment),
    FOREIGN KEY (offering_id) REFERENCES token_offering(offering_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: referral_program
-- Viral growth incentives
CREATE TABLE IF NOT EXISTS referral_program (
    referral_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    referrer_id CHAR(36) NOT NULL,
    referee_id CHAR(36) NOT NULL,
    offering_id CHAR(36),
    
    -- Referral details
    referral_code VARCHAR(20) NOT NULL,
    referral_link VARCHAR(500),
    
    -- Status
    referee_status VARCHAR(20) DEFAULT 'REGISTERED', -- REGISTERED, KYC_COMPLETE, INVESTED, ACTIVE
    investment_amount DECIMAL(20,8) DEFAULT 0,
    
    -- Rewards
    referrer_reward_percentage DECIMAL(5,2) DEFAULT 5.0,
    referee_bonus_percentage DECIMAL(5,2) DEFAULT 2.5,
    
    -- Payouts
    referrer_reward_earned DECIMAL(20,8) DEFAULT 0,
    referrer_reward_paid DECIMAL(20,8) DEFAULT 0,
    referee_bonus_earned DECIMAL(20,8) DEFAULT 0,
    
    -- Tracking
    click_count INT DEFAULT 0,
    conversion_rate DECIMAL(5,2),
    
    -- Dates
    referral_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    investment_date TIMESTAMP,
    
    -- Metadata
    utm_parameters JSON,
    referral_metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_referrer_referee (referrer_id, referee_id),
    INDEX idx_referral_code (referral_code),
    INDEX idx_offering (offering_id),
    INDEX idx_status (referee_status),
    FOREIGN KEY (referrer_id) REFERENCES users(user_id),
    FOREIGN KEY (referee_id) REFERENCES users(user_id),
    FOREIGN KEY (offering_id) REFERENCES token_offering(offering_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- VIEWS FOR ANALYTICS AND DASHBOARDS
-- =============================================

-- View: investor_portfolio_summary
CREATE OR REPLACE VIEW investor_portfolio_summary AS
SELECT 
    fi.investor_id,
    COUNT(DISTINCT fi.asset_id) as assets_invested,
    COUNT(DISTINCT fi.investment_id) as total_investments,
    SUM(fi.investment_amount_usd) as total_invested_usd,
    SUM(ir.current_value) as portfolio_value_usd,
    AVG(ir.roi_percentage) as average_roi,
    MAX(ir.roi_percentage) as best_performing_roi,
    SUM(ir.total_distributions) as total_distributions_received
FROM fan_investment fi
LEFT JOIN investment_return ir ON fi.investment_id = ir.investment_id
WHERE fi.status = 'CONFIRMED'
  AND ir.calculation_date = CURDATE()
GROUP BY fi.investor_id;

-- View: token_market_overview  
CREATE OR REPLACE VIEW token_market_overview AS
SELECT 
    rst.token_id,
    rst.token_symbol,
    rst.token_name,
    ma.asset_title,
    rst.current_price,
    rst.market_cap,
    tsm.total_volume_24h,
    tsm.price_change_24h,
    tlp.total_liquidity_usd,
    COUNT(DISTINCT fi.investor_id) as total_investors
FROM revenue_share_token rst
JOIN music_assets ma ON rst.asset_id = ma.asset_id
LEFT JOIN token_secondary_market tsm ON rst.token_id = tsm.token_id
LEFT JOIN token_liquidity_pool tlp ON rst.token_id = tlp.token_id
LEFT JOIN fan_investment fi ON rst.asset_id = fi.asset_id
WHERE rst.status = 'ACTIVE'
GROUP BY rst.token_id;

-- View: upcoming_distributions
CREATE OR REPLACE VIEW upcoming_distributions AS
SELECT 
    td.token_id,
    rst.token_symbol,
    td.period_end,
    td.revenue_amount,
    td.distribution_amount,
    td.amount_per_token,
    td.distribution_status,
    COUNT(DISTINCT fi.investor_id) as affected_investors
FROM token_dividend td
JOIN revenue_share_token rst ON td.token_id = rst.token_id
LEFT JOIN fan_investment fi ON rst.asset_id = fi.asset_id
WHERE td.distribution_status IN ('CALCULATING', 'READY')
  AND td.period_end >= CURDATE() - INTERVAL 30 DAY
GROUP BY td.dividend_id
ORDER BY td.period_end DESC;

-- =============================================
-- INDEXES FOR PERFORMANCE
-- =============================================

-- High-frequency query indexes
CREATE INDEX idx_investment_investor_date ON fan_investment(investor_id, investment_date);
CREATE INDEX idx_dividend_token_period ON token_dividend(token_id, period_start, period_end);
CREATE INDEX idx_return_investor_calc ON investment_return(investor_id, calculation_date);
CREATE INDEX idx_performance_asset_type_date ON investment_performance(asset_id, period_type, period_date);

-- =============================================
-- TRIGGERS FOR AUTOMATION
-- =============================================

DELIMITER //

-- Trigger: Update token price on trades
CREATE TRIGGER update_token_price_on_trade
AFTER INSERT ON token_secondary_market
FOR EACH ROW
BEGIN
    UPDATE revenue_share_token 
    SET current_price = NEW.last_price,
        updated_at = CURRENT_TIMESTAMP
    WHERE token_id = NEW.token_id;
END//

-- Trigger: Calculate investment returns
CREATE TRIGGER calculate_investment_return
AFTER UPDATE ON revenue_share_token
FOR EACH ROW
BEGIN
    IF NEW.current_price != OLD.current_price THEN
        INSERT INTO investment_return (investment_id, investor_id, calculation_date, initial_investment, current_value, unrealized_gain_loss, tokens_held, current_token_price)
        SELECT 
            fi.investment_id,
            fi.investor_id,
            CURDATE(),
            fi.investment_amount_usd,
            fi.tokens_purchased * NEW.current_price,
            (fi.tokens_purchased * NEW.current_price) - fi.investment_amount_usd,
            fi.tokens_purchased,
            NEW.current_price
        FROM fan_investment fi
        WHERE fi.asset_id = NEW.asset_id
          AND fi.status = 'CONFIRMED'
        ON DUPLICATE KEY UPDATE
            current_value = VALUES(current_value),
            unrealized_gain_loss = VALUES(unrealized_gain_loss),
            current_token_price = VALUES(current_token_price);
    END IF;
END//

DELIMITER ;

-- =====================================================
-- SECTION 12: REGISTRATION TABLES
-- =====================================================

-- Table: registration_batch
CREATE TABLE registration_batch (
    batch_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    batch_number VARCHAR(50) UNIQUE NOT NULL,
    batch_type VARCHAR(50) NOT NULL DEFAULT 'STANDARD', -- STANDARD, URGENT, CORRECTION, WITHDRAWAL
    society_id INT UNSIGNED NOT NULL,
    submission_format VARCHAR(20) NOT NULL DEFAULT 'CWR3.1', -- CWR3.1, CWR2.2, CUSTOM_API, MANUAL
    total_works INT UNSIGNED NOT NULL DEFAULT 0,
    processed_works INT UNSIGNED NOT NULL DEFAULT 0,
    successful_works INT UNSIGNED NOT NULL DEFAULT 0,
    failed_works INT UNSIGNED NOT NULL DEFAULT 0,
    batch_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, VALIDATING, QUEUED, TRANSMITTING, SENT, ACKNOWLEDGED, COMPLETED, FAILED
    priority_level INT NOT NULL DEFAULT 5, -- 1-10, 1 being highest
    submission_deadline DATETIME NULL,
    submitted_at DATETIME NULL,
    acknowledged_at DATETIME NULL,
    completed_at DATETIME NULL,
    cwr_file_path TEXT NULL,
    submission_file_hash VARCHAR(64) NULL,
    response_file_path TEXT NULL,
    retry_count INT NOT NULL DEFAULT 0,
    max_retries INT NOT NULL DEFAULT 3,
    next_retry_at DATETIME NULL,
    error_summary TEXT NULL,
    metadata JSON NULL, -- Society-specific metadata
    created_by BIGINT UNSIGNED NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_batch_society (society_id, batch_status),
    INDEX idx_batch_status_priority (batch_status, priority_level),
    INDEX idx_batch_deadline (submission_deadline),
    INDEX idx_batch_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: work_registration
CREATE TABLE work_registration (
    registration_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    batch_id BIGINT UNSIGNED NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    society_id INT UNSIGNED NOT NULL,
    registration_type VARCHAR(50) NOT NULL DEFAULT 'NEW', -- NEW, UPDATE, CORRECTION, WITHDRAWAL
    registration_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, SUBMITTED, ACKNOWLEDGED, REGISTERED, REJECTED, CONFLICT, WITHDRAWN
    society_work_code VARCHAR(50) NULL, -- Society's assigned work code
    iswc VARCHAR(15) NULL, -- International Standard Musical Work Code
    submission_reference VARCHAR(100) NULL,
    priority_flag BOOLEAN DEFAULT FALSE,
    validation_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, PASSED, FAILED, WARNING
    validation_errors JSON NULL,
    cwr_record_sequence INT NULL, -- Position in CWR file
    acknowledgment_code VARCHAR(50) NULL,
    acknowledgment_date DATE NULL,
    rejection_reason TEXT NULL,
    conflict_type VARCHAR(50) NULL, -- DUPLICATE, OWNERSHIP_DISPUTE, METADATA_MISMATCH
    conflict_resolution_status VARCHAR(50) NULL,
    registration_fee DECIMAL(10,2) NULL,
    fee_currency VARCHAR(3) NULL,
    metadata_snapshot JSON NULL, -- Work metadata at time of registration
    custom_fields JSON NULL, -- Society-specific fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_work_reg_batch (batch_id),
    INDEX idx_work_reg_work_society (work_id, society_id),
    INDEX idx_work_reg_status (registration_status),
    INDEX idx_work_reg_society_code (society_work_code),
    INDEX idx_work_reg_iswc (iswc),
    INDEX idx_work_reg_created (created_at),
    UNIQUE KEY uk_work_society_active (work_id, society_id, registration_status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: work_registration_history
CREATE TABLE work_registration_history (
    history_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    registration_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    society_id INT UNSIGNED NOT NULL,
    action_type VARCHAR(50) NOT NULL, -- CREATED, STATUS_CHANGE, METADATA_UPDATE, ACKNOWLEDGMENT, REJECTION, CONFLICT_DETECTED, RESOLVED
    previous_status VARCHAR(50) NULL,
    new_status VARCHAR(50) NULL,
    change_description TEXT NULL,
    changed_fields JSON NULL,
    actor_type VARCHAR(50) NOT NULL, -- SYSTEM, USER, SOCIETY_API, MANUAL_PROCESS
    actor_id BIGINT UNSIGNED NULL,
    ip_address VARCHAR(45) NULL,
    user_agent TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_reg_history_registration (registration_id),
    INDEX idx_reg_history_work (work_id),
    INDEX idx_reg_history_created (created_at),
    INDEX idx_reg_history_action (action_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: recording_registration
CREATE TABLE recording_registration (
    registration_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    batch_id BIGINT UNSIGNED NULL,
    recording_id BIGINT UNSIGNED NOT NULL,
    society_id INT UNSIGNED NOT NULL,
    registration_type VARCHAR(50) NOT NULL DEFAULT 'NEW',
    registration_status VARCHAR(50) NOT NULL DEFAULT 'PENDING',
    isrc VARCHAR(12) NULL, -- International Standard Recording Code
    society_recording_code VARCHAR(50) NULL,
    submission_reference VARCHAR(100) NULL,
    acknowledgment_code VARCHAR(50) NULL,
    acknowledgment_date DATE NULL,
    metadata_snapshot JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_recording_reg_batch (batch_id),
    INDEX idx_recording_reg_recording (recording_id),
    INDEX idx_recording_reg_isrc (isrc),
    INDEX idx_recording_reg_status (registration_status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: registration_response
CREATE TABLE registration_response (
    response_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    batch_id BIGINT UNSIGNED NOT NULL,
    society_id INT UNSIGNED NOT NULL,
    response_type VARCHAR(50) NOT NULL, -- ACKNOWLEDGMENT, REGISTRATION_COMPLETE, ERROR_REPORT, STATUS_UPDATE
    response_format VARCHAR(50) NOT NULL, -- CWR_ACK, JSON, XML, CSV, PDF
    response_file_path TEXT NULL,
    response_content LONGTEXT NULL, -- For smaller responses
    response_hash VARCHAR(64) NULL,
    received_at DATETIME NOT NULL,
    processed_at DATETIME NULL,
    processing_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, PROCESSING, COMPLETED, FAILED
    total_records INT NULL,
    accepted_records INT NULL,
    rejected_records INT NULL,
    warning_records INT NULL,
    processing_notes TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_response_batch (batch_id),
    INDEX idx_response_society (society_id),
    INDEX idx_response_received (received_at),
    INDEX idx_response_status (processing_status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: registration_error
CREATE TABLE registration_error (
    error_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    registration_id BIGINT UNSIGNED NULL,
    batch_id BIGINT UNSIGNED NULL,
    work_id BIGINT UNSIGNED NULL,
    society_id INT UNSIGNED NOT NULL,
    error_code VARCHAR(50) NOT NULL,
    error_type VARCHAR(50) NOT NULL, -- VALIDATION, DUPLICATE, FORMAT, NETWORK, AUTHENTICATION, BUSINESS_RULE
    error_severity VARCHAR(20) NOT NULL DEFAULT 'ERROR', -- WARNING, ERROR, CRITICAL
    error_message TEXT NOT NULL,
    error_details JSON NULL,
    field_name VARCHAR(100) NULL,
    field_value TEXT NULL,
    suggested_resolution TEXT NULL,
    cwr_line_number INT NULL,
    cwr_record_type VARCHAR(3) NULL,
    resolution_status VARCHAR(50) NOT NULL DEFAULT 'UNRESOLVED', -- UNRESOLVED, IN_PROGRESS, RESOLVED, IGNORED
    resolved_by BIGINT UNSIGNED NULL,
    resolved_at DATETIME NULL,
    resolution_notes TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_error_registration (registration_id),
    INDEX idx_error_batch (batch_id),
    INDEX idx_error_work (work_id),
    INDEX idx_error_society_type (society_id, error_type),
    INDEX idx_error_severity_status (error_severity, resolution_status),
    INDEX idx_error_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: registration_acknowledgment
CREATE TABLE registration_acknowledgment (
    acknowledgment_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    registration_id BIGINT UNSIGNED NOT NULL,
    batch_id BIGINT UNSIGNED NULL,
    society_id INT UNSIGNED NOT NULL,
    acknowledgment_type VARCHAR(50) NOT NULL, -- RECEIVED, VALIDATED, REGISTERED, UPDATED
    acknowledgment_code VARCHAR(100) NOT NULL,
    acknowledgment_date DATE NOT NULL,
    society_work_code VARCHAR(50) NULL,
    iswc_assigned VARCHAR(15) NULL,
    registration_date DATE NULL,
    effective_date DATE NULL,
    expiry_date DATE NULL,
    acknowledgment_details JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_ack_registration (registration_id),
    INDEX idx_ack_batch (batch_id),
    INDEX idx_ack_society_date (society_id, acknowledgment_date),
    INDEX idx_ack_code (acknowledgment_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: registration_conflict
-- Purpose: Handles duplicate and conflicting registrations
CREATE TABLE registration_conflict (
    conflict_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    registration_id BIGINT UNSIGNED NOT NULL,
    work_id BIGINT UNSIGNED NOT NULL,
    society_id INT UNSIGNED NOT NULL,
    conflict_type VARCHAR(50) NOT NULL, -- DUPLICATE_WORK, OWNERSHIP_DISPUTE, SHARE_MISMATCH, TITLE_VARIATION
    conflict_severity VARCHAR(20) NOT NULL DEFAULT 'MEDIUM', -- LOW, MEDIUM, HIGH, CRITICAL
    existing_registration_id BIGINT UNSIGNED NULL,
    existing_society_work_code VARCHAR(50) NULL,
    conflicting_fields JSON NOT NULL,
    our_values JSON NULL,
    their_values JSON NULL,
    detection_method VARCHAR(50) NOT NULL, -- AUTOMATED, SOCIETY_NOTIFICATION, MANUAL_REVIEW
    resolution_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, INVESTIGATING, RESOLVED, ESCALATED, ABANDONED
    resolution_method VARCHAR(50) NULL, -- ACCEPT_OURS, ACCEPT_THEIRS, MERGE, MANUAL_OVERRIDE
    resolution_details TEXT NULL,
    resolved_by BIGINT UNSIGNED NULL,
    resolved_at DATETIME NULL,
    escalation_level INT NOT NULL DEFAULT 0,
    last_escalation_at DATETIME NULL,
    notes TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_conflict_registration (registration_id),
    INDEX idx_conflict_work_society (work_id, society_id),
    INDEX idx_conflict_status_severity (resolution_status, conflict_severity),
    INDEX idx_conflict_type (conflict_type),
    INDEX idx_conflict_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: society_account
-- Purpose: Stores encrypted credentials and settings for each society
CREATE TABLE society_account (
    account_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    society_id INT UNSIGNED NOT NULL,
    account_type VARCHAR(50) NOT NULL DEFAULT 'PUBLISHER', -- PUBLISHER, WRITER, LABEL, ADMINISTRATOR
    account_name VARCHAR(200) NOT NULL,
    account_number VARCHAR(100) NULL,
    cae_ipi_number VARCHAR(20) NULL, -- CAE/IPI identifier
    username_encrypted VARBINARY(500) NULL,
    password_encrypted VARBINARY(500) NULL,
    api_key_encrypted VARBINARY(500) NULL,
    api_secret_encrypted VARBINARY(500) NULL,
    certificate_path TEXT NULL,
    certificate_password_encrypted VARBINARY(500) NULL,
    authentication_method VARCHAR(50) NOT NULL DEFAULT 'BASIC', -- BASIC, OAUTH2, CERTIFICATE, API_KEY
    oauth_token_encrypted VARBINARY(1000) NULL,
    oauth_refresh_token_encrypted VARBINARY(1000) NULL,
    oauth_expiry DATETIME NULL,
    submission_endpoint TEXT NULL,
    query_endpoint TEXT NULL,
    test_mode BOOLEAN DEFAULT TRUE,
    auto_submit BOOLEAN DEFAULT FALSE,
    submission_schedule VARCHAR(50) NULL, -- DAILY, WEEKLY, MONTHLY, MANUAL
    next_submission_date DATE NULL,
    last_submission_date DATE NULL,
    account_status VARCHAR(50) NOT NULL DEFAULT 'ACTIVE', -- ACTIVE, SUSPENDED, PENDING_VERIFICATION, INACTIVE
    verification_status VARCHAR(50) NULL,
    verification_date DATE NULL,
    settings JSON NULL, -- Society-specific settings
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_society_account (society_id, account_type),
    INDEX idx_account_status (account_status),
    INDEX idx_account_cae_ipi (cae_ipi_number),
    UNIQUE KEY uk_society_account_number (society_id, account_number)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: society_submission
-- Purpose: Tracks all submissions to societies
CREATE TABLE society_submission (
    submission_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    batch_id BIGINT UNSIGNED NOT NULL,
    society_id INT UNSIGNED NOT NULL,
    account_id INT UNSIGNED NOT NULL,
    submission_method VARCHAR(50) NOT NULL, -- API, SFTP, EMAIL, WEB_PORTAL, MANUAL
    submission_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, IN_PROGRESS, SENT, CONFIRMED, FAILED
    submission_url TEXT NULL,
    request_headers JSON NULL,
    request_body LONGTEXT NULL,
    response_code INT NULL,
    response_headers JSON NULL,
    response_body LONGTEXT NULL,
    file_name VARCHAR(255) NULL,
    file_size_bytes BIGINT NULL,
    transfer_started_at DATETIME NULL,
    transfer_completed_at DATETIME NULL,
    transfer_duration_seconds INT NULL,
    retry_count INT NOT NULL DEFAULT 0,
    error_message TEXT NULL,
    confirmation_id VARCHAR(200) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_submission_batch (batch_id),
    INDEX idx_submission_society (society_id),
    INDEX idx_submission_status (submission_status),
    INDEX idx_submission_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: eco_registration
-- Purpose: Tracks US Copyright Office registrations (manual process)
CREATE TABLE eco_registration (
    eco_registration_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    work_id BIGINT UNSIGNED NULL,
    recording_id BIGINT UNSIGNED NULL,
    registration_type VARCHAR(10) NOT NULL, -- PA, SR, SE, TX, VA
    registration_status VARCHAR(50) NOT NULL DEFAULT 'PREPARING', -- PREPARING, READY_TO_SUBMIT, SUBMITTED, EXAMINING, REGISTERED, REJECTED, WITHDRAWN
    case_number VARCHAR(50) NULL, -- eCO case number
    service_request_number VARCHAR(50) NULL,
    registration_number VARCHAR(50) NULL, -- Final registration number
    effective_date DATE NULL,
    title_of_work VARCHAR(500) NOT NULL,
    alternative_titles JSON NULL,
    nature_of_work VARCHAR(200) NOT NULL DEFAULT 'Music', -- Music, Sound Recording, etc.
    year_of_completion YEAR NOT NULL,
    date_of_first_publication DATE NULL,
    nation_of_first_publication VARCHAR(100) NULL,
    authors JSON NOT NULL, -- Array of author objects
    copyright_claimants JSON NOT NULL, -- Array of claimant objects
    rights_and_permissions_contact JSON NULL,
    correspondent_info JSON NOT NULL,
    preexisting_material TEXT NULL,
    material_excluded TEXT NULL,
    new_material_included TEXT NULL,
    deposit_copy_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, UPLOADED, MAILED, RECEIVED
    deposit_copy_method VARCHAR(50) NULL, -- ELECTRONIC, PHYSICAL_MAIL
    deposit_tracking_number VARCHAR(100) NULL,
    application_fee DECIMAL(10,2) NULL,
    fee_payment_method VARCHAR(50) NULL,
    fee_payment_date DATE NULL,
    fee_payment_reference VARCHAR(100) NULL,
    examiner_name VARCHAR(200) NULL,
    examiner_notes TEXT NULL,
    user_notes TEXT NULL,
    priority_flag BOOLEAN DEFAULT FALSE,
    submission_deadline DATE NULL,
    prepared_by BIGINT UNSIGNED NULL,
    submitted_by BIGINT UNSIGNED NULL,
    submitted_at DATETIME NULL,
    last_status_check DATETIME NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_eco_work (work_id),
    INDEX idx_eco_recording (recording_id),
    INDEX idx_eco_status (registration_status),
    INDEX idx_eco_case (case_number),
    INDEX idx_eco_registration (registration_number),
    INDEX idx_eco_deadline (submission_deadline),
    INDEX idx_eco_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: eco_submission
-- Purpose: Tracks each submission attempt to copyright.gov
CREATE TABLE eco_submission (
    submission_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    eco_registration_id BIGINT UNSIGNED NOT NULL,
    submission_type VARCHAR(50) NOT NULL, -- INITIAL, CORRECTION, SUPPLEMENTARY, RENEWAL
    submission_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, IN_PROGRESS, COMPLETED, FAILED
    submission_method VARCHAR(50) NOT NULL DEFAULT 'MANUAL', -- MANUAL, AUTOMATED_FUTURE
    eco_system_url TEXT NULL,
    browser_used VARCHAR(100) NULL,
    session_start DATETIME NULL,
    session_end DATETIME NULL,
    form_data JSON NULL, -- All form fields as submitted
    confirmation_screenshot_path TEXT NULL,
    confirmation_text TEXT NULL,
    error_messages JSON NULL,
    submitted_by BIGINT UNSIGNED NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_eco_submission_registration (eco_registration_id),
    INDEX idx_eco_submission_status (submission_status),
    INDEX idx_eco_submission_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: manual_registration_queue
-- Purpose: Items requiring human review before registration
CREATE TABLE manual_registration_queue (
    queue_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    work_id BIGINT UNSIGNED NULL,
    registration_id BIGINT UNSIGNED NULL,
    society_id INT UNSIGNED NULL,
    queue_reason VARCHAR(100) NOT NULL, -- MISSING_DATA, CONFLICT, SPECIAL_HANDLING, HIGH_VALUE, VERIFICATION_REQUIRED
    queue_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, IN_REVIEW, APPROVED, REJECTED, ON_HOLD
    priority_level INT NOT NULL DEFAULT 5,
    review_deadline DATETIME NULL,
    assigned_to BIGINT UNSIGNED NULL,
    assigned_at DATETIME NULL,
    review_notes TEXT NULL,
    required_actions JSON NULL,
    completed_actions JSON NULL,
    resolution TEXT NULL,
    reviewed_by BIGINT UNSIGNED NULL,
    reviewed_at DATETIME NULL,
    time_in_queue_hours DECIMAL(10,2) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_queue_status_priority (queue_status, priority_level),
    INDEX idx_queue_assigned (assigned_to, queue_status),
    INDEX idx_queue_deadline (review_deadline),
    INDEX idx_queue_work (work_id),
    INDEX idx_queue_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: registration_validation
-- Purpose: Business rules engine for registration validation
CREATE TABLE registration_validation (
    validation_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    rule_name VARCHAR(100) NOT NULL,
    rule_category VARCHAR(50) NOT NULL, -- DATA_INTEGRITY, BUSINESS_LOGIC, SOCIETY_SPECIFIC, COMPLIANCE
    society_id INT UNSIGNED NULL, -- NULL for global rules
    rule_status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE', -- ACTIVE, INACTIVE, TESTING
    rule_severity VARCHAR(20) NOT NULL DEFAULT 'ERROR', -- WARNING, ERROR, CRITICAL
    rule_description TEXT NOT NULL,
    validation_query TEXT NULL, -- SQL query for validation
    validation_regex VARCHAR(500) NULL,
    validation_function VARCHAR(100) NULL, -- Function name to call
    field_mappings JSON NULL, -- Fields to validate
    error_message_template TEXT NOT NULL,
    auto_fix_available BOOLEAN DEFAULT FALSE,
    auto_fix_query TEXT NULL,
    bypass_roles JSON NULL, -- Roles that can bypass this rule
    effective_date DATE NOT NULL,
    expiry_date DATE NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_validation_category_status (rule_category, rule_status),
    INDEX idx_validation_society (society_id),
    INDEX idx_validation_effective (effective_date, expiry_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Create the critical eCO Registration View
-- This view provides ALL fields needed for manual copyright.gov registration
CREATE VIEW eco_registration_view AS
SELECT 
    er.eco_registration_id,
    er.registration_type,
    er.registration_status,
    er.case_number,
    er.registration_number,
    
    -- Basic Work Information
    er.title_of_work AS `Title of Work`,
    er.alternative_titles AS `Alternative Titles`,
    er.nature_of_work AS `Nature of Work`,
    er.year_of_completion AS `Year of Completion`,
    
    -- Publication Information
    er.date_of_first_publication AS `Date of First Publication`,
    er.nation_of_first_publication AS `Nation of First Publication`,
    CASE 
        WHEN er.date_of_first_publication IS NULL THEN 'No'
        ELSE 'Yes'
    END AS `Has Been Published`,
    
    -- Authors (parsed from JSON)
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[0].name')) AS `Author 1 Name`,
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[0].citizenship')) AS `Author 1 Citizenship`,
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[0].domicile')) AS `Author 1 Domicile`,
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[0].year_of_birth')) AS `Author 1 Year of Birth`,
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[0].year_of_death')) AS `Author 1 Year of Death`,
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[0].work_for_hire')) AS `Author 1 Work for Hire`,
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[0].pseudonym')) AS `Author 1 Pseudonym`,
    
    -- Additional authors can be added similarly
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[1].name')) AS `Author 2 Name`,
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[1].citizenship')) AS `Author 2 Citizenship`,
    JSON_UNQUOTE(JSON_EXTRACT(er.authors, '$[1].domicile')) AS `Author 2 Domicile`,
    
    -- Copyright Claimants (parsed from JSON)
    JSON_UNQUOTE(JSON_EXTRACT(er.copyright_claimants, '$[0].name')) AS `Claimant 1 Name`,
    JSON_UNQUOTE(JSON_EXTRACT(er.copyright_claimants, '$[0].address')) AS `Claimant 1 Address`,
    JSON_UNQUOTE(JSON_EXTRACT(er.copyright_claimants, '$[0].transfer_statement')) AS `Claimant 1 Transfer Statement`,
    
    JSON_UNQUOTE(JSON_EXTRACT(er.copyright_claimants, '$[1].name')) AS `Claimant 2 Name`,
    JSON_UNQUOTE(JSON_EXTRACT(er.copyright_claimants, '$[1].address')) AS `Claimant 2 Address`,
    
    -- Rights and Permissions
    JSON_UNQUOTE(JSON_EXTRACT(er.rights_and_permissions_contact, '$.name')) AS `Rights Contact Name`,
    JSON_UNQUOTE(JSON_EXTRACT(er.rights_and_permissions_contact, '$.email')) AS `Rights Contact Email`,
    JSON_UNQUOTE(JSON_EXTRACT(er.rights_and_permissions_contact, '$.phone')) AS `Rights Contact Phone`,
    JSON_UNQUOTE(JSON_EXTRACT(er.rights_and_permissions_contact, '$.address')) AS `Rights Contact Address`,
    
    -- Correspondent Information
    JSON_UNQUOTE(JSON_EXTRACT(er.correspondent_info, '$.name')) AS `Correspondent Name`,
    JSON_UNQUOTE(JSON_EXTRACT(er.correspondent_info, '$.email')) AS `Correspondent Email`,
    JSON_UNQUOTE(JSON_EXTRACT(er.correspondent_info, '$.phone')) AS `Correspondent Phone`,
    JSON_UNQUOTE(JSON_EXTRACT(er.correspondent_info, '$.address')) AS `Correspondent Address`,
    
    -- Derivative Work Information
    er.preexisting_material AS `Preexisting Material`,
    er.material_excluded AS `Material Excluded`,
    er.new_material_included AS `New Material Included`,
    
    -- Deposit Information
    er.deposit_copy_status AS `Deposit Copy Status`,
    er.deposit_copy_method AS `Deposit Method`,
    er.deposit_tracking_number AS `Deposit Tracking Number`,
    
    -- Fee Information
    er.application_fee AS `Application Fee`,
    er.fee_payment_method AS `Payment Method`,
    er.fee_payment_date AS `Payment Date`,
    er.fee_payment_reference AS `Payment Reference`,
    
    -- Work Details (from linked tables)
    w.title AS `Work Title from Catalog`,
    w.duration_seconds AS `Duration (seconds)`,
    w.genre AS `Genre`,
    w.lyrics_language AS `Lyrics Language`,
    
    -- Sound Recording Details (if applicable)
    r.isrc AS `ISRC`,
    r.recording_date AS `Recording Date`,
    r.release_date AS `Release Date`,
    
    -- Administrative
    er.submission_deadline AS `Submission Deadline`,
    er.priority_flag AS `Priority Registration`,
    er.user_notes AS `Internal Notes`,
    er.submitted_at AS `Date Submitted to eCO`,
    er.created_at AS `Date Created in System`,
    
    -- User Information
    u1.display_name AS `Prepared By`,
    u2.display_name AS `Submitted By`
    
FROM eco_registration er
LEFT JOIN works w ON er.work_id = w.work_id
LEFT JOIN recordings r ON er.recording_id = r.recording_id
LEFT JOIN users u1 ON er.prepared_by = u1.user_id
LEFT JOIN users u2 ON er.submitted_by = u2.user_id
WHERE er.registration_status IN ('PREPARING', 'READY_TO_SUBMIT')
ORDER BY er.priority_flag DESC, er.submission_deadline ASC, er.created_at ASC;

-- Create summary view for registration dashboard
CREATE VIEW registration_summary_view AS
SELECT 
    s.society_code,
    s.society_name,
    s.territory,
    COUNT(DISTINCT wr.work_id) as total_works_registered,
    COUNT(DISTINCT CASE WHEN wr.registration_status = 'REGISTERED' THEN wr.work_id END) as successfully_registered,
    COUNT(DISTINCT CASE WHEN wr.registration_status = 'PENDING' THEN wr.work_id END) as pending_registration,
    COUNT(DISTINCT CASE WHEN wr.registration_status = 'REJECTED' THEN wr.work_id END) as rejected_registration,
    COUNT(DISTINCT rc.conflict_id) as active_conflicts,
    MAX(wr.created_at) as last_registration_date
FROM societies s
LEFT JOIN work_registration wr ON s.society_id = wr.society_id
LEFT JOIN registration_conflict rc ON wr.registration_id = rc.registration_id 
    AND rc.resolution_status NOT IN ('RESOLVED', 'ABANDONED')
GROUP BY s.society_id, s.society_code, s.society_name, s.territory;

-- Trigger: Update batch counts when work registration status changes
DELIMITER //

CREATE TRIGGER update_batch_counts_on_registration_change
AFTER UPDATE ON work_registration
FOR EACH ROW
BEGIN
    IF OLD.registration_status != NEW.registration_status AND NEW.batch_id IS NOT NULL THEN
        UPDATE registration_batch
        SET 
            processed_works = (
                SELECT COUNT(*) FROM work_registration 
                WHERE batch_id = NEW.batch_id 
                AND registration_status NOT IN ('PENDING', 'VALIDATING')
            ),
            successful_works = (
                SELECT COUNT(*) FROM work_registration 
                WHERE batch_id = NEW.batch_id 
                AND registration_status = 'REGISTERED'
            ),
            failed_works = (
                SELECT COUNT(*) FROM work_registration 
                WHERE batch_id = NEW.batch_id 
                AND registration_status IN ('REJECTED', 'FAILED')
            )
        WHERE batch_id = NEW.batch_id;
        
        -- Update batch status if all works are processed
        UPDATE registration_batch
        SET batch_status = CASE
            WHEN processed_works = total_works THEN 'COMPLETED'
            ELSE batch_status
        END
        WHERE batch_id = NEW.batch_id;
    END IF;
END//

-- Trigger: Create history entry on registration status change
CREATE TRIGGER create_registration_history
AFTER UPDATE ON work_registration
FOR EACH ROW
BEGIN
    IF OLD.registration_status != NEW.registration_status 
       OR OLD.society_work_code != NEW.society_work_code 
       OR OLD.iswc != NEW.iswc THEN
        
        INSERT INTO work_registration_history (
            registration_id, work_id, society_id, action_type,
            previous_status, new_status, change_description,
            changed_fields, actor_type, actor_id
        ) VALUES (
            NEW.registration_id,
            NEW.work_id,
            NEW.society_id,
            CASE 
                WHEN OLD.registration_status != NEW.registration_status THEN 'STATUS_CHANGE'
                WHEN OLD.society_work_code != NEW.society_work_code THEN 'METADATA_UPDATE'
                WHEN OLD.iswc != NEW.iswc THEN 'METADATA_UPDATE'
            END,
            OLD.registration_status,
            NEW.registration_status,
            CONCAT('Registration updated: ', 
                IF(OLD.registration_status != NEW.registration_status, 
                   CONCAT('Status changed from ', OLD.registration_status, ' to ', NEW.registration_status), ''),
                IF(OLD.society_work_code != NEW.society_work_code, 
                   CONCAT(' Society code assigned: ', NEW.society_work_code), ''),
                IF(OLD.iswc != NEW.iswc, 
                   CONCAT(' ISWC assigned: ', NEW.iswc), '')
            ),
            JSON_OBJECT(
                'registration_status', JSON_OBJECT('old', OLD.registration_status, 'new', NEW.registration_status),
                'society_work_code', JSON_OBJECT('old', OLD.society_work_code, 'new', NEW.society_work_code),
                'iswc', JSON_OBJECT('old', OLD.iswc, 'new', NEW.iswc)
            ),
            'SYSTEM',
            NULL
        );
    END IF;
END//

-- Trigger: Validate eCO registration data before submission
CREATE TRIGGER validate_eco_registration_before_submit
BEFORE UPDATE ON eco_registration
FOR EACH ROW
BEGIN
    IF NEW.registration_status = 'READY_TO_SUBMIT' AND OLD.registration_status = 'PREPARING' THEN
        -- Validate required fields
        IF NEW.title_of_work IS NULL OR NEW.title_of_work = '' THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Title of work is required for eCO submission';
        END IF;
        
        IF NEW.year_of_completion IS NULL THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Year of completion is required for eCO submission';
        END IF;
        
        IF JSON_LENGTH(NEW.authors) = 0 THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'At least one author is required for eCO submission';
        END IF;
        
        IF JSON_LENGTH(NEW.copyright_claimants) = 0 THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'At least one copyright claimant is required for eCO submission';
        END IF;
        
        IF NEW.correspondent_info IS NULL OR JSON_LENGTH(NEW.correspondent_info) = 0 THEN
            SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Correspondent information is required for eCO submission';
        END IF;
    END IF;
END//

DELIMITER ;

-- Create indexes for foreign key relationships
ALTER TABLE registration_batch
ADD CONSTRAINT fk_batch_society FOREIGN KEY (society_id) 
REFERENCES societies(society_id) ON DELETE RESTRICT;

ALTER TABLE work_registration
ADD CONSTRAINT fk_work_reg_batch FOREIGN KEY (batch_id) 
REFERENCES registration_batch(batch_id) ON DELETE SET NULL;

ALTER TABLE registration_response
ADD CONSTRAINT fk_response_batch FOREIGN KEY (batch_id) 
REFERENCES registration_batch(batch_id) ON DELETE CASCADE;

ALTER TABLE society_account
ADD CONSTRAINT fk_account_society FOREIGN KEY (society_id) 
REFERENCES societies(society_id) ON DELETE CASCADE;

-- Stored Procedure: Submit batch to society
DELIMITER //

CREATE PROCEDURE submit_registration_batch(
    IN p_batch_id BIGINT,
    IN p_user_id BIGINT
)
BEGIN
    DECLARE v_society_id INT;
    DECLARE v_total_works INT;
    DECLARE v_validation_errors INT;
    
    -- Get batch details
    SELECT society_id, total_works
    INTO v_society_id, v_total_works
    FROM registration_batch
    WHERE batch_id = p_batch_id;
    
    -- Check for validation errors
    SELECT COUNT(DISTINCT wr.registration_id)
    INTO v_validation_errors
    FROM work_registration wr
    WHERE wr.batch_id = p_batch_id
    AND wr.validation_status = 'FAILED';
    
    IF v_validation_errors > 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Cannot submit batch with validation errors';
    END IF;
    
    -- Update batch status
    UPDATE registration_batch
    SET 
        batch_status = 'QUEUED',
        submitted_at = NOW()
    WHERE batch_id = p_batch_id;
    
    -- Update all work registrations
    UPDATE work_registration
    SET 
        registration_status = 'SUBMITTED',
        updated_at = NOW()
    WHERE batch_id = p_batch_id
    AND registration_status = 'PENDING';
    
    -- Log the submission
    INSERT INTO society_submission (
        batch_id, society_id, account_id, submission_method,
        submission_status
    )
    SELECT 
        p_batch_id, v_society_id, account_id, 'API', 'PENDING'
    FROM society_account
    WHERE society_id = v_society_id
    AND account_status = 'ACTIVE'
    LIMIT 1;
    
END//

-- Stored Procedure: Process registration acknowledgment
CREATE PROCEDURE process_registration_acknowledgment(
    IN p_batch_id BIGINT,
    IN p_acknowledgment_data JSON
)
BEGIN
    DECLARE v_work_index INT DEFAULT 0;
    DECLARE v_work_count INT;
    DECLARE v_registration_id BIGINT;
    DECLARE v_ack_code VARCHAR(100);
    DECLARE v_society_work_code VARCHAR(50);
    DECLARE v_status VARCHAR(50);
    
    -- Get count of acknowledgments
    SET v_work_count = JSON_LENGTH(p_acknowledgment_data);
    
    -- Process each acknowledgment
    WHILE v_work_index < v_work_count DO
        SET v_registration_id = JSON_UNQUOTE(
            JSON_EXTRACT(p_acknowledgment_data, 
            CONCAT('$[', v_work_index, '].registration_id'))
        );
        SET v_ack_code = JSON_UNQUOTE(
            JSON_EXTRACT(p_acknowledgment_data, 
            CONCAT('$[', v_work_index, '].acknowledgment_code'))
        );
        SET v_society_work_code = JSON_UNQUOTE(
            JSON_EXTRACT(p_acknowledgment_data, 
            CONCAT('$[', v_work_index, '].society_work_code'))
        );
        SET v_status = JSON_UNQUOTE(
            JSON_EXTRACT(p_acknowledgment_data, 
            CONCAT('$[', v_work_index, '].status'))
        );
        
        -- Update work registration
        UPDATE work_registration
        SET 
            registration_status = v_status,
            society_work_code = v_society_work_code,
            acknowledgment_code = v_ack_code,
            acknowledgment_date = CURDATE()
        WHERE registration_id = v_registration_id;
        
        -- Insert acknowledgment record
        INSERT INTO registration_acknowledgment (
            registration_id, batch_id, society_id,
            acknowledgment_type, acknowledgment_code,
            acknowledgment_date, society_work_code
        )
        SELECT 
            v_registration_id, p_batch_id, society_id,
            'REGISTERED', v_ack_code, CURDATE(), v_society_work_code
        FROM work_registration
        WHERE registration_id = v_registration_id;
        
        SET v_work_index = v_work_index + 1;
    END WHILE;
    
    -- Update batch status
    UPDATE registration_batch
    SET 
        batch_status = 'ACKNOWLEDGED',
        acknowledged_at = NOW()
    WHERE batch_id = p_batch_id;
    
END//

DELIMITER ;

-- Grant permissions (adjust based on your user roles)
-- GRANT SELECT, INSERT, UPDATE ON astro_registration.* TO 'astro_app'@'%';
-- GRANT SELECT ON astro_registration.eco_registration_view TO 'astro_readonly'@'%';
-- GRANT EXECUTE ON PROCEDURE astro_registration.submit_registration_batch TO 'astro_app'@'%';
-- GRANT EXECUTE ON PROCEDURE astro_registration.process_registration_acknowledgment TO 'astro_app'@'%';

-- Final check: Verify all tables created
SELECT 
    'Section 12: Registration Tables' as section,
    COUNT(*) as tables_created,
    GROUP_CONCAT(table_name ORDER BY table_name SEPARATOR ', ') as table_list
FROM information_schema.tables 
WHERE table_schema = DATABASE()
AND table_name IN (
    'registration_batch', 'work_registration', 'work_registration_history',
    'recording_registration', 'registration_response', 'registration_error',
    'registration_acknowledgment', 'registration_conflict', 'society_account',
    'society_submission', 'eco_registration', 'eco_submission',
    'manual_registration_queue', 'registration_validation'
);

-- =====================================================
-- Section 13: Society-Specific Tables
-- =====================================================

-- =====================================================
-- ASCAP (American Society of Composers, Authors and Publishers)
-- =====================================================

-- ASCAP Member Profiles
CREATE TABLE IF NOT EXISTS ascap_member (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NOT NULL,
    member_number VARCHAR(50) NOT NULL UNIQUE,
    cae_number VARCHAR(20) COMMENT 'CAE/IPI Number',
    member_type VARCHAR(20) NOT NULL DEFAULT 'WRITER' COMMENT 'WRITER, PUBLISHER',
    membership_date DATE,
    territory VARCHAR(2) DEFAULT 'US',
    tax_id_encrypted VARBINARY(255) COMMENT 'AES-256 encrypted SSN/EIN',
    bank_account_encrypted VARBINARY(500) COMMENT 'AES-256 encrypted banking info',
    payment_method VARCHAR(20) DEFAULT 'ACH' COMMENT 'ACH, WIRE, CHECK',
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    api_credentials_encrypted VARBINARY(500) COMMENT 'Encrypted API credentials',
    last_sync_date DATETIME,
    metadata JSON COMMENT 'Additional ASCAP-specific data',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_ascap_user (user_id),
    INDEX idx_ascap_member_number (member_number),
    INDEX idx_ascap_cae (cae_number),
    INDEX idx_ascap_status (status),
    INDEX idx_ascap_deleted (is_deleted),
    FULLTEXT idx_ascap_member_search (member_number, cae_number)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ASCAP Work Registrations
CREATE TABLE IF NOT EXISTS ascap_work (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    work_id BIGINT UNSIGNED NOT NULL,
    ascap_member_id BIGINT UNSIGNED NOT NULL,
    title_code VARCHAR(50) UNIQUE,
    work_number VARCHAR(50),
    registration_type VARCHAR(20) DEFAULT 'ORIGINAL' COMMENT 'ORIGINAL, ARRANGEMENT, TRANSLATION',
    genre_code VARCHAR(10),
    performance_type VARCHAR(50) COMMENT 'FEATURE, BACKGROUND, THEME',
    surveyed_flag TINYINT(1) DEFAULT 0,
    live_performance_flag TINYINT(1) DEFAULT 0,
    classical_flag TINYINT(1) DEFAULT 0,
    jingle_flag TINYINT(1) DEFAULT 0,
    registration_date DATE,
    registration_batch_id BIGINT UNSIGNED,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    rejection_reason TEXT,
    metadata JSON COMMENT 'Additional ASCAP-specific fields',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_ascap_work_id (work_id),
    INDEX idx_ascap_work_member (ascap_member_id),
    INDEX idx_ascap_work_title_code (title_code),
    INDEX idx_ascap_work_number (work_number),
    INDEX idx_ascap_work_status (status),
    INDEX idx_ascap_work_batch (registration_batch_id),
    INDEX idx_ascap_work_deleted (is_deleted),
    FOREIGN KEY (work_id) REFERENCES works(id),
    FOREIGN KEY (ascap_member_id) REFERENCES ascap_member(id),
    FOREIGN KEY (registration_batch_id) REFERENCES registration_batch(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- BMI (Broadcast Music, Inc.)
-- =====================================================

-- BMI Member Accounts
CREATE TABLE IF NOT EXISTS bmi_member (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NOT NULL,
    account_number VARCHAR(50) NOT NULL UNIQUE,
    cae_number VARCHAR(20),
    member_type VARCHAR(20) NOT NULL DEFAULT 'WRITER' COMMENT 'WRITER, PUBLISHER',
    affiliate_date DATE,
    territory VARCHAR(2) DEFAULT 'US',
    tax_id_encrypted VARBINARY(255),
    bank_account_encrypted VARBINARY(500),
    payment_threshold DECIMAL(10,2) DEFAULT 25.00,
    live_performance_eligible TINYINT(1) DEFAULT 1,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    api_key_encrypted VARBINARY(500),
    last_sync_date DATETIME,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_bmi_user (user_id),
    INDEX idx_bmi_account (account_number),
    INDEX idx_bmi_cae (cae_number),
    INDEX idx_bmi_status (status),
    INDEX idx_bmi_deleted (is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- BMI Work Registrations
CREATE TABLE IF NOT EXISTS bmi_work (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    work_id BIGINT UNSIGNED NOT NULL,
    bmi_member_id BIGINT UNSIGNED NOT NULL,
    work_number VARCHAR(50) UNIQUE,
    catalog_number VARCHAR(50),
    registration_type VARCHAR(20) DEFAULT 'ORIGINAL',
    genre_code VARCHAR(10),
    work_type VARCHAR(50) COMMENT 'SONG, INSTRUMENTAL, JINGLE',
    live_performance_work TINYINT(1) DEFAULT 0,
    registration_date DATE,
    registration_batch_id BIGINT UNSIGNED,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    rejection_code VARCHAR(20),
    rejection_reason TEXT,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_bmi_work_id (work_id),
    INDEX idx_bmi_work_member (bmi_member_id),
    INDEX idx_bmi_work_number (work_number),
    INDEX idx_bmi_work_catalog (catalog_number),
    INDEX idx_bmi_work_status (status),
    INDEX idx_bmi_work_batch (registration_batch_id),
    INDEX idx_bmi_work_deleted (is_deleted),
    FOREIGN KEY (work_id) REFERENCES works(id),
    FOREIGN KEY (bmi_member_id) REFERENCES bmi_member(id),
    FOREIGN KEY (registration_batch_id) REFERENCES registration_batch(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- SESAC
-- =====================================================

-- SESAC Affiliate Data
CREATE TABLE IF NOT EXISTS sesac_affiliate (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NOT NULL,
    affiliate_code VARCHAR(50) NOT NULL UNIQUE,
    cae_number VARCHAR(20),
    affiliate_type VARCHAR(20) NOT NULL DEFAULT 'WRITER',
    territory VARCHAR(2) DEFAULT 'US',
    tax_id_encrypted VARBINARY(255),
    bank_account_encrypted VARBINARY(500),
    contract_date DATE,
    contract_term_years INT DEFAULT 3,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    api_credentials_encrypted VARBINARY(500),
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_sesac_user (user_id),
    INDEX idx_sesac_affiliate_code (affiliate_code),
    INDEX idx_sesac_status (status),
    INDEX idx_sesac_deleted (is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- SoundExchange
-- =====================================================

-- SoundExchange Registrations (Digital Performance Rights)
CREATE TABLE IF NOT EXISTS soundexchange_registration (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    recording_id BIGINT UNSIGNED NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    member_code VARCHAR(50),
    isrc VARCHAR(12) NOT NULL,
    featured_artist_name VARCHAR(255) NOT NULL,
    sound_recording_title VARCHAR(500) NOT NULL,
    album_title VARCHAR(500),
    label_name VARCHAR(255),
    release_date DATE,
    p_line VARCHAR(255) COMMENT 'Phonographic copyright',
    registration_type VARCHAR(20) DEFAULT 'FEATURED' COMMENT 'FEATURED, NON-FEATURED',
    performer_list JSON COMMENT 'Array of performer details',
    registration_date DATE,
    registration_batch_id BIGINT UNSIGNED,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_sx_recording (recording_id),
    INDEX idx_sx_user (user_id),
    INDEX idx_sx_isrc (isrc),
    INDEX idx_sx_status (status),
    INDEX idx_sx_batch (registration_batch_id),
    INDEX idx_sx_deleted (is_deleted),
    FOREIGN KEY (recording_id) REFERENCES recordings(id),
    FOREIGN KEY (registration_batch_id) REFERENCES registration_batch(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- MLC (Mechanical Licensing Collective)
-- =====================================================

-- MLC Member Profiles
CREATE TABLE IF NOT EXISTS mlc_member (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NOT NULL,
    member_id VARCHAR(50) NOT NULL UNIQUE,
    member_type VARCHAR(20) NOT NULL DEFAULT 'PUBLISHER' COMMENT 'PUBLISHER, ADMINISTRATOR',
    ipi_number VARCHAR(20),
    tax_id_encrypted VARBINARY(255),
    bank_account_encrypted VARBINARY(500),
    blanket_license_flag TINYINT(1) DEFAULT 1,
    payment_threshold DECIMAL(10,2) DEFAULT 100.00,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    api_token_encrypted VARBINARY(500),
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_mlc_user (user_id),
    INDEX idx_mlc_member_id (member_id),
    INDEX idx_mlc_status (status),
    INDEX idx_mlc_deleted (is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- MLC Work Registrations
CREATE TABLE IF NOT EXISTS mlc_registration (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    work_id BIGINT UNSIGNED NOT NULL,
    mlc_member_id BIGINT UNSIGNED NOT NULL,
    mlc_work_id VARCHAR(50) UNIQUE,
    iswc VARCHAR(11),
    hfa_song_code VARCHAR(50) COMMENT 'Harry Fox song code if applicable',
    ownership_share DECIMAL(6,4) NOT NULL DEFAULT 100.0000,
    administration_share DECIMAL(6,4) DEFAULT 0.0000,
    blanket_license_eligible TINYINT(1) DEFAULT 1,
    registration_date DATE,
    registration_batch_id BIGINT UNSIGNED,
    dsp_list JSON COMMENT 'List of DSPs work is available on',
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_mlc_work_id (work_id),
    INDEX idx_mlc_member (mlc_member_id),
    INDEX idx_mlc_work_code (mlc_work_id),
    INDEX idx_mlc_iswc (iswc),
    INDEX idx_mlc_status (status),
    INDEX idx_mlc_batch (registration_batch_id),
    INDEX idx_mlc_deleted (is_deleted),
    FOREIGN KEY (work_id) REFERENCES works(id),
    FOREIGN KEY (mlc_member_id) REFERENCES mlc_member(id),
    FOREIGN KEY (registration_batch_id) REFERENCES registration_batch(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Harry Fox Agency (HFA)
-- =====================================================

-- Harry Fox Mechanical Licenses
CREATE TABLE IF NOT EXISTS harry_fox_license (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    work_id BIGINT UNSIGNED NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    hfa_song_code VARCHAR(50) UNIQUE,
    license_number VARCHAR(50) UNIQUE,
    license_type VARCHAR(50) DEFAULT 'MECHANICAL' COMMENT 'MECHANICAL, DIGITAL, SYNCHRONIZATION',
    licensee_name VARCHAR(255),
    licensee_contact JSON,
    territory VARCHAR(100) DEFAULT 'UNITED STATES',
    term_start_date DATE,
    term_end_date DATE,
    rate_type VARCHAR(50) COMMENT 'STATUTORY, NEGOTIATED',
    rate_amount DECIMAL(10,4),
    advance_amount DECIMAL(10,2) DEFAULT 0.00,
    minimum_guarantee DECIMAL(10,2) DEFAULT 0.00,
    units_authorized INT,
    configuration VARCHAR(50) COMMENT 'CD, VINYL, DIGITAL, STREAMING',
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_hfa_work (work_id),
    INDEX idx_hfa_user (user_id),
    INDEX idx_hfa_song_code (hfa_song_code),
    INDEX idx_hfa_license_number (license_number),
    INDEX idx_hfa_status (status),
    INDEX idx_hfa_deleted (is_deleted),
    FOREIGN KEY (work_id) REFERENCES works(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Music Reports
-- =====================================================

-- Music Reports Registration & Claiming
CREATE TABLE IF NOT EXISTS music_reports_registration (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    work_id BIGINT UNSIGNED NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    mr_work_id VARCHAR(50) UNIQUE,
    claiming_party VARCHAR(255),
    admin_share DECIMAL(6,4) DEFAULT 0.0000,
    ownership_share DECIMAL(6,4) NOT NULL DEFAULT 100.0000,
    claiming_date DATE,
    claiming_status VARCHAR(50) DEFAULT 'PENDING' COMMENT 'PENDING, APPROVED, DISPUTED, REJECTED',
    dispute_reason TEXT,
    resolution_date DATE,
    registration_batch_id BIGINT UNSIGNED,
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_mr_work (work_id),
    INDEX idx_mr_user (user_id),
    INDEX idx_mr_work_id (mr_work_id),
    INDEX idx_mr_status (claiming_status),
    INDEX idx_mr_batch (registration_batch_id),
    INDEX idx_mr_deleted (is_deleted),
    FOREIGN KEY (work_id) REFERENCES works(id),
    FOREIGN KEY (registration_batch_id) REFERENCES registration_batch(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- PRS for Music (UK)
-- =====================================================

-- PRS Member Data
CREATE TABLE IF NOT EXISTS prs_member (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NOT NULL,
    cae_number VARCHAR(20) NOT NULL,
    member_number VARCHAR(50) UNIQUE,
    member_type VARCHAR(20) NOT NULL DEFAULT 'WRITER',
    territory VARCHAR(2) DEFAULT 'GB',
    vat_number VARCHAR(50),
    tax_id_encrypted VARBINARY(255),
    bank_account_encrypted VARBINARY(500),
    prs_online_access TINYINT(1) DEFAULT 1,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    api_credentials_encrypted VARBINARY(500),
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_prs_user (user_id),
    INDEX idx_prs_cae (cae_number),
    INDEX idx_prs_member (member_number),
    INDEX idx_prs_status (status),
    INDEX idx_prs_deleted (is_deleted)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- MCPS (Mechanical-Copyright Protection Society - UK)
-- =====================================================

-- MCPS Mechanical Rights Registration
CREATE TABLE IF NOT EXISTS mcps_registration (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    work_id BIGINT UNSIGNED NOT NULL,
    prs_member_id BIGINT UNSIGNED NOT NULL,
    mcps_work_id VARCHAR(50) UNIQUE,
    iswc VARCHAR(11),
    tunecode VARCHAR(50),
    mechanical_share DECIMAL(6,4) NOT NULL DEFAULT 100.0000,
    territory_list JSON COMMENT 'List of territories covered',
    excluded_uses JSON COMMENT 'List of excluded uses',
    registration_date DATE,
    registration_batch_id BIGINT UNSIGNED,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_mcps_work (work_id),
    INDEX idx_mcps_member (prs_member_id),
    INDEX idx_mcps_work_id (mcps_work_id),
    INDEX idx_mcps_tunecode (tunecode),
    INDEX idx_mcps_status (status),
    INDEX idx_mcps_batch (registration_batch_id),
    INDEX idx_mcps_deleted (is_deleted),
    FOREIGN KEY (work_id) REFERENCES works(id),
    FOREIGN KEY (prs_member_id) REFERENCES prs_member(id),
    FOREIGN KEY (registration_batch_id) REFERENCES registration_batch(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- PPL (UK Performer Rights)
-- =====================================================

-- PPL Recording Registration
CREATE TABLE IF NOT EXISTS ppl_registration (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    recording_id BIGINT UNSIGNED NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    ppl_recording_id VARCHAR(50) UNIQUE,
    isrc VARCHAR(12) NOT NULL,
    performer_line_up JSON COMMENT 'Detailed performer information',
    recording_rightsholder VARCHAR(255),
    rightsholder_share DECIMAL(6,4) DEFAULT 100.0000,
    p_line VARCHAR(255),
    release_date DATE,
    territory_list JSON DEFAULT '["GB"]',
    registration_date DATE,
    registration_batch_id BIGINT UNSIGNED,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_ppl_recording (recording_id),
    INDEX idx_ppl_user (user_id),
    INDEX idx_ppl_recording_id (ppl_recording_id),
    INDEX idx_ppl_isrc (isrc),
    INDEX idx_ppl_status (status),
    INDEX idx_ppl_batch (registration_batch_id),
    INDEX idx_ppl_deleted (is_deleted),
    FOREIGN KEY (recording_id) REFERENCES recordings(id),
    FOREIGN KEY (registration_batch_id) REFERENCES registration_batch(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- MDX (Music Data Exchange) Submissions
-- =====================================================

-- MDX Format Submissions
CREATE TABLE IF NOT EXISTS mdx_submission (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    submission_type VARCHAR(50) NOT NULL COMMENT 'WORK, RECORDING, RELEASE',
    entity_id BIGINT UNSIGNED NOT NULL COMMENT 'ID of work, recording, or release',
    society_id INT UNSIGNED NOT NULL,
    mdx_message_id VARCHAR(100) UNIQUE,
    mdx_version VARCHAR(10) DEFAULT '3.0',
    sender_party_id VARCHAR(50),
    recipient_party_id VARCHAR(50),
    message_type VARCHAR(50) COMMENT 'NEW, UPDATE, DELETE',
    submission_data JSON COMMENT 'Complete MDX message content',
    submission_date DATETIME,
    acknowledgement_date DATETIME,
    acknowledgement_status VARCHAR(50),
    error_messages JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_mdx_type (submission_type),
    INDEX idx_mdx_entity (entity_id),
    INDEX idx_mdx_society (society_id),
    INDEX idx_mdx_message_id (mdx_message_id),
    INDEX idx_mdx_status (acknowledgement_status),
    INDEX idx_mdx_deleted (is_deleted),
    FOREIGN KEY (society_id) REFERENCES societies(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Xperi/HD Radio Registration
-- =====================================================

-- Xperi HD Radio Metadata
CREATE TABLE IF NOT EXISTS xperi_registration (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    recording_id BIGINT UNSIGNED NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    xperi_content_id VARCHAR(50) UNIQUE,
    artist_name VARCHAR(255) NOT NULL,
    song_title VARCHAR(500) NOT NULL,
    album_title VARCHAR(500),
    genre VARCHAR(100),
    mood VARCHAR(100),
    era VARCHAR(50),
    artist_image_url VARCHAR(500),
    album_art_url VARCHAR(500),
    registration_date DATE,
    registration_batch_id BIGINT UNSIGNED,
    broadcast_flag TINYINT(1) DEFAULT 1,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    metadata JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_by BIGINT UNSIGNED,
    updated_by BIGINT UNSIGNED,
    is_deleted TINYINT(1) DEFAULT 0,
    deleted_at TIMESTAMP NULL,
    deleted_by BIGINT UNSIGNED,
    INDEX idx_xperi_recording (recording_id),
    INDEX idx_xperi_user (user_id),
    INDEX idx_xperi_content_id (xperi_content_id),
    INDEX idx_xperi_status (status),
    INDEX idx_xperi_batch (registration_batch_id),
    INDEX idx_xperi_deleted (is_deleted),
    FOREIGN KEY (recording_id) REFERENCES recordings(id),
    FOREIGN KEY (registration_batch_id) REFERENCES registration_batch(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Society API Integration Logging
-- =====================================================

-- Comprehensive API Log for All Societies
CREATE TABLE IF NOT EXISTS society_api_log (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    society_id INT UNSIGNED NOT NULL,
    api_endpoint VARCHAR(500) NOT NULL,
    http_method VARCHAR(10) NOT NULL COMMENT 'GET, POST, PUT, DELETE',
    request_type VARCHAR(50) COMMENT 'REGISTRATION, QUERY, UPDATE, DELETE',
    entity_type VARCHAR(50) COMMENT 'WORK, RECORDING, MEMBER, LICENSE',
    entity_id BIGINT UNSIGNED,
    request_headers JSON,
    request_body JSON,
    response_status_code INT,
    response_headers JSON,
    response_body JSON,
    response_time_ms INT COMMENT 'Response time in milliseconds',
    rate_limit_remaining INT,
    rate_limit_reset_at DATETIME,
    error_type VARCHAR(50),
    error_message TEXT,
    retry_count INT DEFAULT 0,
    user_id BIGINT UNSIGNED,
    ip_address VARCHAR(45),
    user_agent VARCHAR(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_api_society (society_id),
    INDEX idx_api_endpoint (api_endpoint),
    INDEX idx_api_entity (entity_type, entity_id),
    INDEX idx_api_status (response_status_code),
    INDEX idx_api_error (error_type),
    INDEX idx_api_created (created_at),
    INDEX idx_api_user (user_id),
    FOREIGN KEY (society_id) REFERENCES societies(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(created_at)) (
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p2026 VALUES LESS THAN (2027),
    PARTITION p2027 VALUES LESS THAN (2028),
    PARTITION p2028 VALUES LESS THAN (2029),
    PARTITION p2029 VALUES LESS THAN (2030),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

-- Procedure to sync ASCAP member data
DELIMITER //
CREATE PROCEDURE sync_ascap_member_data(IN p_user_id BIGINT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error syncing ASCAP member data';
    END;
    
    START TRANSACTION;
    
    -- Log API call
    INSERT INTO society_api_log (society_id, api_endpoint, http_method, request_type, entity_type, user_id, created_at)
    VALUES (1, 'https://api.ascap.com/members/sync', 'GET', 'QUERY', 'MEMBER', p_user_id, NOW());
    
    -- Update last sync date
    UPDATE ascap_member 
    SET last_sync_date = NOW() 
    WHERE user_id = p_user_id;
    
    COMMIT;
END//
DELIMITER ;

-- Procedure to register work with multiple societies
DELIMITER //
CREATE PROCEDURE register_work_multiple_societies(
    IN p_work_id BIGINT,
    IN p_user_id BIGINT,
    IN p_societies JSON
)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE society_count INT;
    DECLARE current_society VARCHAR(50);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error registering work with societies';
    END;
    
    START TRANSACTION;
    
    SET society_count = JSON_LENGTH(p_societies);
    
    WHILE i < society_count DO
        SET current_society = JSON_UNQUOTE(JSON_EXTRACT(p_societies, CONCAT('$[', i, ']')));
        
        -- Add registration logic for each society
        CASE current_society
            WHEN 'ASCAP' THEN
                INSERT INTO ascap_work (work_id, ascap_member_id, status, registration_date)
                SELECT p_work_id, id, 'PENDING', CURDATE()
                FROM ascap_member WHERE user_id = p_user_id LIMIT 1;
                
            WHEN 'BMI' THEN
                INSERT INTO bmi_work (work_id, bmi_member_id, status, registration_date)
                SELECT p_work_id, id, 'PENDING', CURDATE()
                FROM bmi_member WHERE user_id = p_user_id LIMIT 1;
                
            WHEN 'MLC' THEN
                INSERT INTO mlc_registration (work_id, mlc_member_id, status, registration_date)
                SELECT p_work_id, id, 'PENDING', CURDATE()
                FROM mlc_member WHERE user_id = p_user_id LIMIT 1;
        END CASE;
        
        SET i = i + 1;
    END WHILE;
    
    COMMIT;
END//
DELIMITER ;

-- =====================================================
-- TRIGGERS
-- =====================================================

-- Trigger to validate ISRC format for SoundExchange
DELIMITER //
CREATE TRIGGER validate_soundexchange_isrc
BEFORE INSERT ON soundexchange_registration
FOR EACH ROW
BEGIN
    IF NEW.isrc NOT REGEXP '^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$' THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Invalid ISRC format. Must be 12 characters: CC-XXX-YY-NNNNN';
    END IF;
END//
DELIMITER ;

-- Trigger to validate ownership shares
DELIMITER //
CREATE TRIGGER validate_mlc_shares
BEFORE INSERT ON mlc_registration
FOR EACH ROW
BEGIN
    IF NEW.ownership_share < 0 OR NEW.ownership_share > 100 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Ownership share must be between 0 and 100';
    END IF;
    
    IF NEW.administration_share < 0 OR NEW.administration_share > NEW.ownership_share THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Administration share cannot exceed ownership share';
    END IF;
END//
DELIMITER ;

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Additional composite indexes for common queries
CREATE INDEX idx_ascap_work_composite ON ascap_work(work_id, status, is_deleted);
CREATE INDEX idx_bmi_work_composite ON bmi_work(work_id, status, is_deleted);
CREATE INDEX idx_soundexchange_composite ON soundexchange_registration(recording_id, status, is_deleted);
CREATE INDEX idx_api_log_composite ON society_api_log(society_id, created_at, response_status_code);

-- =====================================================
-- VIEWS FOR REPORTING
-- =====================================================

-- View for active society memberships
CREATE OR REPLACE VIEW v_active_society_memberships AS
SELECT 
    'ASCAP' as society_name,
    user_id,
    member_number as member_identifier,
    member_type,
    status,
    created_at
FROM ascap_member
WHERE is_deleted = 0 AND status = 'ACTIVE'
UNION ALL
SELECT 
    'BMI' as society_name,
    user_id,
    account_number as member_identifier,
    member_type,
    status,
    created_at
FROM bmi_member
WHERE is_deleted = 0 AND status = 'ACTIVE'
UNION ALL
SELECT 
    'SESAC' as society_name,
    user_id,
    affiliate_code as member_identifier,
    affiliate_type as member_type,
    status,
    created_at
FROM sesac_affiliate
WHERE is_deleted = 0 AND status = 'ACTIVE';

-- View for pending registrations across all societies
CREATE OR REPLACE VIEW v_pending_society_registrations AS
SELECT 
    'ASCAP' as society_name,
    'WORK' as registration_type,
    aw.work_id as entity_id,
    aw.status,
    aw.registration_date,
    aw.created_at
FROM ascap_work aw
WHERE aw.is_deleted = 0 AND aw.status = 'PENDING'
UNION ALL
SELECT 
    'BMI' as society_name,
    'WORK' as registration_type,
    bw.work_id as entity_id,
    bw.status,
    bw.registration_date,
    bw.created_at
FROM bmi_work bw
WHERE bw.is_deleted = 0 AND bw.status = 'PENDING'
UNION ALL
SELECT 
    'SoundExchange' as society_name,
    'RECORDING' as registration_type,
    sr.recording_id as entity_id,
    sr.status,
    sr.registration_date,
    sr.created_at
FROM soundexchange_registration sr
WHERE sr.is_deleted = 0 AND sr.status = 'PENDING';

-- =====================================================
-- MAINTENANCE PROCEDURES
-- =====================================================

-- Procedure to archive old API logs
DELIMITER //
CREATE PROCEDURE archive_old_api_logs(IN p_days_to_keep INT)
BEGIN
    DECLARE archived_count INT;
    
    -- Create archive table if not exists
    CREATE TABLE IF NOT EXISTS society_api_log_archive LIKE society_api_log;
    
    -- Move old records to archive
    INSERT INTO society_api_log_archive
    SELECT * FROM society_api_log
    WHERE created_at < DATE_SUB(NOW(), INTERVAL p_days_to_keep DAY);
    
    -- Get count of archived records
    SET archived_count = ROW_COUNT();
    
    -- Delete archived records from main table
    DELETE FROM society_api_log
    WHERE created_at < DATE_SUB(NOW(), INTERVAL p_days_to_keep DAY);
    
    SELECT CONCAT('Archived ', archived_count, ' API log records') as result;
END//
DELIMITER ;

-- =====================================================
-- GRANTS (Adjust based on your user setup)
-- =====================================================

-- GRANT SELECT, INSERT, UPDATE ON astro_rights.ascap_* TO 'astro_app'@'localhost';
-- GRANT SELECT, INSERT, UPDATE ON astro_rights.bmi_* TO 'astro_app'@'localhost';
-- GRANT SELECT, INSERT, UPDATE ON astro_rights.sesac_* TO 'astro_app'@'localhost';
-- GRANT SELECT, INSERT, UPDATE ON astro_rights.soundexchange_* TO 'astro_app'@'localhost';
-- GRANT SELECT, INSERT, UPDATE ON astro_rights.mlc_* TO 'astro_app'@'localhost';
-- GRANT SELECT, INSERT, UPDATE ON astro_rights.society_api_log TO 'astro_app'@'localhost';
-- GRANT EXECUTE ON PROCEDURE astro_rights.* TO 'astro_app'@'localhost';

-- ASTRO Music Rights Administration Platform
-- Database Section 14: ROYALTY & FINANCIAL TABLES
-- Version: 1.0
-- Description: Comprehensive royalty processing, financial transactions, and payment management
-- Compliance: GAAP/IFRS, SOX, PCI DSS, GDPR/CCPA, AML
-- Performance: Designed for 1M+ royalty lines per statement with sub-second calculations

-- =====================================================
-- SECTION 14: ROYALTY & FINANCIAL TABLES
-- =====================================================

-- =====================================================
-- 14.1 STATEMENT MANAGEMENT TABLES
-- =====================================================

-- Master statement records from all sources
CREATE TABLE IF NOT EXISTS royalty_statement (
    statement_id CHAR(36) NOT NULL DEFAULT (UUID()),
    statement_number VARCHAR(100) NOT NULL,
    source_type VARCHAR(50) NOT NULL, -- 'PRO', 'LABEL', 'DISTRIBUTOR', 'DSP', 'PUBLISHER'
    source_id CHAR(36) NOT NULL, -- Links to society/organization tables
    source_name VARCHAR(255) NOT NULL,
    statement_date DATE NOT NULL,
    period_start_date DATE NOT NULL,
    period_end_date DATE NOT NULL,
    file_id CHAR(36), -- Links to royalty_statement_file
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    total_gross_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    total_net_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    total_withheld_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    line_item_count INT NOT NULL DEFAULT 0,
    status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'PROCESSING', 'PROCESSED', 'FAILED', 'DISPUTED'
    import_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'IMPORTING', 'IMPORTED', 'FAILED'
    processed_date TIMESTAMP NULL,
    processed_by CHAR(36) NULL,
    blockchain_hash VARCHAR(255) NULL, -- For blockchain verification
    metadata JSON NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    deleted_date TIMESTAMP NULL,
    deleted_by CHAR(36) NULL,
    
    PRIMARY KEY (statement_id),
    INDEX idx_statement_number (statement_number),
    INDEX idx_source (source_type, source_id),
    INDEX idx_period (period_start_date, period_end_date),
    INDEX idx_status (status, import_status),
    INDEX idx_blockchain (blockchain_hash),
    INDEX idx_deleted (deleted_date),
    
    CONSTRAINT chk_statement_dates CHECK (period_end_date >= period_start_date),
    CONSTRAINT chk_statement_amounts CHECK (total_gross_amount >= 0 AND total_net_amount >= 0)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Statement metadata and header information
CREATE TABLE IF NOT EXISTS royalty_statement_header (
    header_id CHAR(36) NOT NULL DEFAULT (UUID()),
    statement_id CHAR(36) NOT NULL,
    header_type VARCHAR(50) NOT NULL, -- 'MAIN', 'SUMMARY', 'DETAIL'
    field_name VARCHAR(100) NOT NULL,
    field_value TEXT NULL,
    field_data_type VARCHAR(50) NOT NULL DEFAULT 'STRING', -- 'STRING', 'NUMBER', 'DATE', 'BOOLEAN'
    sequence_number INT NOT NULL DEFAULT 1,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (header_id),
    INDEX idx_statement_header (statement_id, header_type),
    INDEX idx_field_name (field_name),
    
    FOREIGN KEY (statement_id) REFERENCES royalty_statement(statement_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Original statement files storage
CREATE TABLE IF NOT EXISTS royalty_statement_file (
    file_id CHAR(36) NOT NULL DEFAULT (UUID()),
    statement_id CHAR(36) NOT NULL,
    file_name VARCHAR(500) NOT NULL,
    file_type VARCHAR(50) NOT NULL, -- 'PDF', 'CSV', 'EXCEL', 'XML', 'JSON'
    file_size_bytes BIGINT NOT NULL,
    file_hash VARCHAR(255) NOT NULL, -- SHA-256 hash for integrity
    storage_location VARCHAR(1000) NOT NULL, -- S3 or local path
    mime_type VARCHAR(100) NOT NULL,
    is_encrypted BOOLEAN NOT NULL DEFAULT TRUE,
    encryption_key_id VARCHAR(255) NULL, -- KMS key reference
    
    -- Audit fields
    uploaded_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    uploaded_by CHAR(36) NOT NULL,
    deleted_date TIMESTAMP NULL,
    deleted_by CHAR(36) NULL,
    
    PRIMARY KEY (file_id),
    INDEX idx_statement_file (statement_id),
    INDEX idx_file_hash (file_hash),
    INDEX idx_deleted (deleted_date),
    
    FOREIGN KEY (statement_id) REFERENCES royalty_statement(statement_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- 14.2 PERIOD & REPORTING TABLES
-- =====================================================

-- Standardized reporting periods across sources
CREATE TABLE IF NOT EXISTS royalty_period (
    period_id CHAR(36) NOT NULL DEFAULT (UUID()),
    period_name VARCHAR(100) NOT NULL,
    period_type VARCHAR(50) NOT NULL, -- 'MONTHLY', 'QUARTERLY', 'SEMI_ANNUAL', 'ANNUAL', 'CUSTOM'
    period_start_date DATE NOT NULL,
    period_end_date DATE NOT NULL,
    fiscal_year INT NOT NULL,
    fiscal_quarter INT NULL,
    fiscal_month INT NULL,
    calendar_year INT NOT NULL,
    calendar_quarter INT NOT NULL,
    calendar_month INT NOT NULL,
    is_closed BOOLEAN NOT NULL DEFAULT FALSE,
    closed_date TIMESTAMP NULL,
    closed_by CHAR(36) NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (period_id),
    UNIQUE KEY uk_period_dates (period_start_date, period_end_date, period_type),
    INDEX idx_period_type (period_type),
    INDEX idx_fiscal (fiscal_year, fiscal_quarter, fiscal_month),
    INDEX idx_calendar (calendar_year, calendar_quarter, calendar_month),
    INDEX idx_closed (is_closed),
    
    CONSTRAINT chk_period_dates CHECK (period_end_date >= period_start_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- 14.3 TRANSACTION DETAIL TABLES
-- =====================================================

-- Individual royalty line items (partitioned by year)
CREATE TABLE IF NOT EXISTS royalty_detail (
    detail_id CHAR(36) NOT NULL DEFAULT (UUID()),
    statement_id CHAR(36) NOT NULL,
    line_number INT NOT NULL,
    transaction_date DATE NOT NULL,
    territory_code CHAR(2) NOT NULL,
    
    -- Work/Recording identification
    work_id CHAR(36) NULL,
    recording_id CHAR(36) NULL,
    asset_title VARCHAR(500) NOT NULL,
    iswc VARCHAR(15) NULL,
    isrc VARCHAR(15) NULL,
    
    -- Usage information
    usage_type VARCHAR(50) NOT NULL, -- 'STREAM', 'DOWNLOAD', 'BROADCAST', 'SYNC', 'PRINT'
    income_type VARCHAR(50) NOT NULL, -- 'MECHANICAL', 'PERFORMANCE', 'SYNC', 'MASTER', 'NEIGHBORING'
    quantity DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    unit_rate DECIMAL(19,8) NOT NULL DEFAULT 0.00000000,
    
    -- Financial amounts
    gross_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    fee_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    net_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    local_currency_code CHAR(3) NOT NULL,
    local_gross_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    exchange_rate DECIMAL(19,8) NOT NULL DEFAULT 1.00000000,
    
    -- Matching status
    match_status VARCHAR(50) NOT NULL DEFAULT 'UNMATCHED', -- 'MATCHED', 'UNMATCHED', 'PARTIAL', 'DISPUTED'
    match_confidence DECIMAL(5,2) NULL, -- Percentage confidence
    match_method VARCHAR(50) NULL, -- 'EXACT', 'FUZZY', 'MANUAL', 'AI'
    
    -- Additional data
    source_reference VARCHAR(255) NULL,
    metadata JSON NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (detail_id, transaction_date),
    INDEX idx_statement_detail (statement_id, line_number),
    INDEX idx_work_recording (work_id, recording_id),
    INDEX idx_identifiers (iswc, isrc),
    INDEX idx_usage_income (usage_type, income_type),
    INDEX idx_territory_date (territory_code, transaction_date),
    INDEX idx_match_status (match_status),
    INDEX idx_amounts (gross_amount, net_amount),
    
    FOREIGN KEY (statement_id) REFERENCES royalty_statement(statement_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(transaction_date)) (
    PARTITION p2020 VALUES LESS THAN (2021),
    PARTITION p2021 VALUES LESS THAN (2022),
    PARTITION p2022 VALUES LESS THAN (2023),
    PARTITION p2023 VALUES LESS THAN (2024),
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p2026 VALUES LESS THAN (2027),
    PARTITION pfuture VALUES LESS THAN MAXVALUE
);

-- Encrypted sensitive transaction data
CREATE TABLE IF NOT EXISTS royalty_detail_encrypted (
    detail_id CHAR(36) NOT NULL,
    
    -- Encrypted fields (AES-256)
    payee_name_encrypted VARBINARY(500) NULL,
    payee_tax_id_encrypted VARBINARY(255) NULL,
    bank_account_encrypted VARBINARY(500) NULL,
    payment_details_encrypted VARBINARY(1000) NULL,
    
    -- Encryption metadata
    encryption_key_id VARCHAR(255) NOT NULL,
    encryption_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY (detail_id),
    
    FOREIGN KEY (detail_id) REFERENCES royalty_detail(detail_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Detailed usage data
CREATE TABLE IF NOT EXISTS royalty_usage (
    usage_id CHAR(36) NOT NULL DEFAULT (UUID()),
    detail_id CHAR(36) NOT NULL,
    platform_name VARCHAR(255) NULL,
    service_type VARCHAR(50) NULL, -- 'SUBSCRIPTION', 'AD_SUPPORTED', 'DOWNLOAD', 'RADIO'
    user_type VARCHAR(50) NULL, -- 'PREMIUM', 'FREE', 'TRIAL'
    device_type VARCHAR(50) NULL, -- 'MOBILE', 'DESKTOP', 'SMART_SPEAKER', 'TV'
    
    -- Detailed metrics
    play_count BIGINT NULL,
    skip_count BIGINT NULL,
    completion_rate DECIMAL(5,2) NULL,
    average_play_duration INT NULL, -- seconds
    
    -- Geographic data
    country_code CHAR(2) NULL,
    region VARCHAR(100) NULL,
    city VARCHAR(100) NULL,
    
    -- Time-based data
    usage_date DATE NULL,
    usage_hour INT NULL, -- 0-23
    day_of_week INT NULL, -- 1-7
    
    -- Additional metadata
    metadata JSON NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY (usage_id),
    INDEX idx_detail_usage (detail_id),
    INDEX idx_platform (platform_name, service_type),
    INDEX idx_geography (country_code, region),
    INDEX idx_usage_date (usage_date),
    
    FOREIGN KEY (detail_id) REFERENCES royalty_detail(detail_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- 14.4 CALCULATION TABLES
-- =====================================================

-- Calculated royalty amounts with formulas
CREATE TABLE IF NOT EXISTS royalty_calculation (
    calculation_id CHAR(36) NOT NULL DEFAULT (UUID()),
    detail_id CHAR(36) NOT NULL,
    participant_id CHAR(36) NOT NULL,
    calculation_type VARCHAR(50) NOT NULL, -- 'STANDARD', 'ESCALATION', 'MINIMUM', 'MAXIMUM', 'ADVANCE'
    
    -- Ownership and rates
    ownership_share DECIMAL(10,8) NOT NULL,
    applicable_rate DECIMAL(10,8) NOT NULL,
    rate_type VARCHAR(50) NOT NULL, -- 'PERCENTAGE', 'FLAT_FEE', 'PER_UNIT'
    
    -- Calculated amounts
    gross_earned DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    fees_deducted DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    net_earned DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    
    -- Adjustments
    advance_applied DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    recoupment_applied DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    withholding_applied DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    final_payable DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    
    -- Calculation formula (stored as JSON)
    calculation_formula JSON NOT NULL,
    calculation_version VARCHAR(20) NOT NULL DEFAULT '1.0',
    
    -- Blockchain readiness
    calculation_hash VARCHAR(255) NOT NULL, -- SHA-256 of calculation
    smart_contract_ready BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Audit fields
    calculated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    calculated_by CHAR(36) NOT NULL,
    verified_date TIMESTAMP NULL,
    verified_by CHAR(36) NULL,
    
    PRIMARY KEY (calculation_id),
    INDEX idx_detail_participant (detail_id, participant_id),
    INDEX idx_calculation_type (calculation_type),
    INDEX idx_amounts (gross_earned, final_payable),
    INDEX idx_calculation_hash (calculation_hash),
    
    FOREIGN KEY (detail_id) REFERENCES royalty_detail(detail_id),
    FOREIGN KEY (participant_id) REFERENCES royalty_participant(participant_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Complete calculation history for audit
CREATE TABLE IF NOT EXISTS royalty_calculation_log (
    log_id CHAR(36) NOT NULL DEFAULT (UUID()),
    calculation_id CHAR(36) NOT NULL,
    log_type VARCHAR(50) NOT NULL, -- 'INITIAL', 'RECALCULATION', 'ADJUSTMENT', 'CORRECTION'
    
    -- Previous values
    previous_gross DECIMAL(19,4) NULL,
    previous_net DECIMAL(19,4) NULL,
    previous_payable DECIMAL(19,4) NULL,
    
    -- New values
    new_gross DECIMAL(19,4) NOT NULL,
    new_net DECIMAL(19,4) NOT NULL,
    new_payable DECIMAL(19,4) NOT NULL,
    
    -- Change details
    change_reason VARCHAR(500) NOT NULL,
    change_formula JSON NULL,
    approval_required BOOLEAN NOT NULL DEFAULT FALSE,
    approval_status VARCHAR(50) NULL, -- 'PENDING', 'APPROVED', 'REJECTED'
    approved_by CHAR(36) NULL,
    approved_date TIMESTAMP NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (log_id),
    INDEX idx_calculation_log (calculation_id, log_type),
    INDEX idx_approval (approval_required, approval_status),
    INDEX idx_created_date (created_date),
    
    FOREIGN KEY (calculation_id) REFERENCES royalty_calculation(calculation_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- 14.5 DISTRIBUTION TABLES
-- =====================================================

-- Distribution of royalties to participants
CREATE TABLE IF NOT EXISTS royalty_distribution (
    distribution_id CHAR(36) NOT NULL DEFAULT (UUID()),
    calculation_id CHAR(36) NOT NULL,
    participant_id CHAR(36) NOT NULL,
    distribution_type VARCHAR(50) NOT NULL, -- 'PRIMARY', 'SUB_PUBLISHER', 'ADMINISTRATOR'
    
    -- Distribution amounts
    distributed_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Payment status
    payment_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'SCHEDULED', 'PROCESSING', 'PAID', 'FAILED'
    payment_batch_id CHAR(36) NULL,
    payment_date DATE NULL,
    
    -- Hold status
    is_held BOOLEAN NOT NULL DEFAULT FALSE,
    hold_reason VARCHAR(255) NULL,
    hold_until_date DATE NULL,
    
    -- Distribution chain (for sub-publishing)
    parent_distribution_id CHAR(36) NULL,
    distribution_level INT NOT NULL DEFAULT 1,
    
    -- Blockchain readiness
    distribution_hash VARCHAR(255) NOT NULL,
    smart_contract_address VARCHAR(255) NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (distribution_id),
    INDEX idx_calculation_distribution (calculation_id),
    INDEX idx_participant_distribution (participant_id),
    INDEX idx_payment_status (payment_status, payment_date),
    INDEX idx_held (is_held, hold_until_date),
    INDEX idx_parent_distribution (parent_distribution_id),
    
    FOREIGN KEY (calculation_id) REFERENCES royalty_calculation(calculation_id),
    FOREIGN KEY (participant_id) REFERENCES royalty_participant(participant_id),
    FOREIGN KEY (payment_batch_id) REFERENCES payment_batch(batch_id),
    FOREIGN KEY (parent_distribution_id) REFERENCES royalty_distribution(distribution_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Payee information and split percentages
CREATE TABLE IF NOT EXISTS royalty_participant (
    participant_id CHAR(36) NOT NULL DEFAULT (UUID()),
    participant_type VARCHAR(50) NOT NULL, -- 'CONTRIBUTOR', 'PUBLISHER', 'LABEL', 'ADMINISTRATOR'
    entity_id CHAR(36) NOT NULL, -- Links to contributor/organization tables
    entity_name VARCHAR(500) NOT NULL,
    
    -- Payment information
    payment_name VARCHAR(500) NOT NULL,
    payment_method VARCHAR(50) NOT NULL DEFAULT 'BANK_TRANSFER', -- 'BANK_TRANSFER', 'PAYPAL', 'CRYPTO', 'CHECK'
    payment_currency CHAR(3) NOT NULL DEFAULT 'USD',
    minimum_payment_threshold DECIMAL(19,4) NOT NULL DEFAULT 100.0000,
    
    -- Tax information (encrypted)
    tax_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'VERIFIED', 'EXEMPT', 'WITHHOLDING'
    tax_rate DECIMAL(5,4) NULL,
    tax_territory CHAR(2) NULL,
    
    -- Participation details
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    start_date DATE NOT NULL,
    end_date DATE NULL,
    
    -- Verification
    kyc_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'VERIFIED', 'FAILED', 'EXPIRED'
    kyc_verified_date TIMESTAMP NULL,
    aml_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'CLEARED', 'FLAGGED', 'BLOCKED'
    aml_checked_date TIMESTAMP NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    deleted_date TIMESTAMP NULL,
    deleted_by CHAR(36) NULL,
    
    PRIMARY KEY (participant_id),
    INDEX idx_entity (participant_type, entity_id),
    INDEX idx_payment_method (payment_method),
    INDEX idx_tax_status (tax_status, tax_territory),
    INDEX idx_active (is_active, start_date, end_date),
    INDEX idx_compliance (kyc_status, aml_status),
    INDEX idx_deleted (deleted_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- 14.6 FINANCIAL CONTROL TABLES
-- =====================================================

-- Held royalties (disputes, minimums, pending docs)
CREATE TABLE IF NOT EXISTS royalty_hold (
    hold_id CHAR(36) NOT NULL DEFAULT (UUID()),
    distribution_id CHAR(36) NOT NULL,
    hold_type VARCHAR(50) NOT NULL, -- 'MINIMUM', 'DISPUTE', 'DOCUMENTATION', 'LEGAL', 'TAX'
    hold_reason TEXT NOT NULL,
    hold_amount DECIMAL(19,4) NOT NULL,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Hold period
    hold_start_date DATE NOT NULL,
    hold_end_date DATE NULL,
    auto_release BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Release information
    release_status VARCHAR(50) NOT NULL DEFAULT 'HELD', -- 'HELD', 'PARTIAL_RELEASE', 'RELEASED', 'FORFEITED'
    released_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    release_date TIMESTAMP NULL,
    released_by CHAR(36) NULL,
    release_notes TEXT NULL,
    
    -- Related entities
    dispute_id CHAR(36) NULL,
    legal_case_number VARCHAR(100) NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (hold_id),
    INDEX idx_distribution_hold (distribution_id),
    INDEX idx_hold_type_status (hold_type, release_status),
    INDEX idx_hold_dates (hold_start_date, hold_end_date),
    INDEX idx_dispute (dispute_id),
    
    FOREIGN KEY (distribution_id) REFERENCES royalty_distribution(distribution_id),
    FOREIGN KEY (dispute_id) REFERENCES royalty_dispute(dispute_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Dispute tracking and resolution
CREATE TABLE IF NOT EXISTS royalty_dispute (
    dispute_id CHAR(36) NOT NULL DEFAULT (UUID()),
    dispute_number VARCHAR(50) NOT NULL,
    dispute_type VARCHAR(50) NOT NULL, -- 'OWNERSHIP', 'CALCULATION', 'USAGE', 'TERRITORY', 'PAYMENT'
    priority VARCHAR(20) NOT NULL DEFAULT 'MEDIUM', -- 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'
    
    -- Dispute details
    title VARCHAR(500) NOT NULL,
    description TEXT NOT NULL,
    disputed_amount DECIMAL(19,4) NULL,
    currency_code CHAR(3) NULL DEFAULT 'USD',
    
    -- Related entities
    work_id CHAR(36) NULL,
    recording_id CHAR(36) NULL,
    statement_id CHAR(36) NULL,
    detail_id CHAR(36) NULL,
    
    -- Parties involved
    claimant_id CHAR(36) NOT NULL,
    claimant_type VARCHAR(50) NOT NULL, -- 'INTERNAL', 'CONTRIBUTOR', 'PUBLISHER', 'LABEL'
    respondent_id CHAR(36) NULL,
    respondent_type VARCHAR(50) NULL,
    
    -- Status tracking
    status VARCHAR(50) NOT NULL DEFAULT 'OPEN', -- 'OPEN', 'INVESTIGATING', 'PENDING_RESOLUTION', 'RESOLVED', 'CLOSED'
    resolution_type VARCHAR(50) NULL, -- 'ACCEPTED', 'REJECTED', 'COMPROMISE', 'WITHDRAWN'
    resolution_date TIMESTAMP NULL,
    resolved_by CHAR(36) NULL,
    resolution_notes TEXT NULL,
    
    -- Financial impact
    original_amount DECIMAL(19,4) NULL,
    adjusted_amount DECIMAL(19,4) NULL,
    impact_statements JSON NULL, -- Array of affected statement IDs
    
    -- Documentation
    supporting_documents JSON NULL, -- Array of document references
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (dispute_id),
    UNIQUE KEY uk_dispute_number (dispute_number),
    INDEX idx_dispute_type_status (dispute_type, status),
    INDEX idx_priority_status (priority, status),
    INDEX idx_related_entities (work_id, recording_id, statement_id),
    INDEX idx_parties (claimant_id, respondent_id),
    INDEX idx_resolution (resolution_date, resolution_type),
    
    FOREIGN KEY (statement_id) REFERENCES royalty_statement(statement_id),
    FOREIGN KEY (detail_id) REFERENCES royalty_detail(detail_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Manual adjustments with approval workflow
CREATE TABLE IF NOT EXISTS royalty_adjustment (
    adjustment_id CHAR(36) NOT NULL DEFAULT (UUID()),
    adjustment_number VARCHAR(50) NOT NULL,
    adjustment_type VARCHAR(50) NOT NULL, -- 'CORRECTION', 'CREDIT', 'DEBIT', 'WRITE_OFF', 'REVERSAL'
    
    -- Adjustment details
    detail_id CHAR(36) NULL,
    calculation_id CHAR(36) NULL,
    distribution_id CHAR(36) NULL,
    
    -- Financial impact
    original_amount DECIMAL(19,4) NOT NULL,
    adjustment_amount DECIMAL(19,4) NOT NULL,
    adjusted_total DECIMAL(19,4) NOT NULL,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Reason and documentation
    reason_code VARCHAR(50) NOT NULL, -- 'DATA_ERROR', 'RATE_CHANGE', 'DISPUTE_RESOLUTION', 'AUDIT_FINDING'
    reason_description TEXT NOT NULL,
    supporting_documents JSON NULL,
    
    -- Approval workflow
    requires_approval BOOLEAN NOT NULL DEFAULT TRUE,
    approval_threshold DECIMAL(19,4) NOT NULL DEFAULT 1000.0000,
    approval_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'APPROVED', 'REJECTED', 'AUTO_APPROVED'
    approval_chain JSON NULL, -- Required approvers based on amount
    
    -- Approval tracking
    submitted_by CHAR(36) NOT NULL,
    submitted_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    approved_by CHAR(36) NULL,
    approved_date TIMESTAMP NULL,
    approval_notes TEXT NULL,
    
    -- Application status
    is_applied BOOLEAN NOT NULL DEFAULT FALSE,
    applied_date TIMESTAMP NULL,
    applied_by CHAR(36) NULL,
    reversal_adjustment_id CHAR(36) NULL, -- For reversals
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (adjustment_id),
    UNIQUE KEY uk_adjustment_number (adjustment_number),
    INDEX idx_adjustment_type (adjustment_type, approval_status),
    INDEX idx_related_records (detail_id, calculation_id, distribution_id),
    INDEX idx_approval (approval_status, requires_approval),
    INDEX idx_applied (is_applied, applied_date),
    INDEX idx_reversal (reversal_adjustment_id),
    
    FOREIGN KEY (detail_id) REFERENCES royalty_detail(detail_id),
    FOREIGN KEY (calculation_id) REFERENCES royalty_calculation(calculation_id),
    FOREIGN KEY (distribution_id) REFERENCES royalty_distribution(distribution_id),
    FOREIGN KEY (reversal_adjustment_id) REFERENCES royalty_adjustment(adjustment_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Advance payments and balances
CREATE TABLE IF NOT EXISTS royalty_advance (
    advance_id CHAR(36) NOT NULL DEFAULT (UUID()),
    advance_number VARCHAR(50) NOT NULL,
    participant_id CHAR(36) NOT NULL,
    agreement_id CHAR(36) NULL, -- Links to agreement tables
    
    -- Advance details
    advance_type VARCHAR(50) NOT NULL, -- 'SIGNING', 'MILESTONE', 'MINIMUM_GUARANTEE', 'CUSTOM'
    advance_amount DECIMAL(19,4) NOT NULL,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Terms
    recoupable BOOLEAN NOT NULL DEFAULT TRUE,
    recoupment_rate DECIMAL(5,4) NOT NULL DEFAULT 1.0000, -- 100%
    cross_collateralized BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Balance tracking
    original_balance DECIMAL(19,4) NOT NULL,
    current_balance DECIMAL(19,4) NOT NULL,
    recouped_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    
    -- Period
    effective_date DATE NOT NULL,
    expiry_date DATE NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    
    -- Payment information
    payment_date DATE NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    payment_reference VARCHAR(255) NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (advance_id),
    UNIQUE KEY uk_advance_number (advance_number),
    INDEX idx_participant_advance (participant_id, is_active),
    INDEX idx_advance_type (advance_type),
    INDEX idx_balance (current_balance, recoupable),
    INDEX idx_dates (effective_date, expiry_date),
    INDEX idx_agreement (agreement_id),
    
    FOREIGN KEY (participant_id) REFERENCES royalty_participant(participant_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Recoupment tracking and waterfall
CREATE TABLE IF NOT EXISTS royalty_recoupment (
    recoupment_id CHAR(36) NOT NULL DEFAULT (UUID()),
    advance_id CHAR(36) NOT NULL,
    calculation_id CHAR(36) NOT NULL,
    
    -- Recoupment details
    recoupment_date DATE NOT NULL,
    gross_earnings DECIMAL(19,4) NOT NULL,
    recoupable_amount DECIMAL(19,4) NOT NULL,
    recouped_amount DECIMAL(19,4) NOT NULL,
    
    -- Balance tracking
    balance_before DECIMAL(19,4) NOT NULL,
    balance_after DECIMAL(19,4) NOT NULL,
    
    -- Waterfall position
    waterfall_level INT NOT NULL DEFAULT 1,
    waterfall_priority INT NOT NULL DEFAULT 1,
    
    -- Status
    is_fully_recouped BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (recoupment_id),
    INDEX idx_advance_recoupment (advance_id, recoupment_date),
    INDEX idx_calculation_recoupment (calculation_id),
    INDEX idx_waterfall (waterfall_level, waterfall_priority),
    INDEX idx_fully_recouped (is_fully_recouped),
    
    FOREIGN KEY (advance_id) REFERENCES royalty_advance(advance_id),
    FOREIGN KEY (calculation_id) REFERENCES royalty_calculation(calculation_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- 14.7 PAYMENT PROCESSING TABLES
-- =====================================================

-- Batch payment runs
CREATE TABLE IF NOT EXISTS payment_batch (
    batch_id CHAR(36) NOT NULL DEFAULT (UUID()),
    batch_number VARCHAR(50) NOT NULL,
    batch_type VARCHAR(50) NOT NULL, -- 'SCHEDULED', 'MANUAL', 'EMERGENCY', 'RERUN'
    
    -- Batch details
    payment_date DATE NOT NULL,
    period_start_date DATE NOT NULL,
    period_end_date DATE NOT NULL,
    
    -- Financial summary
    total_payments INT NOT NULL DEFAULT 0,
    total_amount DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Status tracking
    status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'PARTIAL'
    started_date TIMESTAMP NULL,
    completed_date TIMESTAMP NULL,
    
    -- Payment methods in batch
    payment_methods JSON NULL, -- Array of methods used
    
    -- Error tracking
    failed_count INT NOT NULL DEFAULT 0,
    error_details JSON NULL,
    
    -- Approval
    requires_approval BOOLEAN NOT NULL DEFAULT TRUE,
    approved_by CHAR(36) NULL,
    approved_date TIMESTAMP NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (batch_id),
    UNIQUE KEY uk_batch_number (batch_number),
    INDEX idx_batch_type_status (batch_type, status),
    INDEX idx_payment_date (payment_date),
    INDEX idx_period (period_start_date, period_end_date),
    INDEX idx_approval (requires_approval, approved_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Individual payment records
CREATE TABLE IF NOT EXISTS payment_detail (
    payment_id CHAR(36) NOT NULL DEFAULT (UUID()),
    batch_id CHAR(36) NOT NULL,
    participant_id CHAR(36) NOT NULL,
    
    -- Payment amounts
    payment_amount DECIMAL(19,4) NOT NULL,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Payment method
    payment_method VARCHAR(50) NOT NULL,
    payment_method_id CHAR(36) NOT NULL, -- Links to payment_method table
    
    -- Transaction details
    transaction_reference VARCHAR(255) NULL,
    transaction_date TIMESTAMP NULL,
    
    -- Status
    status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'SENT', 'COMPLETED', 'FAILED', 'RETURNED'
    status_message TEXT NULL,
    
    -- Fee tracking
    transaction_fee DECIMAL(19,4) NOT NULL DEFAULT 0.0000,
    net_paid_amount DECIMAL(19,4) NOT NULL,
    
    -- Retry information
    retry_count INT NOT NULL DEFAULT 0,
    last_retry_date TIMESTAMP NULL,
    next_retry_date TIMESTAMP NULL,
    
    -- Blockchain
    blockchain_tx_hash VARCHAR(255) NULL,
    blockchain_confirmed BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (payment_id),
    INDEX idx_batch_payment (batch_id, status),
    INDEX idx_participant_payment (participant_id, transaction_date),
    INDEX idx_payment_status (status, retry_count),
    INDEX idx_transaction_ref (transaction_reference),
    INDEX idx_blockchain (blockchain_tx_hash),
    
    FOREIGN KEY (batch_id) REFERENCES payment_batch(batch_id),
    FOREIGN KEY (participant_id) REFERENCES royalty_participant(participant_id),
    FOREIGN KEY (payment_method_id) REFERENCES payment_method(method_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Encrypted payment methods
CREATE TABLE IF NOT EXISTS payment_method (
    method_id CHAR(36) NOT NULL DEFAULT (UUID()),
    participant_id CHAR(36) NOT NULL,
    method_type VARCHAR(50) NOT NULL, -- 'BANK_TRANSFER', 'ACH', 'WIRE', 'PAYPAL', 'CRYPTO', 'CHECK'
    
    -- Encrypted payment details (AES-256)
    account_holder_encrypted VARBINARY(500) NOT NULL,
    account_details_encrypted VARBINARY(2000) NOT NULL, -- JSON with bank details
    routing_info_encrypted VARBINARY(1000) NULL,
    
    -- Method metadata
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    country_code CHAR(2) NOT NULL,
    is_primary BOOLEAN NOT NULL DEFAULT FALSE,
    is_verified BOOLEAN NOT NULL DEFAULT FALSE,
    verified_date TIMESTAMP NULL,
    
    -- Crypto specific
    blockchain_network VARCHAR(50) NULL, -- 'ETHEREUM', 'BITCOIN', 'SOLANA'
    wallet_address VARCHAR(255) NULL, -- Public only
    
    -- Validation
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    validation_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'VALID', 'INVALID', 'EXPIRED'
    last_validation_date TIMESTAMP NULL,
    
    -- Encryption metadata
    encryption_key_id VARCHAR(255) NOT NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    deleted_date TIMESTAMP NULL,
    deleted_by CHAR(36) NULL,
    
    PRIMARY KEY (method_id),
    INDEX idx_participant_method (participant_id, is_active, is_primary),
    INDEX idx_method_type (method_type, country_code),
    INDEX idx_validation (validation_status, last_validation_date),
    INDEX idx_deleted (deleted_date),
    
    FOREIGN KEY (participant_id) REFERENCES royalty_participant(participant_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Payment verification and reconciliation
CREATE TABLE IF NOT EXISTS payment_verification (
    verification_id CHAR(36) NOT NULL DEFAULT (UUID()),
    payment_id CHAR(36) NOT NULL,
    verification_type VARCHAR(50) NOT NULL, -- 'BANK_STATEMENT', 'PAYPAL_WEBHOOK', 'BLOCKCHAIN', 'MANUAL'
    
    -- Verification details
    verification_date TIMESTAMP NOT NULL,
    verification_status VARCHAR(50) NOT NULL, -- 'MATCHED', 'UNMATCHED', 'PARTIAL', 'DISPUTED'
    
    -- Amounts
    expected_amount DECIMAL(19,4) NOT NULL,
    actual_amount DECIMAL(19,4) NULL,
    difference_amount DECIMAL(19,4) NULL,
    
    -- Reference data
    external_reference VARCHAR(255) NULL,
    verification_data JSON NULL,
    
    -- Resolution
    resolution_status VARCHAR(50) NULL, -- 'PENDING', 'RESOLVED', 'WRITTEN_OFF'
    resolution_notes TEXT NULL,
    resolved_by CHAR(36) NULL,
    resolved_date TIMESTAMP NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (verification_id),
    INDEX idx_payment_verification (payment_id, verification_type),
    INDEX idx_verification_status (verification_status, resolution_status),
    INDEX idx_verification_date (verification_date),
    
    FOREIGN KEY (payment_id) REFERENCES payment_detail(payment_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- 14.8 FINANCIAL REFERENCE TABLES
-- =====================================================

-- Daily exchange rates from multiple sources
CREATE TABLE IF NOT EXISTS currency_exchange (
    exchange_id CHAR(36) NOT NULL DEFAULT (UUID()),
    rate_date DATE NOT NULL,
    from_currency CHAR(3) NOT NULL,
    to_currency CHAR(3) NOT NULL,
    
    -- Rate information
    exchange_rate DECIMAL(19,8) NOT NULL,
    rate_source VARCHAR(50) NOT NULL, -- 'ECB', 'FEDERAL_RESERVE', 'XE', 'OANDA'
    
    -- Additional rates
    bid_rate DECIMAL(19,8) NULL,
    ask_rate DECIMAL(19,8) NULL,
    mid_rate DECIMAL(19,8) NULL,
    
    -- Validation
    is_official BOOLEAN NOT NULL DEFAULT FALSE,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    PRIMARY KEY (exchange_id),
    UNIQUE KEY uk_rate_date_currencies (rate_date, from_currency, to_currency, rate_source),
    INDEX idx_rate_date (rate_date),
    INDEX idx_currencies (from_currency, to_currency),
    INDEX idx_active (is_active, is_official)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Encrypted tax information by territory
CREATE TABLE IF NOT EXISTS tax_withholding (
    withholding_id CHAR(36) NOT NULL DEFAULT (UUID()),
    participant_id CHAR(36) NOT NULL,
    tax_year INT NOT NULL,
    
    -- Tax details (encrypted)
    tax_id_encrypted VARBINARY(255) NOT NULL,
    tax_form_type VARCHAR(50) NOT NULL, -- 'W9', 'W8BEN', 'W8BENE', '1099', '1042S'
    tax_form_data_encrypted VARBINARY(5000) NULL, -- JSON with form data
    
    -- Withholding rates
    withholding_rate DECIMAL(5,4) NOT NULL,
    treaty_rate DECIMAL(5,4) NULL,
    backup_withholding BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Territory information
    tax_residence_country CHAR(2) NOT NULL,
    treaty_country CHAR(2) NULL,
    
    -- Document storage
    form_file_id CHAR(36) NULL, -- Links to document storage
    form_submitted_date DATE NULL,
    form_expires_date DATE NULL,
    
    -- Validation
    validation_status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- 'PENDING', 'VALID', 'INVALID', 'EXPIRED'
    irs_tin_match VARCHAR(50) NULL, -- 'MATCHED', 'NOT_MATCHED', 'PENDING'
    
    -- Compliance
    fatca_status VARCHAR(50) NULL,
    crs_reportable BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Encryption metadata
    encryption_key_id VARCHAR(255) NOT NULL,
    
    -- Audit fields
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36) NOT NULL,
    modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    modified_by CHAR(36) NOT NULL,
    
    PRIMARY KEY (withholding_id),
    UNIQUE KEY uk_participant_year (participant_id, tax_year),
    INDEX idx_tax_form (tax_form_type, validation_status),
    INDEX idx_residence (tax_residence_country, treaty_country),
    INDEX idx_expires (form_expires_date),
    
    FOREIGN KEY (participant_id) REFERENCES royalty_participant(participant_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Immutable financial audit log
CREATE TABLE IF NOT EXISTS financial_audit_trail (
    audit_id CHAR(36) NOT NULL DEFAULT (UUID()),
    audit_timestamp TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    
    -- Event information
    event_type VARCHAR(100) NOT NULL,
    event_category VARCHAR(50) NOT NULL, -- 'CALCULATION', 'PAYMENT', 'ADJUSTMENT', 'DISPUTE'
    
    -- Related entities
    entity_type VARCHAR(50) NOT NULL,
    entity_id CHAR(36) NOT NULL,
    
    -- Change details
    operation VARCHAR(20) NOT NULL, -- 'CREATE', 'UPDATE', 'DELETE', 'EXECUTE'
    field_changes JSON NULL, -- Before/after values
    
    -- Financial impact
    financial_impact DECIMAL(19,4) NULL,
    currency_code CHAR(3) NULL,
    
    -- User and system information
    user_id CHAR(36) NOT NULL,
    user_role VARCHAR(50) NOT NULL,
    ip_address VARCHAR(45) NULL,
    user_agent VARCHAR(500) NULL,
    session_id VARCHAR(255) NULL,
    
    -- Blockchain
    block_hash VARCHAR(255) NULL, -- For blockchain anchoring
    
    PRIMARY KEY (audit_id),
    INDEX idx_audit_timestamp (audit_timestamp),
    INDEX idx_event (event_type, event_category),
    INDEX idx_entity (entity_type, entity_id),
    INDEX idx_user (user_id, audit_timestamp),
    INDEX idx_financial_impact (financial_impact)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- 14.9 STORED PROCEDURES
-- =====================================================

-- Calculate royalties for a statement
DELIMITER //
CREATE PROCEDURE sp_calculate_royalties(
    IN p_statement_id CHAR(36),
    IN p_user_id CHAR(36)
)
BEGIN
    DECLARE v_error_message VARCHAR(500);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        GET DIAGNOSTICS CONDITION 1 v_error_message = MESSAGE_TEXT;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_message;
    END;

    START TRANSACTION;

    -- Update statement status
    UPDATE royalty_statement 
    SET status = 'PROCESSING',
        modified_by = p_user_id,
        modified_date = CURRENT_TIMESTAMP
    WHERE statement_id = p_statement_id;

    -- Calculate royalties for each detail line
    INSERT INTO royalty_calculation (
        detail_id,
        participant_id,
        calculation_type,
        ownership_share,
        applicable_rate,
        rate_type,
        gross_earned,
        fees_deducted,
        net_earned,
        calculation_formula,
        calculation_hash,
        calculated_by
    )
    SELECT 
        rd.detail_id,
        rp.participant_id,
        'STANDARD',
        COALESCE(ro.ownership_percentage / 100, 1.0), -- From rights ownership
        COALESCE(ra.royalty_rate / 100, 0.10), -- From agreements
        'PERCENTAGE',
        rd.net_amount * (COALESCE(ro.ownership_percentage / 100, 1.0)),
        0, -- Fees calculated separately
        rd.net_amount * (COALESCE(ro.ownership_percentage / 100, 1.0)),
        JSON_OBJECT(
            'formula', 'net_amount * ownership_share',
            'variables', JSON_OBJECT(
                'net_amount', rd.net_amount,
                'ownership_share', COALESCE(ro.ownership_percentage / 100, 1.0)
            )
        ),
        SHA2(CONCAT(rd.detail_id, rp.participant_id, rd.net_amount), 256),
        p_user_id
    FROM royalty_detail rd
    LEFT JOIN rights_ownership ro ON rd.work_id = ro.work_id -- From Section 3
    LEFT JOIN royalty_participant rp ON ro.rights_holder_id = rp.entity_id
    LEFT JOIN agreement_royalty_rates ra ON ro.work_id = ra.work_id -- From Section 5
    WHERE rd.statement_id = p_statement_id
    AND rd.match_status = 'MATCHED';

    -- Apply advances and recoupments
    CALL sp_apply_recoupments(p_statement_id, p_user_id);

    -- Create distributions
    INSERT INTO royalty_distribution (
        calculation_id,
        participant_id,
        distribution_type,
        distributed_amount,
        currency_code,
        distribution_hash,
        created_by,
        modified_by
    )
    SELECT 
        rc.calculation_id,
        rc.participant_id,
        'PRIMARY',
        rc.final_payable,
        rs.currency_code,
        SHA2(CONCAT(rc.calculation_id, rc.participant_id, rc.final_payable), 256),
        p_user_id,
        p_user_id
    FROM royalty_calculation rc
    JOIN royalty_detail rd ON rc.detail_id = rd.detail_id
    JOIN royalty_statement rs ON rd.statement_id = rs.statement_id
    WHERE rs.statement_id = p_statement_id
    AND rc.final_payable > 0;

    -- Update statement totals
    UPDATE royalty_statement rs
    SET total_gross_amount = (
            SELECT SUM(gross_amount) 
            FROM royalty_detail 
            WHERE statement_id = p_statement_id
        ),
        total_net_amount = (
            SELECT SUM(net_amount) 
            FROM royalty_detail 
            WHERE statement_id = p_statement_id
        ),
        status = 'PROCESSED',
        processed_date = CURRENT_TIMESTAMP,
        processed_by = p_user_id,
        modified_by = p_user_id,
        modified_date = CURRENT_TIMESTAMP
    WHERE statement_id = p_statement_id;

    -- Log the calculation
    INSERT INTO financial_audit_trail (
        event_type,
        event_category,
        entity_type,
        entity_id,
        operation,
        user_id,
        user_role
    )
    VALUES (
        'ROYALTY_CALCULATION_COMPLETED',
        'CALCULATION',
        'STATEMENT',
        p_statement_id,
        'EXECUTE',
        p_user_id,
        'SYSTEM'
    );

    COMMIT;
END//

-- Apply recoupments to calculations
CREATE PROCEDURE sp_apply_recoupments(
    IN p_statement_id CHAR(36),
    IN p_user_id CHAR(36)
)
BEGIN
    DECLARE v_done INT DEFAULT FALSE;
    DECLARE v_calculation_id CHAR(36);
    DECLARE v_participant_id CHAR(36);
    DECLARE v_gross_earned DECIMAL(19,4);
    DECLARE v_advance_id CHAR(36);
    DECLARE v_advance_balance DECIMAL(19,4);
    DECLARE v_recoup_amount DECIMAL(19,4);
    
    DECLARE cur_calculations CURSOR FOR
        SELECT rc.calculation_id, rc.participant_id, rc.gross_earned
        FROM royalty_calculation rc
        JOIN royalty_detail rd ON rc.detail_id = rd.detail_id
        WHERE rd.statement_id = p_statement_id
        AND rc.gross_earned > 0
        ORDER BY rc.participant_id, rc.gross_earned DESC;
        
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;
    
    OPEN cur_calculations;
    
    read_loop: LOOP
        FETCH cur_calculations INTO v_calculation_id, v_participant_id, v_gross_earned;
        IF v_done THEN
            LEAVE read_loop;
        END IF;
        
        -- Find active advances for participant
        SELECT advance_id, current_balance 
        INTO v_advance_id, v_advance_balance
        FROM royalty_advance
        WHERE participant_id = v_participant_id
        AND is_active = TRUE
        AND current_balance > 0
        AND recoupable = TRUE
        ORDER BY effective_date
        LIMIT 1;
        
        IF v_advance_id IS NOT NULL AND v_advance_balance > 0 THEN
            -- Calculate recoupment amount
            SET v_recoup_amount = LEAST(v_gross_earned, v_advance_balance);
            
            -- Update calculation with recoupment
            UPDATE royalty_calculation
            SET recoupment_applied = v_recoup_amount,
                final_payable = net_earned - v_recoup_amount
            WHERE calculation_id = v_calculation_id;
            
            -- Record recoupment
            INSERT INTO royalty_recoupment (
                advance_id,
                calculation_id,
                recoupment_date,
                gross_earnings,
                recoupable_amount,
                recouped_amount,
                balance_before,
                balance_after,
                created_by
            )
            VALUES (
                v_advance_id,
                v_calculation_id,
                CURDATE(),
                v_gross_earned,
                v_gross_earned,
                v_recoup_amount,
                v_advance_balance,
                v_advance_balance - v_recoup_amount,
                p_user_id
            );
            
            -- Update advance balance
            UPDATE royalty_advance
            SET current_balance = current_balance - v_recoup_amount,
                recouped_amount = recouped_amount + v_recoup_amount,
                modified_by = p_user_id,
                modified_date = CURRENT_TIMESTAMP
            WHERE advance_id = v_advance_id;
        END IF;
    END LOOP;
    
    CLOSE cur_calculations;
END//

-- Process payment batch
CREATE PROCEDURE sp_process_payment_batch(
    IN p_batch_id CHAR(36),
    IN p_user_id CHAR(36)
)
BEGIN
    DECLARE v_error_message VARCHAR(500);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        GET DIAGNOSTICS CONDITION 1 v_error_message = MESSAGE_TEXT;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_message;
    END;

    START TRANSACTION;

    -- Update batch status
    UPDATE payment_batch
    SET status = 'PROCESSING',
        started_date = CURRENT_TIMESTAMP,
        modified_by = p_user_id
    WHERE batch_id = p_batch_id;

    -- Create payment details for distributions
    INSERT INTO payment_detail (
        batch_id,
        participant_id,
        payment_amount,
        currency_code,
        payment_method,
        payment_method_id,
        net_paid_amount,
        created_by,
        modified_by
    )
    SELECT 
        p_batch_id,
        rd.participant_id,
        SUM(rd.distributed_amount),
        rd.currency_code,
        rp.payment_method,
        pm.method_id,
        SUM(rd.distributed_amount) - (SUM(rd.distributed_amount) * 0.025), -- 2.5% fee example
        p_user_id,
        p_user_id
    FROM royalty_distribution rd
    JOIN royalty_participant rp ON rd.participant_id = rp.participant_id
    JOIN payment_method pm ON rp.participant_id = pm.participant_id AND pm.is_primary = TRUE
    WHERE rd.payment_status = 'PENDING'
    AND rd.distributed_amount >= rp.minimum_payment_threshold
    AND NOT rd.is_held
    GROUP BY rd.participant_id, rd.currency_code, rp.payment_method, pm.method_id;

    -- Update distribution status
    UPDATE royalty_distribution rd
    JOIN payment_detail pd ON rd.participant_id = pd.participant_id
    SET rd.payment_status = 'SCHEDULED',
        rd.payment_batch_id = p_batch_id,
        rd.modified_by = p_user_id,
        rd.modified_date = CURRENT_TIMESTAMP
    WHERE pd.batch_id = p_batch_id
    AND rd.payment_status = 'PENDING';

    -- Update batch totals
    UPDATE payment_batch
    SET total_payments = (
            SELECT COUNT(*) FROM payment_detail WHERE batch_id = p_batch_id
        ),
        total_amount = (
            SELECT SUM(payment_amount) FROM payment_detail WHERE batch_id = p_batch_id
        ),
        status = 'COMPLETED',
        completed_date = CURRENT_TIMESTAMP,
        modified_by = p_user_id
    WHERE batch_id = p_batch_id;

    -- Audit log
    INSERT INTO financial_audit_trail (
        event_type,
        event_category,
        entity_type,
        entity_id,
        operation,
        financial_impact,
        currency_code,
        user_id,
        user_role
    )
    SELECT 
        'PAYMENT_BATCH_PROCESSED',
        'PAYMENT',
        'BATCH',
        p_batch_id,
        'EXECUTE',
        total_amount,
        currency_code,
        p_user_id,
        'SYSTEM'
    FROM payment_batch
    WHERE batch_id = p_batch_id;

    COMMIT;
END//

DELIMITER ;

-- =====================================================
-- 14.10 VIEWS
-- =====================================================

-- Royalty summary by participant
CREATE VIEW vw_royalty_summary AS
SELECT 
    rp.participant_id,
    rp.entity_name AS participant_name,
    rp.participant_type,
    COUNT(DISTINCT rc.calculation_id) AS total_calculations,
    SUM(rc.gross_earned) AS total_gross_earned,
    SUM(rc.net_earned) AS total_net_earned,
    SUM(rc.final_payable) AS total_payable,
    SUM(rd.distributed_amount) AS total_distributed,
    SUM(CASE WHEN rd.payment_status = 'PAID' THEN rd.distributed_amount ELSE 0 END) AS total_paid,
    SUM(CASE WHEN rd.is_held THEN rd.distributed_amount ELSE 0 END) AS total_held,
    COUNT(DISTINCT ra.advance_id) AS active_advances,
    SUM(ra.current_balance) AS total_advance_balance
FROM royalty_participant rp
LEFT JOIN royalty_calculation rc ON rp.participant_id = rc.participant_id
LEFT JOIN royalty_distribution rd ON rc.calculation_id = rd.calculation_id
LEFT JOIN royalty_advance ra ON rp.participant_id = ra.participant_id AND ra.is_active = TRUE
WHERE rp.deleted_date IS NULL
GROUP BY rp.participant_id, rp.entity_name, rp.participant_type;

-- Outstanding payments view
CREATE VIEW vw_outstanding_payments AS
SELECT 
    rp.participant_id,
    rp.entity_name AS participant_name,
    rp.payment_method,
    SUM(rd.distributed_amount) AS total_outstanding,
    rd.currency_code,
    COUNT(DISTINCT rd.distribution_id) AS payment_count,
    MIN(rc.calculated_date) AS oldest_payment_date,
    MAX(rc.calculated_date) AS newest_payment_date,
    DATEDIFF(CURDATE(), MIN(rc.calculated_date)) AS days_outstanding
FROM royalty_distribution rd
JOIN royalty_participant rp ON rd.participant_id = rp.participant_id
JOIN royalty_calculation rc ON rd.calculation_id = rc.calculation_id
WHERE rd.payment_status IN ('PENDING', 'SCHEDULED')
AND NOT rd.is_held
GROUP BY rp.participant_id, rp.entity_name, rp.payment_method, rd.currency_code
HAVING total_outstanding >= rp.minimum_payment_threshold;

-- =====================================================
-- 14.11 TRIGGERS
-- =====================================================

-- Audit trigger for royalty calculations
DELIMITER //
CREATE TRIGGER trg_royalty_calculation_audit
AFTER UPDATE ON royalty_calculation
FOR EACH ROW
BEGIN
    IF OLD.final_payable != NEW.final_payable THEN
        INSERT INTO royalty_calculation_log (
            calculation_id,
            log_type,
            previous_gross,
            previous_net,
            previous_payable,
            new_gross,
            new_net,
            new_payable,
            change_reason,
            created_by
        )
        VALUES (
            NEW.calculation_id,
            'RECALCULATION',
            OLD.gross_earned,
            OLD.net_earned,
            OLD.final_payable,
            NEW.gross_earned,
            NEW.net_earned,
            NEW.final_payable,
            'System recalculation',
            NEW.modified_by
        );
    END IF;
END//

-- Validate payment threshold
CREATE TRIGGER trg_payment_detail_validate
BEFORE INSERT ON payment_detail
FOR EACH ROW
BEGIN
    DECLARE v_threshold DECIMAL(19,4);
    
    SELECT minimum_payment_threshold INTO v_threshold
    FROM royalty_participant
    WHERE participant_id = NEW.participant_id;
    
    IF NEW.payment_amount < v_threshold THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Payment amount below minimum threshold';
    END IF;
END//

DELIMITER ;

-- =====================================================
-- 14.12 INDEXES FOR PERFORMANCE
-- =====================================================

-- Additional performance indexes
CREATE INDEX idx_royalty_detail_perf ON royalty_detail(statement_id, match_status, transaction_date);
CREATE INDEX idx_calculation_perf ON royalty_calculation(detail_id, participant_id, final_payable);
CREATE INDEX idx_distribution_perf ON royalty_distribution(participant_id, payment_status, distributed_amount);
CREATE INDEX idx_payment_perf ON payment_detail(batch_id, status, transaction_date);

-- =====================================================
-- 14.14 GRANTS
-- =====================================================

-- Grant appropriate permissions (adjust as needed)
-- GRANT SELECT, INSERT, UPDATE ON astro_rights.* TO 'astro_app'@'%';
-- GRANT EXECUTE ON PROCEDURE astro_rights.sp_calculate_royalties TO 'astro_app'@'%';
-- GRANT EXECUTE ON PROCEDURE astro_rights.sp_process_payment_batch TO 'astro_app'@'%';

-- =====================================================
-- Section 15: DSP INTEGRATION TABLES
-- =====================================================

-- =====================================================
-- ACCOUNT MANAGEMENT TABLES
-- =====================================================

-- DSP Account Management
CREATE TABLE dsp_account (
    account_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    organization_id INT UNSIGNED NOT NULL,
    dsp_code VARCHAR(50) NOT NULL,
    account_name VARCHAR(255) NOT NULL,
    account_type VARCHAR(50) NOT NULL, -- 'artist', 'label', 'distributor', 'aggregator'
    account_identifier VARCHAR(255), -- Platform-specific ID
    account_status VARCHAR(50) NOT NULL DEFAULT 'pending', -- 'pending', 'active', 'suspended', 'terminated'
    
    -- Authentication
    auth_method VARCHAR(50) NOT NULL, -- 'oauth2', 'api_key', 'jwt', 'basic', 'custom'
    auth_endpoint VARCHAR(500),
    token_endpoint VARCHAR(500),
    refresh_token_expiry DATETIME(6),
    
    -- Configuration
    api_version VARCHAR(20),
    base_url VARCHAR(500),
    webhook_url VARCHAR(500),
    rate_limit_requests INT UNSIGNED DEFAULT 100,
    rate_limit_window_seconds INT UNSIGNED DEFAULT 60,
    
    -- Features
    supports_delivery BOOLEAN DEFAULT TRUE,
    supports_analytics BOOLEAN DEFAULT TRUE,
    supports_realtime BOOLEAN DEFAULT FALSE,
    supports_content_id BOOLEAN DEFAULT FALSE,
    supports_bulk_operations BOOLEAN DEFAULT TRUE,
    max_batch_size INT UNSIGNED DEFAULT 100,
    
    -- Metadata
    territory_restrictions JSON, -- ["US", "CA", "GB"]
    content_types JSON, -- ["audio", "video", "shorts"]
    required_metadata JSON, -- Platform-specific requirements
    
    -- Compliance
    terms_accepted_date DATETIME(6),
    terms_version VARCHAR(20),
    data_retention_days INT UNSIGNED DEFAULT 365,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    last_sync_at DATETIME(6),
    next_sync_at DATETIME(6),
    
    -- Audit
    created_by INT UNSIGNED,
    updated_by INT UNSIGNED,
    notes TEXT,
    
    FOREIGN KEY (organization_id) REFERENCES organization(organization_id),
    FOREIGN KEY (created_by) REFERENCES user(user_id),
    FOREIGN KEY (updated_by) REFERENCES user(user_id),
    
    INDEX idx_dsp_account_org (organization_id),
    INDEX idx_dsp_account_code (dsp_code),
    INDEX idx_dsp_account_status (account_status),
    INDEX idx_dsp_account_sync (next_sync_at),
    UNIQUE KEY uk_dsp_account (organization_id, dsp_code, account_identifier)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- DSP API Credentials (Encrypted Storage)
CREATE TABLE dsp_api_credential (
    credential_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    credential_type VARCHAR(50) NOT NULL, -- 'access_token', 'refresh_token', 'api_key', 'client_secret', 'private_key'
    credential_name VARCHAR(100) NOT NULL,
    
    -- Encrypted Values (AES-256)
    credential_value_encrypted VARBINARY(2048) NOT NULL, -- AES-256 encrypted
    credential_salt BINARY(32) NOT NULL, -- Salt for encryption
    encryption_version INT DEFAULT 1,
    
    -- Token Management
    expires_at DATETIME(6),
    issued_at DATETIME(6),
    scope VARCHAR(500),
    token_type VARCHAR(50), -- 'Bearer', 'Basic', etc.
    
    -- Security
    last_rotated_at DATETIME(6),
    rotation_required BOOLEAN DEFAULT FALSE,
    rotation_frequency_days INT UNSIGNED,
    allowed_ips JSON, -- IP whitelist if applicable
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    is_compromised BOOLEAN DEFAULT FALSE,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id) ON DELETE CASCADE,
    
    INDEX idx_credential_account (account_id),
    INDEX idx_credential_type (credential_type),
    INDEX idx_credential_expires (expires_at),
    INDEX idx_credential_rotation (rotation_required, last_rotated_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- CONTENT DELIVERY TABLES
-- =====================================================

-- DSP Delivery Batches
CREATE TABLE dsp_delivery (
    delivery_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    delivery_type VARCHAR(50) NOT NULL, -- 'new_release', 'update', 'takedown', 'metadata_only'
    delivery_status VARCHAR(50) NOT NULL DEFAULT 'preparing', -- 'preparing', 'validating', 'queued', 'delivering', 'completed', 'failed', 'partial'
    
    -- Delivery Details
    batch_identifier VARCHAR(255) UNIQUE,
    total_items INT UNSIGNED NOT NULL DEFAULT 0,
    successful_items INT UNSIGNED DEFAULT 0,
    failed_items INT UNSIGNED DEFAULT 0,
    
    -- Scheduling
    scheduled_at DATETIME(6),
    started_at DATETIME(6),
    completed_at DATETIME(6),
    retry_count INT UNSIGNED DEFAULT 0,
    max_retries INT UNSIGNED DEFAULT 3,
    
    -- Delivery Configuration
    priority VARCHAR(20) DEFAULT 'normal', -- 'urgent', 'high', 'normal', 'low'
    delivery_format VARCHAR(50) NOT NULL, -- 'ddex_ern', 'api_json', 'csv', 'custom'
    compression_type VARCHAR(20), -- 'zip', 'gzip', 'none'
    
    -- Validation
    pre_validation_status VARCHAR(50),
    pre_validation_errors JSON,
    post_validation_status VARCHAR(50),
    post_validation_errors JSON,
    
    -- Response
    dsp_response_code VARCHAR(50),
    dsp_response_message TEXT,
    dsp_transaction_id VARCHAR(255),
    dsp_receipt_url VARCHAR(500),
    
    -- Metadata
    delivery_metadata JSON, -- Platform-specific metadata
    error_summary JSON,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Audit
    created_by INT UNSIGNED,
    approved_by INT UNSIGNED,
    approved_at DATETIME(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (created_by) REFERENCES user(user_id),
    FOREIGN KEY (approved_by) REFERENCES user(user_id),
    
    INDEX idx_delivery_account (account_id),
    INDEX idx_delivery_status (delivery_status),
    INDEX idx_delivery_scheduled (scheduled_at),
    INDEX idx_delivery_batch (batch_identifier),
    INDEX idx_delivery_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- DSP Delivery Items
CREATE TABLE dsp_delivery_item (
    item_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    delivery_id INT UNSIGNED NOT NULL,
    asset_id INT UNSIGNED NOT NULL,
    item_type VARCHAR(50) NOT NULL, -- 'track', 'album', 'video', 'artwork'
    item_status VARCHAR(50) NOT NULL DEFAULT 'pending', -- 'pending', 'processing', 'delivered', 'failed', 'rejected'
    
    -- Platform Identifiers
    dsp_item_id VARCHAR(255), -- ID assigned by DSP
    dsp_uri VARCHAR(500), -- Spotify URI, Apple ID, etc.
    isrc VARCHAR(12),
    upc VARCHAR(20),
    
    -- Delivery Details
    action VARCHAR(50) NOT NULL, -- 'create', 'update', 'delete', 'metadata_update'
    sequence_number INT UNSIGNED,
    
    -- Territories
    territories JSON, -- ["US", "CA", "GB"] or ["WORLD"]
    excluded_territories JSON,
    
    -- Dates
    release_date DATE,
    availability_start DATETIME(6),
    availability_end DATETIME(6),
    pre_order_date DATE,
    
    -- Pricing
    pricing_tier VARCHAR(50),
    wholesale_price DECIMAL(10,4),
    suggested_retail_price DECIMAL(10,4),
    currency_code CHAR(3),
    
    -- Content Details
    file_location VARCHAR(500),
    file_size_bytes BIGINT UNSIGNED,
    file_checksum VARCHAR(64),
    duration_ms INT UNSIGNED,
    
    -- Validation
    validation_status VARCHAR(50),
    validation_errors JSON,
    dsp_validation_result JSON,
    
    -- Response
    dsp_response_code VARCHAR(50),
    dsp_response_message TEXT,
    delivered_at DATETIME(6),
    
    -- Metadata
    item_metadata JSON, -- Platform-specific metadata
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (delivery_id) REFERENCES dsp_delivery(delivery_id) ON DELETE CASCADE,
    FOREIGN KEY (asset_id) REFERENCES catalog_asset(asset_id),
    
    INDEX idx_delivery_item_delivery (delivery_id),
    INDEX idx_delivery_item_asset (asset_id),
    INDEX idx_delivery_item_status (item_status),
    INDEX idx_delivery_item_isrc (isrc),
    INDEX idx_delivery_item_dsp_id (dsp_item_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- DSP Delivery Validation
CREATE TABLE dsp_delivery_validation (
    validation_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    delivery_id INT UNSIGNED NOT NULL,
    item_id INT UNSIGNED,
    validation_type VARCHAR(50) NOT NULL, -- 'metadata', 'audio_quality', 'artwork', 'rights', 'territory'
    validation_level VARCHAR(20) NOT NULL, -- 'error', 'warning', 'info'
    
    -- Validation Details
    field_name VARCHAR(100),
    field_value TEXT,
    expected_value TEXT,
    validation_rule VARCHAR(255),
    
    -- Error Information
    error_code VARCHAR(50),
    error_message TEXT,
    suggestion TEXT,
    is_blocking BOOLEAN DEFAULT FALSE,
    
    -- Resolution
    resolution_status VARCHAR(50) DEFAULT 'unresolved', -- 'unresolved', 'ignored', 'fixed', 'accepted'
    resolved_by INT UNSIGNED,
    resolved_at DATETIME(6),
    resolution_note TEXT,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (delivery_id) REFERENCES dsp_delivery(delivery_id) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES dsp_delivery_item(item_id) ON DELETE CASCADE,
    FOREIGN KEY (resolved_by) REFERENCES user(user_id),
    
    INDEX idx_validation_delivery (delivery_id),
    INDEX idx_validation_item (item_id),
    INDEX idx_validation_type (validation_type),
    INDEX idx_validation_level (validation_level),
    INDEX idx_validation_status (resolution_status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- CONFIGURATION TABLES
-- =====================================================

-- DSP Territory Settings
CREATE TABLE dsp_territory_setting (
    setting_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    territory_code CHAR(2) NOT NULL,
    
    -- Availability
    is_available BOOLEAN DEFAULT TRUE,
    availability_start DATE,
    availability_end DATE,
    
    -- Pricing
    pricing_tier VARCHAR(50),
    wholesale_price_adjustment DECIMAL(5,2), -- Percentage adjustment
    retail_price_adjustment DECIMAL(5,2),
    minimum_price DECIMAL(10,2),
    maximum_price DECIMAL(10,2),
    
    -- Content Restrictions
    explicit_content_allowed BOOLEAN DEFAULT TRUE,
    content_rating VARCHAR(20),
    required_certifications JSON,
    
    -- Tax Information
    tax_rate DECIMAL(5,2),
    tax_type VARCHAR(50), -- 'VAT', 'GST', 'sales_tax'
    tax_inclusive BOOLEAN DEFAULT FALSE,
    
    -- Local Requirements
    local_metadata_required JSON,
    translation_required BOOLEAN DEFAULT FALSE,
    censorship_rules JSON,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id) ON DELETE CASCADE,
    
    UNIQUE KEY uk_territory_setting (account_id, territory_code),
    INDEX idx_territory_setting_account (account_id),
    INDEX idx_territory_setting_territory (territory_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- DSP Pricing Tiers
CREATE TABLE dsp_pricing_tier (
    tier_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    tier_code VARCHAR(50) NOT NULL,
    tier_name VARCHAR(100) NOT NULL,
    tier_type VARCHAR(50) NOT NULL, -- 'subscription', 'ad_supported', 'premium', 'family', 'student'
    
    -- Pricing
    base_rate DECIMAL(10,6) NOT NULL, -- Per stream rate
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    minimum_payout DECIMAL(10,2),
    
    -- Rate Adjustments
    territory_multiplier JSON, -- {"US": 1.0, "IN": 0.1}
    length_multiplier JSON, -- {"0-30": 0, "31-60": 0.5, "61+": 1.0}
    engagement_multiplier JSON, -- {"skip_before_30": 0, "full_play": 1.0}
    
    -- Features
    offline_enabled BOOLEAN DEFAULT FALSE,
    high_quality_enabled BOOLEAN DEFAULT FALSE,
    exclusive_content_enabled BOOLEAN DEFAULT FALSE,
    
    -- Validity
    effective_date DATE NOT NULL,
    expiry_date DATE,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id) ON DELETE CASCADE,
    
    UNIQUE KEY uk_pricing_tier (account_id, tier_code, effective_date),
    INDEX idx_pricing_tier_account (account_id),
    INDEX idx_pricing_tier_dates (effective_date, expiry_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- DSP Payout Rates History
CREATE TABLE dsp_payout_rate (
    rate_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    dsp_code VARCHAR(50) NOT NULL,
    rate_type VARCHAR(50) NOT NULL, -- 'stream', 'download', 'video_view', 'tiktok_creation'
    
    -- Rate Information
    base_rate DECIMAL(10,8) NOT NULL,
    currency_code CHAR(3) NOT NULL DEFAULT 'USD',
    
    -- Breakdown
    territory_code CHAR(2),
    subscription_tier VARCHAR(50),
    content_type VARCHAR(50), -- 'audio', 'video', 'podcast'
    
    -- Factors
    platform_share DECIMAL(5,2), -- Platform's percentage
    distributor_share DECIMAL(5,2), -- If using distributor
    
    -- Period
    period_start DATE NOT NULL,
    period_end DATE NOT NULL,
    
    -- Source
    source VARCHAR(100), -- 'official', 'estimated', 'crowdsourced'
    source_url VARCHAR(500),
    confidence_score DECIMAL(3,2), -- 0.00 to 1.00
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    INDEX idx_payout_rate_dsp (dsp_code),
    INDEX idx_payout_rate_period (period_start, period_end),
    INDEX idx_payout_rate_territory (territory_code),
    INDEX idx_payout_rate_type (rate_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- REPORT PROCESSING TABLES
-- =====================================================

-- DSP Reports
CREATE TABLE dsp_report (
    report_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    report_type VARCHAR(50) NOT NULL, -- 'streaming', 'sales', 'trending', 'playlist', 'analytics'
    report_format VARCHAR(20) NOT NULL, -- 'csv', 'json', 'xml', 'xlsx', 'txt'
    
    -- Report Details
    report_period_start DATE NOT NULL,
    report_period_end DATE NOT NULL,
    report_generated_at DATETIME(6),
    report_received_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    -- File Information
    file_name VARCHAR(255) NOT NULL,
    file_location VARCHAR(500) NOT NULL,
    file_size_bytes BIGINT UNSIGNED,
    file_checksum VARCHAR(64),
    
    -- Processing
    processing_status VARCHAR(50) NOT NULL DEFAULT 'pending', -- 'pending', 'parsing', 'validating', 'processed', 'failed'
    processing_started_at DATETIME(6),
    processing_completed_at DATETIME(6),
    
    -- Statistics
    total_rows INT UNSIGNED,
    processed_rows INT UNSIGNED DEFAULT 0,
    error_rows INT UNSIGNED DEFAULT 0,
    duplicate_rows INT UNSIGNED DEFAULT 0,
    
    -- Parsing
    parser_id INT UNSIGNED,
    parser_version VARCHAR(20),
    parsing_errors JSON,
    
    -- Financial Summary
    total_revenue DECIMAL(15,2),
    total_units BIGINT UNSIGNED,
    currency_code CHAR(3),
    
    -- Metadata
    report_metadata JSON,
    dsp_report_id VARCHAR(255), -- DSP's internal report ID
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (parser_id) REFERENCES dsp_report_parser(parser_id),
    
    INDEX idx_report_account (account_id),
    INDEX idx_report_type (report_type),
    INDEX idx_report_period (report_period_start, report_period_end),
    INDEX idx_report_status (processing_status),
    INDEX idx_report_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(report_period_start)) (
    PARTITION p2023 VALUES LESS THAN (2024),
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p2026 VALUES LESS THAN (2027),
    PARTITION pfuture VALUES LESS THAN MAXVALUE
);

-- DSP Report Parser Configuration
CREATE TABLE dsp_report_parser (
    parser_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    dsp_code VARCHAR(50) NOT NULL,
    report_type VARCHAR(50) NOT NULL,
    parser_name VARCHAR(100) NOT NULL,
    parser_version VARCHAR(20) NOT NULL,
    
    -- Parser Configuration
    file_format VARCHAR(20) NOT NULL, -- 'csv', 'json', 'xml', 'xlsx'
    delimiter CHAR(1) DEFAULT ',',
    enclosure CHAR(1) DEFAULT '"',
    escape_char CHAR(1) DEFAULT '\\',
    has_header BOOLEAN DEFAULT TRUE,
    encoding VARCHAR(20) DEFAULT 'UTF-8',
    
    -- Field Configuration
    date_format VARCHAR(50), -- 'YYYY-MM-DD', 'MM/DD/YYYY', etc.
    number_format VARCHAR(20), -- 'decimal_point', 'decimal_comma'
    
    -- Processing Rules
    skip_rows INT UNSIGNED DEFAULT 0,
    skip_footer_rows INT UNSIGNED DEFAULT 0,
    validation_rules JSON,
    transformation_rules JSON,
    
    -- Column Mapping (stored in separate table)
    is_active BOOLEAN DEFAULT TRUE,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    UNIQUE KEY uk_report_parser (dsp_code, report_type, parser_version),
    INDEX idx_parser_dsp (dsp_code),
    INDEX idx_parser_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- DSP Field Mapping
CREATE TABLE dsp_field_mapping (
    mapping_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    parser_id INT UNSIGNED NOT NULL,
    
    -- Source Field
    source_field_name VARCHAR(100) NOT NULL,
    source_field_type VARCHAR(50) NOT NULL, -- 'string', 'number', 'date', 'boolean'
    source_field_position INT UNSIGNED, -- For CSV column position
    
    -- Target Field
    target_table VARCHAR(100) NOT NULL,
    target_field VARCHAR(100) NOT NULL,
    target_field_type VARCHAR(50) NOT NULL,
    
    -- Transformation
    transformation_type VARCHAR(50), -- 'direct', 'lookup', 'calculate', 'concatenate'
    transformation_rule TEXT, -- SQL expression or function
    
    -- Validation
    is_required BOOLEAN DEFAULT FALSE,
    default_value VARCHAR(255),
    validation_regex VARCHAR(255),
    
    -- Mapping
    lookup_table VARCHAR(100),
    lookup_key VARCHAR(100),
    lookup_value VARCHAR(100),
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    
    FOREIGN KEY (parser_id) REFERENCES dsp_report_parser(parser_id) ON DELETE CASCADE,
    
    INDEX idx_field_mapping_parser (parser_id),
    INDEX idx_field_mapping_source (source_field_name),
    INDEX idx_field_mapping_target (target_table, target_field)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- PLATFORM-SPECIFIC TABLES
-- =====================================================

-- Spotify for Artists Data
CREATE TABLE spotify_for_artists (
    spotify_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    asset_id INT UNSIGNED NOT NULL,
    
    -- Spotify Identifiers
    spotify_uri VARCHAR(100) NOT NULL,
    spotify_track_id VARCHAR(50) NOT NULL,
    
    -- Streaming Metrics
    total_streams BIGINT UNSIGNED DEFAULT 0,
    unique_listeners INT UNSIGNED DEFAULT 0,
    average_stream_duration_ms INT UNSIGNED,
    skip_rate DECIMAL(5,2),
    
    -- Playlist Data
    playlist_adds INT UNSIGNED DEFAULT 0,
    playlist_reach BIGINT UNSIGNED DEFAULT 0,
    editorial_playlist_adds INT UNSIGNED DEFAULT 0,
    algorithmic_playlist_adds INT UNSIGNED DEFAULT 0,
    
    -- Discovery
    discovery_mode_streams BIGINT UNSIGNED DEFAULT 0,
    radio_streams BIGINT UNSIGNED DEFAULT 0,
    search_streams BIGINT UNSIGNED DEFAULT 0,
    collection_streams BIGINT UNSIGNED DEFAULT 0,
    
    -- Demographics
    top_cities JSON, -- [{"city": "New York", "streams": 50000}]
    top_countries JSON, -- [{"country": "US", "streams": 1000000}]
    age_ranges JSON, -- {"18-24": 30, "25-34": 40}
    gender_split JSON, -- {"male": 55, "female": 43, "other": 2}
    
    -- Engagement
    saves INT UNSIGNED DEFAULT 0,
    save_rate DECIMAL(5,2),
    completion_rate DECIMAL(5,2),
    
    -- Canvas & Features
    canvas_enabled BOOLEAN DEFAULT FALSE,
    canvas_views INT UNSIGNED DEFAULT 0,
    lyrics_views INT UNSIGNED DEFAULT 0,
    
    -- Period
    report_date DATE NOT NULL,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES catalog_asset(asset_id),
    
    UNIQUE KEY uk_spotify_daily (spotify_track_id, report_date),
    INDEX idx_spotify_account (account_id),
    INDEX idx_spotify_asset (asset_id),
    INDEX idx_spotify_date (report_date),
    INDEX idx_spotify_streams (total_streams)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(report_date)) (
    PARTITION p2023 VALUES LESS THAN (2024),
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p2026 VALUES LESS THAN (2027),
    PARTITION pfuture VALUES LESS THAN MAXVALUE
);

-- Apple Music Analytics
CREATE TABLE apple_music_analytics (
    apple_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    asset_id INT UNSIGNED NOT NULL,
    
    -- Apple Identifiers
    apple_music_id VARCHAR(50) NOT NULL,
    adam_id VARCHAR(50),
    
    -- Performance Metrics
    plays INT UNSIGNED DEFAULT 0,
    total_listening_time_minutes BIGINT UNSIGNED DEFAULT 0,
    average_play_duration_seconds INT UNSIGNED,
    
    -- Discovery
    browse_plays INT UNSIGNED DEFAULT 0,
    radio_plays INT UNSIGNED DEFAULT 0,
    playlist_plays INT UNSIGNED DEFAULT 0,
    library_plays INT UNSIGNED DEFAULT 0,
    
    -- Shazam Integration
    shazam_discoveries INT UNSIGNED DEFAULT 0,
    shazam_plays INT UNSIGNED DEFAULT 0,
    
    -- Engagement
    loves INT UNSIGNED DEFAULT 0,
    downloads INT UNSIGNED DEFAULT 0,
    airplay_plays INT UNSIGNED DEFAULT 0,
    
    -- Geographic Data
    top_cities JSON,
    top_countries JSON,
    
    -- Device Breakdown
    device_types JSON, -- {"iPhone": 60, "Mac": 20, "HomePod": 20}
    
    -- Milestones
    milestones_reached JSON, -- ["1M_plays", "top_100_chart"]
    
    -- Period
    report_date DATE NOT NULL,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES catalog_asset(asset_id),
    
    UNIQUE KEY uk_apple_daily (apple_music_id, report_date),
    INDEX idx_apple_account (account_id),
    INDEX idx_apple_asset (asset_id),
    INDEX idx_apple_date (report_date),
    INDEX idx_apple_plays (plays)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(report_date)) (
    PARTITION p2023 VALUES LESS THAN (2024),
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p2026 VALUES LESS THAN (2027),
    PARTITION pfuture VALUES LESS THAN MAXVALUE
);

-- YouTube Content ID
CREATE TABLE youtube_content_id (
    youtube_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    asset_id INT UNSIGNED NOT NULL,
    
    -- YouTube Identifiers
    video_id VARCHAR(50),
    claim_id VARCHAR(100) NOT NULL,
    asset_id_youtube VARCHAR(50),
    
    -- Claim Details
    claim_type VARCHAR(50) NOT NULL, -- 'sound_recording', 'composition', 'audiovisual'
    claim_status VARCHAR(50) NOT NULL, -- 'active', 'released', 'disputed', 'inactive'
    match_type VARCHAR(50), -- 'manual', 'automatic', 'bulk'
    match_duration_seconds INT UNSIGNED,
    match_percentage DECIMAL(5,2),
    
    -- Policy
    policy_type VARCHAR(50) NOT NULL, -- 'monetize', 'track', 'block'
    territories_monetized JSON,
    territories_blocked JSON,
    territories_tracked JSON,
    
    -- Performance
    views BIGINT UNSIGNED DEFAULT 0,
    watch_time_minutes BIGINT UNSIGNED DEFAULT 0,
    estimated_revenue DECIMAL(10,2),
    ad_impressions BIGINT UNSIGNED DEFAULT 0,
    
    -- Channel Info
    channel_id VARCHAR(50),
    channel_name VARCHAR(255),
    channel_subscribers INT UNSIGNED,
    
    -- Video Details
    video_title TEXT,
    video_duration_seconds INT UNSIGNED,
    upload_date DATE,
    
    -- User Generated Content
    is_ugc BOOLEAN DEFAULT TRUE,
    is_official BOOLEAN DEFAULT FALSE,
    
    -- Period
    report_date DATE NOT NULL,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES catalog_asset(asset_id),
    
    INDEX idx_youtube_account (account_id),
    INDEX idx_youtube_asset (asset_id),
    INDEX idx_youtube_claim (claim_id),
    INDEX idx_youtube_video (video_id),
    INDEX idx_youtube_date (report_date),
    INDEX idx_youtube_revenue (estimated_revenue)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Amazon Music Data
CREATE TABLE amazon_music_data (
    amazon_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    asset_id INT UNSIGNED NOT NULL,
    
    -- Amazon Identifiers
    asin VARCHAR(50) NOT NULL,
    amazon_track_id VARCHAR(50),
    
    -- Streaming Metrics
    total_streams BIGINT UNSIGNED DEFAULT 0,
    unique_customers INT UNSIGNED DEFAULT 0,
    
    -- Service Breakdown
    unlimited_streams BIGINT UNSIGNED DEFAULT 0,
    prime_streams BIGINT UNSIGNED DEFAULT 0,
    hd_streams BIGINT UNSIGNED DEFAULT 0,
    alexa_streams BIGINT UNSIGNED DEFAULT 0,
    
    -- Engagement
    customer_actions JSON, -- {"likes": 1000, "adds_to_library": 500}
    voice_requests INT UNSIGNED DEFAULT 0,
    
    -- Discovery
    station_streams BIGINT UNSIGNED DEFAULT 0,
    playlist_streams BIGINT UNSIGNED DEFAULT 0,
    recommendation_streams BIGINT UNSIGNED DEFAULT 0,
    
    -- Geographic
    top_countries JSON,
    
    -- Period
    report_date DATE NOT NULL,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES catalog_asset(asset_id),
    
    UNIQUE KEY uk_amazon_daily (asin, report_date),
    INDEX idx_amazon_account (account_id),
    INDEX idx_amazon_asset (asset_id),
    INDEX idx_amazon_date (report_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- TikTok Sound Analytics
CREATE TABLE tiktok_sound (
    tiktok_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED NOT NULL,
    asset_id INT UNSIGNED NOT NULL,
    
    -- TikTok Identifiers
    sound_id VARCHAR(100) NOT NULL,
    sound_name VARCHAR(255),
    
    -- Usage Metrics
    total_videos INT UNSIGNED DEFAULT 0,
    total_views BIGINT UNSIGNED DEFAULT 0,
    total_likes BIGINT UNSIGNED DEFAULT 0,
    total_shares BIGINT UNSIGNED DEFAULT 0,
    total_comments BIGINT UNSIGNED DEFAULT 0,
    
    -- Creator Metrics
    unique_creators INT UNSIGNED DEFAULT 0,
    verified_creators INT UNSIGNED DEFAULT 0,
    
    -- Virality Indicators
    trending_score DECIMAL(5,2),
    growth_rate DECIMAL(10,2), -- Percentage
    peak_daily_creations INT UNSIGNED,
    
    -- Top Content
    top_videos JSON, -- [{"video_id": "123", "views": 1000000, "creator": "@user"}]
    
    -- Demographics
    creator_countries JSON,
    audience_age_ranges JSON,
    
    -- Trends
    hashtags JSON, -- Associated hashtags
    challenges JSON, -- Associated challenges
    
    -- Period
    report_date DATE NOT NULL,
    week_number INT UNSIGNED,
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES catalog_asset(asset_id),
    
    UNIQUE KEY uk_tiktok_daily (sound_id, report_date),
    INDEX idx_tiktok_account (account_id),
    INDEX idx_tiktok_asset (asset_id),
    INDEX idx_tiktok_date (report_date),
    INDEX idx_tiktok_trending (trending_score)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- MONITORING TABLES
-- =====================================================

-- DSP Error Log
CREATE TABLE dsp_error_log (
    error_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    account_id INT UNSIGNED,
    delivery_id INT UNSIGNED,
    report_id INT UNSIGNED,
    
    -- Error Classification
    error_type VARCHAR(50) NOT NULL, -- 'api_error', 'delivery_failure', 'parsing_error', 'validation_error'
    error_severity VARCHAR(20) NOT NULL, -- 'critical', 'error', 'warning', 'info'
    error_category VARCHAR(50), -- 'authentication', 'rate_limit', 'network', 'data_quality'
    
    -- Error Details
    error_code VARCHAR(50),
    error_message TEXT NOT NULL,
    error_details JSON,
    stack_trace TEXT,
    
    -- Context
    api_endpoint VARCHAR(500),
    http_status_code INT,
    request_data JSON,
    response_data JSON,
    
    -- Resolution
    is_resolved BOOLEAN DEFAULT FALSE,
    resolved_by INT UNSIGNED,
    resolved_at DATETIME(6),
    resolution_notes TEXT,
    retry_count INT UNSIGNED DEFAULT 0,
    
    -- Impact
    affected_items INT UNSIGNED,
    estimated_revenue_impact DECIMAL(10,2),
    
    -- Timestamps
    occurred_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (delivery_id) REFERENCES dsp_delivery(delivery_id),
    FOREIGN KEY (report_id) REFERENCES dsp_report(report_id),
    FOREIGN KEY (resolved_by) REFERENCES user(user_id),
    
    INDEX idx_error_account (account_id),
    INDEX idx_error_type (error_type),
    INDEX idx_error_severity (error_severity),
    INDEX idx_error_occurred (occurred_at),
    INDEX idx_error_resolved (is_resolved)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

DELIMITER //

-- Procedure to process DSP delivery
CREATE PROCEDURE sp_process_dsp_delivery(
    IN p_delivery_id INT UNSIGNED,
    OUT p_status VARCHAR(50),
    OUT p_message TEXT
)
BEGIN
    DECLARE v_account_id INT UNSIGNED;
    DECLARE v_delivery_type VARCHAR(50);
    DECLARE v_total_items INT UNSIGNED;
    DECLARE v_error_count INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_status = 'error';
        SET p_message = 'Database error occurred during delivery processing';
    END;
    
    START TRANSACTION;
    
    -- Get delivery details
    SELECT account_id, delivery_type, total_items
    INTO v_account_id, v_delivery_type, v_total_items
    FROM dsp_delivery
    WHERE delivery_id = p_delivery_id;
    
    -- Update delivery status
    UPDATE dsp_delivery
    SET delivery_status = 'delivering',
        started_at = NOW(6)
    WHERE delivery_id = p_delivery_id;
    
    -- Validate delivery items
    INSERT INTO dsp_delivery_validation (delivery_id, item_id, validation_type, validation_level, error_message)
    SELECT 
        di.delivery_id,
        di.item_id,
        'metadata',
        CASE 
            WHEN di.isrc IS NULL THEN 'error'
            WHEN di.territories IS NULL THEN 'warning'
            ELSE 'info'
        END,
        CASE 
            WHEN di.isrc IS NULL THEN 'ISRC is required for delivery'
            WHEN di.territories IS NULL THEN 'No territories specified'
            ELSE 'Validation passed'
        END
    FROM dsp_delivery_item di
    WHERE di.delivery_id = p_delivery_id;
    
    -- Count validation errors
    SELECT COUNT(*)
    INTO v_error_count
    FROM dsp_delivery_validation
    WHERE delivery_id = p_delivery_id
    AND validation_level = 'error'
    AND is_blocking = TRUE;
    
    IF v_error_count > 0 THEN
        UPDATE dsp_delivery
        SET delivery_status = 'failed',
            completed_at = NOW(6)
        WHERE delivery_id = p_delivery_id;
        
        SET p_status = 'failed';
        SET p_message = CONCAT('Delivery failed with ', v_error_count, ' blocking errors');
    ELSE
        -- Process delivery (simulate API call)
        UPDATE dsp_delivery
        SET delivery_status = 'completed',
            completed_at = NOW(6),
            successful_items = v_total_items - v_error_count
        WHERE delivery_id = p_delivery_id;
        
        -- Update item statuses
        UPDATE dsp_delivery_item
        SET item_status = 'delivered',
            delivered_at = NOW(6)
        WHERE delivery_id = p_delivery_id
        AND item_id NOT IN (
            SELECT item_id 
            FROM dsp_delivery_validation 
            WHERE validation_level = 'error' 
            AND is_blocking = TRUE
        );
        
        SET p_status = 'completed';
        SET p_message = CONCAT('Successfully delivered ', v_total_items - v_error_count, ' items');
    END IF;
    
    COMMIT;
END//

-- Procedure to aggregate streaming analytics
CREATE PROCEDURE sp_aggregate_streaming_analytics(
    IN p_report_date DATE
)
BEGIN
    DECLARE v_total_streams BIGINT DEFAULT 0;
    DECLARE v_total_revenue DECIMAL(15,2) DEFAULT 0;
    
    -- Aggregate Spotify data
    INSERT INTO analytics_daily_summary (asset_id, metric_date, metric_type, metric_value, source)
    SELECT 
        asset_id,
        report_date,
        'spotify_streams',
        total_streams,
        'spotify_for_artists'
    FROM spotify_for_artists
    WHERE report_date = p_report_date
    ON DUPLICATE KEY UPDATE
        metric_value = VALUES(metric_value),
        updated_at = NOW(6);
    
    -- Aggregate Apple Music data
    INSERT INTO analytics_daily_summary (asset_id, metric_date, metric_type, metric_value, source)
    SELECT 
        asset_id,
        report_date,
        'apple_plays',
        plays,
        'apple_music_analytics'
    FROM apple_music_analytics
    WHERE report_date = p_report_date
    ON DUPLICATE KEY UPDATE
        metric_value = VALUES(metric_value),
        updated_at = NOW(6);
    
    -- Calculate total cross-platform metrics
    SELECT 
        SUM(CASE 
            WHEN metric_type = 'spotify_streams' THEN metric_value 
            WHEN metric_type = 'apple_plays' THEN metric_value 
            ELSE 0 
        END),
        SUM(CASE 
            WHEN metric_type LIKE '%revenue%' THEN metric_value 
            ELSE 0 
        END)
    INTO v_total_streams, v_total_revenue
    FROM analytics_daily_summary
    WHERE metric_date = p_report_date;
    
    -- Log aggregation
    INSERT INTO system_log (log_type, log_message, log_data)
    VALUES (
        'analytics_aggregation',
        CONCAT('Aggregated streaming data for ', p_report_date),
        JSON_OBJECT(
            'date', p_report_date,
            'total_streams', v_total_streams,
            'total_revenue', v_total_revenue
        )
    );
END//

DELIMITER ;

-- =====================================================
-- VIEWS
-- =====================================================

-- Cross-platform streaming overview
CREATE VIEW v_streaming_overview AS
SELECT 
    ca.asset_id,
    ca.asset_title,
    ca.isrc,
    
    -- Spotify metrics
    COALESCE(s.total_streams, 0) AS spotify_streams,
    COALESCE(s.playlist_adds, 0) AS spotify_playlist_adds,
    
    -- Apple Music metrics  
    COALESCE(a.plays, 0) AS apple_plays,
    COALESCE(a.shazam_discoveries, 0) AS shazam_discoveries,
    
    -- YouTube metrics
    COALESCE(y.views, 0) AS youtube_views,
    COALESCE(y.estimated_revenue, 0) AS youtube_revenue,
    
    -- TikTok metrics
    COALESCE(t.total_videos, 0) AS tiktok_creations,
    COALESCE(t.total_views, 0) AS tiktok_views,
    
    -- Calculated metrics
    COALESCE(s.total_streams, 0) + COALESCE(a.plays, 0) AS total_streams,
    GREATEST(
        COALESCE(s.report_date, '1900-01-01'),
        COALESCE(a.report_date, '1900-01-01'),
        COALESCE(y.report_date, '1900-01-01'),
        COALESCE(t.report_date, '1900-01-01')
    ) AS last_updated
FROM catalog_asset ca
LEFT JOIN (
    SELECT asset_id, SUM(total_streams) AS total_streams, 
           SUM(playlist_adds) AS playlist_adds, MAX(report_date) AS report_date
    FROM spotify_for_artists
    GROUP BY asset_id
) s ON ca.asset_id = s.asset_id
LEFT JOIN (
    SELECT asset_id, SUM(plays) AS plays, 
           SUM(shazam_discoveries) AS shazam_discoveries, MAX(report_date) AS report_date
    FROM apple_music_analytics
    GROUP BY asset_id
) a ON ca.asset_id = a.asset_id
LEFT JOIN (
    SELECT asset_id, SUM(views) AS views, 
           SUM(estimated_revenue) AS estimated_revenue, MAX(report_date) AS report_date
    FROM youtube_content_id
    GROUP BY asset_id
) y ON ca.asset_id = y.asset_id
LEFT JOIN (
    SELECT asset_id, SUM(total_videos) AS total_videos, 
           SUM(total_views) AS total_views, MAX(report_date) AS report_date
    FROM tiktok_sound
    GROUP BY asset_id
) t ON ca.asset_id = t.asset_id;

-- DSP delivery status dashboard
CREATE VIEW v_delivery_status AS
SELECT 
    da.dsp_code,
    da.account_name,
    dd.delivery_id,
    dd.delivery_type,
    dd.delivery_status,
    dd.total_items,
    dd.successful_items,
    dd.failed_items,
    dd.scheduled_at,
    dd.completed_at,
    TIMESTAMPDIFF(MINUTE, dd.started_at, dd.completed_at) AS processing_time_minutes,
    
    -- Error summary
    (SELECT COUNT(*) FROM dsp_delivery_validation dv 
     WHERE dv.delivery_id = dd.delivery_id 
     AND dv.validation_level = 'error') AS error_count,
     
    -- Last error message
    (SELECT error_message FROM dsp_delivery_validation dv 
     WHERE dv.delivery_id = dd.delivery_id 
     AND dv.validation_level = 'error'
     ORDER BY dv.validation_id DESC LIMIT 1) AS last_error
     
FROM dsp_delivery dd
JOIN dsp_account da ON dd.account_id = da.account_id
ORDER BY dd.created_at DESC;

-- =====================================================
-- TRIGGERS
-- =====================================================

DELIMITER //

-- Trigger to update delivery statistics
CREATE TRIGGER trg_delivery_item_status_update
AFTER UPDATE ON dsp_delivery_item
FOR EACH ROW
BEGIN
    IF NEW.item_status != OLD.item_status THEN
        UPDATE dsp_delivery d
        SET 
            successful_items = (
                SELECT COUNT(*) 
                FROM dsp_delivery_item 
                WHERE delivery_id = NEW.delivery_id 
                AND item_status = 'delivered'
            ),
            failed_items = (
                SELECT COUNT(*) 
                FROM dsp_delivery_item 
                WHERE delivery_id = NEW.delivery_id 
                AND item_status IN ('failed', 'rejected')
            ),
            updated_at = NOW(6)
        WHERE delivery_id = NEW.delivery_id;
    END IF;
END//

-- Trigger to create audit log for API credential changes
CREATE TRIGGER trg_api_credential_audit
AFTER UPDATE ON dsp_api_credential
FOR EACH ROW
BEGIN
    IF NEW.credential_value_encrypted != OLD.credential_value_encrypted THEN
        INSERT INTO audit_log (
            table_name,
            record_id,
            action,
            changed_fields,
            user_id,
            ip_address,
            user_agent,
            created_at
        ) VALUES (
            'dsp_api_credential',
            NEW.credential_id,
            'credential_rotation',
            JSON_OBJECT(
                'credential_type', NEW.credential_type,
                'rotated_at', NOW(6),
                'previous_rotation', OLD.last_rotated_at
            ),
            @current_user_id,
            @current_ip_address,
            @current_user_agent,
            NOW(6)
        );
        
        -- Update rotation timestamp
        UPDATE dsp_api_credential
        SET last_rotated_at = NOW(6),
            rotation_required = FALSE
        WHERE credential_id = NEW.credential_id;
    END IF;
END//

DELIMITER ;

-- =====================================================
-- PERFORMANCE OPTIMIZATION
-- =====================================================

-- Add partitioning to large streaming tables (already included in table definitions)

-- Create summary tables for faster queries
CREATE TABLE dsp_streaming_summary_daily (
    summary_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    asset_id INT UNSIGNED NOT NULL,
    summary_date DATE NOT NULL,
    
    -- Aggregated metrics
    total_streams BIGINT UNSIGNED DEFAULT 0,
    total_revenue DECIMAL(15,2) DEFAULT 0,
    unique_platforms INT UNSIGNED DEFAULT 0,
    
    -- Platform breakdown
    platform_metrics JSON, -- {"spotify": {"streams": 1000}, "apple": {"plays": 500}}
    
    -- Calculated metrics
    average_stream_value DECIMAL(10,6),
    growth_rate DECIMAL(10,2),
    
    -- Timestamps
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (asset_id) REFERENCES catalog_asset(asset_id),
    
    UNIQUE KEY uk_summary_daily (asset_id, summary_date),
    INDEX idx_summary_date (summary_date),
    INDEX idx_summary_revenue (total_revenue)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Section 15: DSP INTEGRATION TABLES
-- =====================================================

-- =====================================================
-- ACCOUNT MANAGEMENT TABLES
-- =====================================================

-- Table: dsp_account
-- Purpose: Master table for DSP platform accounts
CREATE TABLE dsp_account (
    account_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    company_id CHAR(36) NOT NULL,
    dsp_code VARCHAR(50) NOT NULL, -- SPOTIFY, APPLE_MUSIC, YOUTUBE, etc.
    account_name VARCHAR(255) NOT NULL,
    account_type VARCHAR(50) NOT NULL, -- ARTIST, LABEL, DISTRIBUTOR, AGGREGATOR
    account_status VARCHAR(50) NOT NULL, -- ACTIVE, SUSPENDED, PENDING, INACTIVE
    platform_account_id VARCHAR(255), -- Platform's internal ID
    platform_uri VARCHAR(500), -- Platform-specific URI/URL
    
    -- Authentication
    auth_method VARCHAR(50) NOT NULL, -- OAUTH2, API_KEY, JWT, BASIC
    oauth_provider VARCHAR(255),
    
    -- Account details
    territory_scope VARCHAR(50) NOT NULL, -- GLOBAL, REGIONAL, SINGLE_TERRITORY
    supported_territories JSON, -- ["US", "GB", "JP", etc.]
    content_types JSON, -- ["MUSIC", "VIDEO", "PODCAST"]
    
    -- Configuration
    auto_deliver BOOLEAN DEFAULT TRUE,
    delivery_schedule VARCHAR(50), -- IMMEDIATE, DAILY, WEEKLY, RELEASE_DATE
    priority_level INT DEFAULT 5, -- 1-10 scale
    
    -- Platform-specific settings
    platform_settings JSON, -- Flexible platform-specific config
    feature_flags JSON, -- Enabled features per platform
    
    -- Compliance
    terms_accepted_date DATETIME,
    terms_version VARCHAR(50),
    compliance_status VARCHAR(50), -- COMPLIANT, REVIEW_NEEDED, NON_COMPLIANT
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36),
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by CHAR(36),
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at DATETIME,
    deleted_by CHAR(36),
    
    INDEX idx_company_dsp (company_id, dsp_code),
    INDEX idx_account_status (account_status),
    INDEX idx_platform_account (platform_account_id),
    FOREIGN KEY (company_id) REFERENCES companies(company_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: dsp_api_credential
-- Purpose: Secure storage of API credentials (FULLY ENCRYPTED)
CREATE TABLE dsp_api_credential (
    credential_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36) NOT NULL,
    credential_type VARCHAR(50) NOT NULL, -- ACCESS_TOKEN, REFRESH_TOKEN, API_KEY, CLIENT_SECRET
    
    -- Encrypted credential storage
    encrypted_value TEXT NOT NULL, -- AES-256 encrypted
    encryption_key_id VARCHAR(255) NOT NULL, -- Reference to key management system
    
    -- OAuth specific
    token_type VARCHAR(50), -- Bearer, MAC, etc.
    scope TEXT, -- OAuth scopes
    expires_at DATETIME,
    refresh_token_encrypted TEXT, -- AES-256 encrypted
    
    -- Key rotation
    rotation_status VARCHAR(50) DEFAULT 'CURRENT', -- CURRENT, ROTATING, EXPIRED
    rotated_from CHAR(36), -- Previous credential_id
    rotation_scheduled_at DATETIME,
    
    -- Usage tracking
    last_used_at DATETIME,
    usage_count BIGINT DEFAULT 0,
    last_response_code INT,
    
    -- Rate limiting
    rate_limit_quota INT,
    rate_limit_remaining INT,
    rate_limit_reset_at DATETIME,
    
    -- Security
    ip_whitelist JSON, -- Allowed IPs if applicable
    requires_mfa BOOLEAN DEFAULT FALSE,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36),
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    deactivated_at DATETIME,
    deactivated_reason VARCHAR(500),
    
    INDEX idx_account_type (account_id, credential_type),
    INDEX idx_expires (expires_at),
    INDEX idx_rotation (rotation_status, rotation_scheduled_at),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- CONTENT DELIVERY TABLES
-- =====================================================

-- Table: dsp_delivery
-- Purpose: Track content delivery batches to DSPs
CREATE TABLE dsp_delivery (
    delivery_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36) NOT NULL,
    delivery_type VARCHAR(50) NOT NULL, -- NEW_RELEASE, UPDATE, TAKEDOWN, REINSTATE
    delivery_status VARCHAR(50) NOT NULL, -- PENDING, VALIDATING, QUEUED, IN_PROGRESS, COMPLETED, FAILED
    
    -- Delivery details
    delivery_method VARCHAR(50) NOT NULL, -- API, SFTP, DDEX_FEED, MANUAL
    priority INT DEFAULT 5,
    scheduled_at DATETIME,
    started_at DATETIME,
    completed_at DATETIME,
    
    -- Content summary
    total_items INT DEFAULT 0,
    successful_items INT DEFAULT 0,
    failed_items INT DEFAULT 0,
    warning_items INT DEFAULT 0,
    
    -- DDEX compliance
    ddex_version VARCHAR(20), -- 4.3, 4.2, etc.
    ddex_message_id VARCHAR(255),
    ddex_profile VARCHAR(100), -- AudioAlbum, AudioSingle, etc.
    
    -- Delivery package
    package_format VARCHAR(50), -- ZIP, TAR, INDIVIDUAL
    package_size_mb DECIMAL(10,2),
    package_checksum VARCHAR(255),
    storage_location VARCHAR(500), -- S3 bucket/key
    
    -- Response tracking
    platform_response JSON,
    platform_delivery_id VARCHAR(255),
    acknowledgment_received BOOLEAN DEFAULT FALSE,
    acknowledgment_at DATETIME,
    
    -- Error handling
    retry_count INT DEFAULT 0,
    max_retries INT DEFAULT 3,
    last_error_message TEXT,
    next_retry_at DATETIME,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36),
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    notes TEXT,
    
    INDEX idx_account_status (account_id, delivery_status),
    INDEX idx_scheduled (scheduled_at, delivery_status),
    INDEX idx_platform_delivery (platform_delivery_id),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: dsp_delivery_item
-- Purpose: Individual items within a delivery batch
CREATE TABLE dsp_delivery_item (
    item_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    delivery_id CHAR(36) NOT NULL,
    asset_id CHAR(36) NOT NULL,
    item_type VARCHAR(50) NOT NULL, -- TRACK, ALBUM, VIDEO, ARTWORK
    item_status VARCHAR(50) NOT NULL, -- PENDING, PROCESSING, DELIVERED, FAILED, REJECTED
    
    -- Content identifiers
    isrc VARCHAR(20),
    upc VARCHAR(20),
    ean VARCHAR(20),
    platform_content_id VARCHAR(255), -- Platform's ID after delivery
    
    -- Delivery specifics
    action VARCHAR(50) NOT NULL, -- CREATE, UPDATE, DELETE, REINSTATE
    territories JSON, -- Specific territories for this item
    release_date DATE,
    pre_order_date DATE,
    
    -- Validation results
    validation_status VARCHAR(50), -- PASSED, FAILED, WARNING
    validation_errors JSON,
    validation_warnings JSON,
    
    -- Platform response
    platform_status VARCHAR(100),
    platform_message TEXT,
    platform_metadata JSON,
    delivered_at DATETIME,
    
    -- Content details
    file_format VARCHAR(50),
    file_size_mb DECIMAL(10,2),
    duration_ms INT,
    bitrate_kbps INT,
    sample_rate_hz INT,
    
    -- Retry handling
    retry_count INT DEFAULT 0,
    last_retry_at DATETIME,
    retry_after DATETIME,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_delivery_status (delivery_id, item_status),
    INDEX idx_asset (asset_id),
    INDEX idx_isrc (isrc),
    INDEX idx_platform_content (platform_content_id),
    FOREIGN KEY (delivery_id) REFERENCES dsp_delivery(delivery_id),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: dsp_delivery_validation
-- Purpose: Pre-delivery validation results
CREATE TABLE dsp_delivery_validation (
    validation_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    delivery_id CHAR(36) NOT NULL,
    item_id CHAR(36),
    validation_type VARCHAR(50) NOT NULL, -- METADATA, AUDIO_QUALITY, ARTWORK, RIGHTS, TERRITORY
    validation_status VARCHAR(50) NOT NULL, -- PASSED, FAILED, WARNING, SKIPPED
    
    -- Validation details
    rule_name VARCHAR(255),
    rule_description TEXT,
    field_name VARCHAR(255),
    field_value TEXT,
    expected_value TEXT,
    
    -- Severity and handling
    severity VARCHAR(50) NOT NULL, -- ERROR, WARNING, INFO
    is_blocking BOOLEAN DEFAULT FALSE,
    auto_fixable BOOLEAN DEFAULT FALSE,
    fix_applied BOOLEAN DEFAULT FALSE,
    
    -- Platform specific
    dsp_code VARCHAR(50),
    platform_requirement TEXT,
    
    -- Metadata
    validated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    validated_by VARCHAR(50), -- SYSTEM, MANUAL, DSP_API
    
    INDEX idx_delivery_validation (delivery_id, validation_status),
    INDEX idx_item_validation (item_id, validation_type),
    INDEX idx_severity (severity, is_blocking),
    FOREIGN KEY (delivery_id) REFERENCES dsp_delivery(delivery_id),
    FOREIGN KEY (item_id) REFERENCES dsp_delivery_item(item_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- CONFIGURATION TABLES
-- =====================================================

-- Table: dsp_territory_setting
-- Purpose: Territory-specific settings per DSP
CREATE TABLE dsp_territory_setting (
    setting_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    dsp_code VARCHAR(50) NOT NULL,
    territory_code VARCHAR(10) NOT NULL,
    
    -- Availability
    is_available BOOLEAN DEFAULT TRUE,
    launch_date DATE,
    sunset_date DATE,
    
    -- Pricing and currency
    default_currency VARCHAR(10),
    min_price DECIMAL(10,2),
    max_price DECIMAL(10,2),
    price_tiers JSON, -- Platform-specific price points
    
    -- Content restrictions
    explicit_content_allowed BOOLEAN DEFAULT TRUE,
    content_rating_system VARCHAR(50), -- RIAA, PEGI, USK, etc.
    required_certifications JSON,
    
    -- Tax and compliance
    tax_rate DECIMAL(5,2),
    withholding_rate DECIMAL(5,2),
    requires_tax_form BOOLEAN DEFAULT FALSE,
    tax_form_type VARCHAR(50),
    
    -- Delivery settings
    lead_time_days INT DEFAULT 5,
    pre_order_allowed BOOLEAN DEFAULT TRUE,
    max_pre_order_days INT DEFAULT 90,
    
    -- Metadata requirements
    required_metadata_fields JSON,
    language_requirements JSON,
    translation_required BOOLEAN DEFAULT FALSE,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by CHAR(36),
    
    UNIQUE KEY uk_dsp_territory (dsp_code, territory_code),
    INDEX idx_territory (territory_code),
    INDEX idx_available (is_available, dsp_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: dsp_pricing_tier
-- Purpose: Platform pricing tiers and subscription levels
CREATE TABLE dsp_pricing_tier (
    tier_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    dsp_code VARCHAR(50) NOT NULL,
    tier_name VARCHAR(100) NOT NULL,
    tier_type VARCHAR(50) NOT NULL, -- FREE, PREMIUM, FAMILY, STUDENT, HI_FI
    
    -- Pricing
    monthly_price DECIMAL(10,2),
    currency VARCHAR(10),
    billing_period VARCHAR(50), -- MONTHLY, ANNUAL, LIFETIME
    
    -- Features
    ad_supported BOOLEAN DEFAULT FALSE,
    offline_playback BOOLEAN DEFAULT TRUE,
    max_skip_count INT,
    audio_quality VARCHAR(50), -- NORMAL, HIGH, LOSSLESS, HI_RES
    max_bitrate_kbps INT,
    
    -- User limits
    max_devices INT,
    max_simultaneous_streams INT,
    family_members INT,
    
    -- Revenue share
    revenue_share_percentage DECIMAL(5,2),
    min_payout_threshold DECIMAL(10,2),
    
    -- Availability
    territories JSON, -- Where this tier is available
    launch_date DATE,
    end_date DATE,
    is_active BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_dsp_tier (dsp_code, tier_type),
    INDEX idx_active_tiers (is_active, dsp_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: dsp_payout_rate
-- Purpose: Historical and current payout rates per platform
CREATE TABLE dsp_payout_rate (
    rate_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    dsp_code VARCHAR(50) NOT NULL,
    tier_id CHAR(36),
    territory_code VARCHAR(10),
    
    -- Rate period
    effective_date DATE NOT NULL,
    end_date DATE,
    rate_type VARCHAR(50) NOT NULL, -- PER_STREAM, REVENUE_SHARE, HYBRID
    
    -- Rates
    stream_rate DECIMAL(10,8), -- Per stream rate
    revenue_share_rate DECIMAL(5,2), -- Percentage
    min_rate DECIMAL(10,8),
    max_rate DECIMAL(10,8),
    
    -- Factors
    currency VARCHAR(10) NOT NULL,
    user_type VARCHAR(50), -- FREE, PAID, FAMILY, STUDENT
    content_type VARCHAR(50), -- MUSIC, VIDEO, PODCAST
    
    -- Additional factors
    play_duration_threshold_ms INT DEFAULT 30000, -- Minimum play time
    territory_modifier DECIMAL(5,2) DEFAULT 1.00,
    time_of_day_modifier JSON, -- Peak/off-peak rates
    
    -- Source
    source VARCHAR(100), -- OFFICIAL, ESTIMATED, CALCULATED
    source_document VARCHAR(500),
    confidence_level VARCHAR(50), -- HIGH, MEDIUM, LOW
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36),
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    notes TEXT,
    
    INDEX idx_dsp_effective (dsp_code, effective_date),
    INDEX idx_territory_date (territory_code, effective_date),
    INDEX idx_current_rates (end_date, dsp_code),
    FOREIGN KEY (tier_id) REFERENCES dsp_pricing_tier(tier_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- REPORT PROCESSING TABLES
-- =====================================================

-- Table: dsp_report
-- Purpose: Reports received from DSPs
CREATE TABLE dsp_report (
    report_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36) NOT NULL,
    report_type VARCHAR(50) NOT NULL, -- STREAMING, SALES, TRENDS, PLAYLIST, DEMOGRAPHIC
    report_period_start DATE NOT NULL,
    report_period_end DATE NOT NULL,
    
    -- Report details
    report_format VARCHAR(50) NOT NULL, -- CSV, JSON, XML, EXCEL, TSV
    report_version VARCHAR(20),
    file_name VARCHAR(500),
    file_size_mb DECIMAL(10,2),
    file_checksum VARCHAR(255),
    storage_location VARCHAR(500), -- S3 location
    
    -- Processing status
    processing_status VARCHAR(50) NOT NULL, -- RECEIVED, PARSING, PROCESSED, FAILED
    parse_started_at DATETIME,
    parse_completed_at DATETIME,
    rows_total BIGINT,
    rows_processed BIGINT,
    rows_failed BIGINT,
    
    -- Financial summary
    total_streams BIGINT,
    total_revenue DECIMAL(15,2),
    currency VARCHAR(10),
    exchange_rate DECIMAL(10,6),
    
    -- Validation
    validation_status VARCHAR(50), -- VALID, INVALID, WARNINGS
    validation_errors JSON,
    checksum_verified BOOLEAN DEFAULT FALSE,
    
    -- Platform reference
    platform_report_id VARCHAR(255),
    platform_generated_at DATETIME,
    download_url TEXT,
    download_expires_at DATETIME,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    processed_by CHAR(36),
    processing_notes TEXT,
    
    INDEX idx_account_period (account_id, report_period_start, report_period_end),
    INDEX idx_processing_status (processing_status, created_at),
    INDEX idx_report_type (report_type, account_id),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: dsp_report_parser
-- Purpose: Parser configurations for each DSP/report type
CREATE TABLE dsp_report_parser (
    parser_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    dsp_code VARCHAR(50) NOT NULL,
    report_type VARCHAR(50) NOT NULL,
    parser_version VARCHAR(20) NOT NULL,
    
    -- Parser configuration
    file_format VARCHAR(50) NOT NULL,
    delimiter VARCHAR(10),
    enclosure VARCHAR(10),
    escape_char VARCHAR(10),
    encoding VARCHAR(50) DEFAULT 'UTF-8',
    
    -- Header handling
    has_header BOOLEAN DEFAULT TRUE,
    header_row_num INT DEFAULT 1,
    data_start_row INT DEFAULT 2,
    footer_rows_skip INT DEFAULT 0,
    
    -- Date parsing
    date_format VARCHAR(100), -- e.g., YYYY-MM-DD, MM/DD/YYYY
    timezone VARCHAR(50) DEFAULT 'UTC',
    
    -- Validation rules
    required_columns JSON,
    validation_rules JSON, -- Complex validation logic
    
    -- Processing logic
    preprocessing_script TEXT, -- Clean/transform before parsing
    postprocessing_script TEXT, -- Additional processing after parse
    
    -- Error handling
    error_threshold_percentage DECIMAL(5,2) DEFAULT 5.00,
    skip_on_error BOOLEAN DEFAULT TRUE,
    quarantine_failed_rows BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by CHAR(36),
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    notes TEXT,
    
    UNIQUE KEY uk_dsp_report_parser (dsp_code, report_type, parser_version),
    INDEX idx_active_parser (is_active, dsp_code, report_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: dsp_field_mapping
-- Purpose: Map DSP-specific fields to ASTRO standard fields
CREATE TABLE dsp_field_mapping (
    mapping_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    parser_id CHAR(36) NOT NULL,
    
    -- Source (DSP) field
    source_field_name VARCHAR(255) NOT NULL,
    source_field_type VARCHAR(50), -- STRING, NUMBER, DATE, BOOLEAN
    source_field_format VARCHAR(100), -- Additional format info
    
    -- Target (ASTRO) field
    target_table VARCHAR(100) NOT NULL,
    target_field VARCHAR(255) NOT NULL,
    target_field_type VARCHAR(50),
    
    -- Transformation
    transformation_type VARCHAR(50), -- DIRECT, CALCULATE, LOOKUP, CONCAT
    transformation_rule TEXT, -- SQL expression or function
    default_value VARCHAR(500),
    
    -- Validation
    is_required BOOLEAN DEFAULT FALSE,
    validation_regex VARCHAR(500),
    allowed_values JSON,
    
    -- Metadata
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_parser_mapping (parser_id, source_field_name),
    INDEX idx_target_field (target_table, target_field),
    FOREIGN KEY (parser_id) REFERENCES dsp_report_parser(parser_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- PLATFORM-SPECIFIC TABLES
-- =====================================================

-- Table: spotify_for_artists
-- Purpose: Spotify-specific analytics and features
CREATE TABLE spotify_for_artists (
    spotify_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36) NOT NULL,
    asset_id CHAR(36) NOT NULL,
    report_date DATE NOT NULL,
    
    -- Spotify identifiers
    spotify_uri VARCHAR(255),
    spotify_track_id VARCHAR(100),
    spotify_album_id VARCHAR(100),
    spotify_artist_id VARCHAR(100),
    
    -- Streaming metrics
    total_streams BIGINT DEFAULT 0,
    unique_listeners INT DEFAULT 0,
    saves INT DEFAULT 0,
    playlist_adds INT DEFAULT 0,
    
    -- Engagement metrics
    average_listen_time_ms INT,
    completion_rate DECIMAL(5,2),
    skip_rate DECIMAL(5,2),
    repeat_listens INT DEFAULT 0,
    
    -- Discovery
    discover_weekly_adds INT DEFAULT 0,
    release_radar_adds INT DEFAULT 0,
    radio_plays INT DEFAULT 0,
    algorithmic_plays INT DEFAULT 0,
    
    -- Playlist performance
    playlist_reach BIGINT DEFAULT 0,
    editorial_playlist_adds INT DEFAULT 0,
    user_playlist_adds INT DEFAULT 0,
    top_playlists JSON, -- [{name, followers, position, streams}]
    
    -- Demographics
    top_cities JSON, -- [{city, country, listeners, streams}]
    age_ranges JSON, -- [{range, percentage}]
    gender_split JSON, -- {male: %, female: %, other: %}
    
    -- Viral metrics
    viral_chart_position INT,
    viral_chart_country VARCHAR(10),
    social_shares INT DEFAULT 0,
    
    -- Canvas and features
    canvas_enabled BOOLEAN DEFAULT FALSE,
    canvas_views INT DEFAULT 0,
    storyline_enabled BOOLEAN DEFAULT FALSE,
    behind_the_lyrics_enabled BOOLEAN DEFAULT FALSE,
    
    -- Revenue
    estimated_revenue DECIMAL(10,2),
    premium_streams BIGINT DEFAULT 0,
    ad_supported_streams BIGINT DEFAULT 0,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_spotify_asset_date (asset_id, report_date),
    INDEX idx_account_date (account_id, report_date),
    INDEX idx_spotify_ids (spotify_track_id, spotify_artist_id),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: apple_music_analytics
-- Purpose: Apple Music for Artists data
CREATE TABLE apple_music_analytics (
    apple_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36) NOT NULL,
    asset_id CHAR(36) NOT NULL,
    report_date DATE NOT NULL,
    
    -- Apple identifiers
    apple_music_id VARCHAR(100),
    apple_album_id VARCHAR(100),
    apple_artist_id VARCHAR(100),
    upc VARCHAR(20),
    
    -- Play metrics
    total_plays BIGINT DEFAULT 0,
    unique_listeners INT DEFAULT 0,
    average_daily_listeners INT DEFAULT 0,
    total_minutes_played BIGINT DEFAULT 0,
    
    -- Engagement
    loves INT DEFAULT 0,
    dislikes INT DEFAULT 0,
    library_adds INT DEFAULT 0,
    playlist_adds INT DEFAULT 0,
    
    -- Discovery
    browse_plays BIGINT DEFAULT 0,
    radio_plays BIGINT DEFAULT 0,
    search_plays BIGINT DEFAULT 0,
    library_plays BIGINT DEFAULT 0,
    playlist_plays BIGINT DEFAULT 0,
    
    -- Shazam integration
    shazam_count INT DEFAULT 0,
    shazam_cities JSON, -- Top cities from Shazam
    
    -- Geographic data
    top_countries JSON, -- [{country, plays, listeners}]
    top_cities JSON, -- [{city, state, country, plays}]
    
    -- Device breakdown
    iphone_plays BIGINT DEFAULT 0,
    ipad_plays BIGINT DEFAULT 0,
    mac_plays BIGINT DEFAULT 0,
    apple_tv_plays BIGINT DEFAULT 0,
    homepod_plays BIGINT DEFAULT 0,
    carplay_plays BIGINT DEFAULT 0,
    
    -- Features
    lyrics_views INT DEFAULT 0,
    music_video_views INT DEFAULT 0,
    
    -- Revenue
    estimated_revenue DECIMAL(10,2),
    downloads INT DEFAULT 0,
    download_revenue DECIMAL(10,2),
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_apple_asset_date (asset_id, report_date),
    INDEX idx_account_date (account_id, report_date),
    INDEX idx_apple_ids (apple_music_id, apple_artist_id),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: youtube_content_id
-- Purpose: YouTube Content ID claims and analytics
CREATE TABLE youtube_content_id (
    youtube_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36) NOT NULL,
    asset_id CHAR(36) NOT NULL,
    
    -- YouTube identifiers
    youtube_asset_id VARCHAR(100),
    youtube_video_id VARCHAR(100),
    claim_id VARCHAR(100),
    channel_id VARCHAR(100),
    
    -- Claim details
    claim_type VARCHAR(50) NOT NULL, -- VISUAL, AUDIO, AUDIOVISUAL
    claim_status VARCHAR(50) NOT NULL, -- ACTIVE, RELEASED, DISPUTED, PENDING
    claim_origin VARCHAR(50), -- MANUAL, AUTOMATIC, PARTNER
    match_duration_seconds INT,
    match_percentage DECIMAL(5,2),
    
    -- Content details
    video_title VARCHAR(500),
    video_duration_seconds INT,
    upload_date DATE,
    channel_name VARCHAR(255),
    channel_subscribers BIGINT,
    
    -- Policy
    policy_type VARCHAR(50), -- MONETIZE, TRACK, BLOCK
    territory_policy JSON, -- Different policies per territory
    
    -- Performance metrics
    views BIGINT DEFAULT 0,
    watch_time_hours BIGINT DEFAULT 0,
    estimated_revenue DECIMAL(10,2),
    ad_revenue DECIMAL(10,2),
    youtube_premium_revenue DECIMAL(10,2),
    
    -- Engagement
    likes INT DEFAULT 0,
    dislikes INT DEFAULT 0,
    comments INT DEFAULT 0,
    shares INT DEFAULT 0,
    
    -- Geographic data
    top_countries JSON,
    territory_views JSON,
    
    -- Dispute handling
    dispute_status VARCHAR(50),
    dispute_reason TEXT,
    dispute_filed_at DATETIME,
    dispute_resolved_at DATETIME,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    last_checked_at DATETIME,
    
    INDEX idx_account_asset (account_id, asset_id),
    INDEX idx_claim_status (claim_status, policy_type),
    INDEX idx_youtube_ids (youtube_video_id, claim_id),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: amazon_music_data
-- Purpose: Amazon Music for Artists metrics
CREATE TABLE amazon_music_data (
    amazon_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36) NOT NULL,
    asset_id CHAR(36) NOT NULL,
    report_date DATE NOT NULL,
    
    -- Amazon identifiers
    asin VARCHAR(100), -- Amazon Standard Identification Number
    amazon_track_id VARCHAR(100),
    amazon_album_id VARCHAR(100),
    
    -- Streaming metrics
    total_streams BIGINT DEFAULT 0,
    unique_customers INT DEFAULT 0,
    prime_streams BIGINT DEFAULT 0,
    unlimited_streams BIGINT DEFAULT 0,
    hd_streams BIGINT DEFAULT 0,
    
    -- Engagement
    library_adds INT DEFAULT 0,
    playlist_adds INT DEFAULT 0,
    station_adds INT DEFAULT 0,
    
    -- Voice requests
    alexa_requests INT DEFAULT 0,
    voice_initiated_streams INT DEFAULT 0,
    top_voice_queries JSON,
    
    -- Discovery
    recommendation_streams BIGINT DEFAULT 0,
    search_streams BIGINT DEFAULT 0,
    browse_streams BIGINT DEFAULT 0,
    
    -- Geographic
    top_countries JSON,
    top_cities JSON,
    
    -- Device breakdown
    echo_streams BIGINT DEFAULT 0,
    mobile_streams BIGINT DEFAULT 0,
    web_streams BIGINT DEFAULT 0,
    fire_tv_streams BIGINT DEFAULT 0,
    
    -- Revenue
    estimated_revenue DECIMAL(10,2),
    digital_sales INT DEFAULT 0,
    digital_sales_revenue DECIMAL(10,2),
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    UNIQUE KEY uk_amazon_asset_date (asset_id, report_date),
    INDEX idx_account_date (account_id, report_date),
    INDEX idx_asin (asin),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: tiktok_sound
-- Purpose: TikTok sound usage and virality metrics
CREATE TABLE tiktok_sound (
    tiktok_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36) NOT NULL,
    asset_id CHAR(36) NOT NULL,
    
    -- TikTok identifiers
    sound_id VARCHAR(100),
    sound_name VARCHAR(500),
    isrc VARCHAR(20),
    
    -- Usage metrics
    total_videos BIGINT DEFAULT 0,
    total_views BIGINT DEFAULT 0,
    total_likes BIGINT DEFAULT 0,
    total_shares BIGINT DEFAULT 0,
    total_comments BIGINT DEFAULT 0,
    
    -- Creator metrics
    unique_creators INT DEFAULT 0,
    verified_creators INT DEFAULT 0,
    top_creators JSON, -- [{username, followers, video_views}]
    
    -- Viral metrics
    trending_position INT,
    trending_country VARCHAR(10),
    viral_coefficient DECIMAL(5,2), -- Growth rate
    peak_daily_videos INT,
    peak_date DATE,
    
    -- Content analysis
    top_hashtags JSON,
    content_categories JSON,
    average_video_duration_seconds INT,
    
    -- Geographic distribution
    top_countries JSON,
    territory_breakdown JSON,
    
    -- Engagement rates
    average_completion_rate DECIMAL(5,2),
    average_loop_count DECIMAL(5,2),
    engagement_rate DECIMAL(5,2),
    
    -- UGC rights
    ugc_policy VARCHAR(50), -- ALLOWED, RESTRICTED, BLOCKED
    commercial_use_allowed BOOLEAN DEFAULT TRUE,
    
    -- Revenue
    estimated_revenue DECIMAL(10,2),
    creator_fund_eligible BOOLEAN DEFAULT FALSE,
    
    -- Temporal data
    first_use_date DATE,
    last_use_date DATE,
    days_trending INT DEFAULT 0,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    last_synced_at DATETIME,
    
    INDEX idx_account_asset (account_id, asset_id),
    INDEX idx_sound_id (sound_id),
    INDEX idx_trending (trending_position, trending_country),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- MONITORING TABLES
-- =====================================================

-- Table: dsp_error_log
-- Purpose: Log API errors, delivery failures, and parsing issues
CREATE TABLE dsp_error_log (
    error_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    account_id CHAR(36),
    error_type VARCHAR(50) NOT NULL, -- API_ERROR, DELIVERY_FAILURE, PARSE_ERROR, AUTH_ERROR
    error_source VARCHAR(100) NOT NULL, -- API endpoint or process name
    
    -- Error details
    error_code VARCHAR(100),
    error_message TEXT,
    error_details JSON,
    stack_trace TEXT,
    
    -- Context
    request_id VARCHAR(255),
    delivery_id CHAR(36),
    report_id CHAR(36),
    api_endpoint VARCHAR(500),
    http_method VARCHAR(20),
    
    -- Request/Response
    request_headers JSON,
    request_body TEXT,
    response_code INT,
    response_headers JSON,
    response_body TEXT,
    
    -- Timing
    occurred_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    request_duration_ms INT,
    
    -- Resolution
    is_resolved BOOLEAN DEFAULT FALSE,
    resolved_at DATETIME,
    resolved_by CHAR(36),
    resolution_notes TEXT,
    
    -- Impact
    severity VARCHAR(50) DEFAULT 'MEDIUM', -- LOW, MEDIUM, HIGH, CRITICAL
    affected_items INT DEFAULT 0,
    requires_manual_intervention BOOLEAN DEFAULT FALSE,
    
    -- Retry information
    retry_count INT DEFAULT 0,
    is_retryable BOOLEAN DEFAULT TRUE,
    next_retry_at DATETIME,
    
    -- Metadata
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    environment VARCHAR(50), -- PRODUCTION, STAGING, DEVELOPMENT
    server_id VARCHAR(100),
    
    INDEX idx_account_errors (account_id, error_type, occurred_at),
    INDEX idx_unresolved (is_resolved, severity, occurred_at),
    INDEX idx_error_source (error_source, error_type),
    INDEX idx_delivery_errors (delivery_id),
    INDEX idx_report_errors (report_id),
    FOREIGN KEY (account_id) REFERENCES dsp_account(account_id),
    FOREIGN KEY (delivery_id) REFERENCES dsp_delivery(delivery_id),
    FOREIGN KEY (report_id) REFERENCES dsp_report(report_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- INITIAL CONFIGURATION DATA
-- =====================================================

-- Insert DSP configurations
INSERT INTO dsp_territory_setting (dsp_code, territory_code, is_available, default_currency, lead_time_days, pre_order_allowed, max_pre_order_days, required_metadata_fields) VALUES
-- Spotify
('SPOTIFY', 'US', TRUE, 'USD', 5, TRUE, 90, '["title", "artist", "isrc", "language", "genre", "release_date"]'),
('SPOTIFY', 'GB', TRUE, 'GBP', 5, TRUE, 90, '["title", "artist", "isrc", "language", "genre", "release_date"]'),
('SPOTIFY', 'JP', TRUE, 'JPY', 7, TRUE, 60, '["title", "artist", "isrc", "language", "genre", "release_date", "romanized_title"]'),
-- Apple Music
('APPLE_MUSIC', 'US', TRUE, 'USD', 7, TRUE, 365, '["title", "artist", "isrc", "upc", "language", "genre", "release_date", "copyright"]'),
('APPLE_MUSIC', 'CN', TRUE, 'CNY', 10, TRUE, 90, '["title", "artist", "isrc", "upc", "language", "genre", "release_date", "copyright", "censorship_cert"]'),
-- YouTube Music
('YOUTUBE_MUSIC', 'US', TRUE, 'USD', 3, FALSE, 0, '["title", "artist", "isrc", "language", "genre"]'),
('YOUTUBE_MUSIC', 'IN', TRUE, 'INR', 3, FALSE, 0, '["title", "artist", "isrc", "language", "genre", "content_rating"]');

-- Insert pricing tiers
INSERT INTO dsp_pricing_tier (dsp_code, tier_name, tier_type, monthly_price, currency, ad_supported, audio_quality, max_bitrate_kbps, revenue_share_percentage) VALUES
-- Spotify tiers
('SPOTIFY', 'Spotify Free', 'FREE', 0.00, 'USD', TRUE, 'NORMAL', 160, 65.00),
('SPOTIFY', 'Spotify Premium', 'PREMIUM', 9.99, 'USD', FALSE, 'HIGH', 320, 70.00),
('SPOTIFY', 'Spotify Family', 'FAMILY', 14.99, 'USD', FALSE, 'HIGH', 320, 70.00),
-- Apple Music tiers
('APPLE_MUSIC', 'Individual', 'PREMIUM', 9.99, 'USD', FALSE, 'LOSSLESS', 1411, 71.50),
('APPLE_MUSIC', 'Family', 'FAMILY', 14.99, 'USD', FALSE, 'LOSSLESS', 1411, 71.50),
-- YouTube Music tiers
('YOUTUBE_MUSIC', 'Free', 'FREE', 0.00, 'USD', TRUE, 'NORMAL', 128, 55.00),
('YOUTUBE_MUSIC', 'Premium', 'PREMIUM', 9.99, 'USD', FALSE, 'HIGH', 256, 68.00);

-- Insert payout rates
INSERT INTO dsp_payout_rate (dsp_code, territory_code, effective_date, rate_type, stream_rate, currency, user_type, source) VALUES
-- Spotify rates
('SPOTIFY', 'US', '2025-01-01', 'PER_STREAM', 0.003000, 'USD', 'PAID', 'ESTIMATED'),
('SPOTIFY', 'US', '2025-01-01', 'PER_STREAM', 0.001200, 'USD', 'FREE', 'ESTIMATED'),
-- Apple Music rates
('APPLE_MUSIC', 'US', '2025-01-01', 'PER_STREAM', 0.007500, 'USD', 'PAID', 'OFFICIAL'),
-- YouTube Music rates
('YOUTUBE_MUSIC', 'US', '2025-01-01', 'PER_STREAM', 0.000800, 'USD', 'FREE', 'ESTIMATED'),
('YOUTUBE_MUSIC', 'US', '2025-01-01', 'PER_STREAM', 0.005000, 'USD', 'PAID', 'ESTIMATED');

-- Insert report parsers
INSERT INTO dsp_report_parser (dsp_code, report_type, parser_version, file_format, delimiter, has_header, date_format, required_columns) VALUES
('SPOTIFY', 'STREAMING', '2.0', 'CSV', ',', TRUE, 'YYYY-MM-DD', '["ISRC", "Track Name", "Artist", "Streams", "Country", "Date"]'),
('APPLE_MUSIC', 'TRENDS', '1.0', 'TSV', '\t', TRUE, 'MM/DD/YYYY', '["Song_ID", "Song_Name", "Artist_Name", "Plays", "Territory", "Date"]'),
('YOUTUBE_MUSIC', 'ANALYTICS', '3.1', 'JSON', NULL, FALSE, 'ISO8601', '["video_id", "asset_id", "views", "watch_time", "estimated_revenue"]');

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

DELIMITER //

-- Procedure: Process DSP delivery
CREATE PROCEDURE sp_process_dsp_delivery(
    IN p_delivery_id CHAR(36)
)
BEGIN
    DECLARE v_account_id CHAR(36);
    DECLARE v_dsp_code VARCHAR(50);
    DECLARE v_item_count INT;
    DECLARE v_validated_count INT;
    
    -- Get delivery details
    SELECT d.account_id, da.dsp_code, 
           COUNT(DISTINCT di.item_id) as item_count
    INTO v_account_id, v_dsp_code, v_item_count
    FROM dsp_delivery d
    JOIN dsp_account da ON d.account_id = da.account_id
    LEFT JOIN dsp_delivery_item di ON d.delivery_id = di.delivery_id
    WHERE d.delivery_id = p_delivery_id
    GROUP BY d.account_id, da.dsp_code;
    
    -- Start transaction
    START TRANSACTION;
    
    -- Update delivery status
    UPDATE dsp_delivery 
    SET delivery_status = 'VALIDATING',
        started_at = NOW(),
        total_items = v_item_count
    WHERE delivery_id = p_delivery_id;
    
    -- Run validation rules
    INSERT INTO dsp_delivery_validation (
        delivery_id, item_id, validation_type, validation_status,
        rule_name, severity, dsp_code
    )
    SELECT 
        di.delivery_id,
        di.item_id,
        'METADATA',
        CASE 
            WHEN di.isrc IS NULL OR di.isrc = '' THEN 'FAILED'
            WHEN LENGTH(di.isrc) != 12 THEN 'WARNING'
            ELSE 'PASSED'
        END,
        'ISRC Validation',
        CASE 
            WHEN di.isrc IS NULL OR di.isrc = '' THEN 'ERROR'
            ELSE 'WARNING'
        END,
        v_dsp_code
    FROM dsp_delivery_item di
    WHERE di.delivery_id = p_delivery_id;
    
    -- Check validation results
    SELECT COUNT(*) INTO v_validated_count
    FROM dsp_delivery_validation
    WHERE delivery_id = p_delivery_id
    AND validation_status = 'FAILED'
    AND is_blocking = TRUE;
    
    -- Update delivery status based on validation
    IF v_validated_count > 0 THEN
        UPDATE dsp_delivery
        SET delivery_status = 'FAILED',
            completed_at = NOW(),
            failed_items = v_validated_count
        WHERE delivery_id = p_delivery_id;
    ELSE
        UPDATE dsp_delivery
        SET delivery_status = 'QUEUED'
        WHERE delivery_id = p_delivery_id;
        
        -- Queue for actual delivery
        -- This would trigger the delivery process
    END IF;
    
    COMMIT;
END//

-- Procedure: Aggregate streaming analytics
CREATE PROCEDURE sp_aggregate_streaming_analytics(
    IN p_date DATE
)
BEGIN
    DECLARE v_total_streams BIGINT DEFAULT 0;
    DECLARE v_total_revenue DECIMAL(15,2) DEFAULT 0;
    
    -- Aggregate Spotify data
    INSERT INTO analytics_daily_summary (
        date, platform, metric_type, metric_value, asset_count
    )
    SELECT 
        p_date,
        'SPOTIFY',
        'TOTAL_STREAMS',
        SUM(total_streams),
        COUNT(DISTINCT asset_id)
    FROM spotify_for_artists
    WHERE report_date = p_date
    GROUP BY report_date;
    
    -- Aggregate Apple Music data
    INSERT INTO analytics_daily_summary (
        date, platform, metric_type, metric_value, asset_count
    )
    SELECT 
        p_date,
        'APPLE_MUSIC',
        'TOTAL_PLAYS',
        SUM(total_plays),
        COUNT(DISTINCT asset_id)
    FROM apple_music_analytics
    WHERE report_date = p_date
    GROUP BY report_date;
    
    -- Calculate cross-platform totals
    SELECT 
        COALESCE(SUM(s.total_streams), 0) + 
        COALESCE(SUM(a.total_plays), 0),
        COALESCE(SUM(s.estimated_revenue), 0) + 
        COALESCE(SUM(a.estimated_revenue), 0)
    INTO v_total_streams, v_total_revenue
    FROM spotify_for_artists s
    FULL OUTER JOIN apple_music_analytics a 
        ON s.asset_id = a.asset_id 
        AND s.report_date = a.report_date
    WHERE s.report_date = p_date OR a.report_date = p_date;
    
    -- Log summary
    INSERT INTO platform_analytics_log (
        log_date, total_streams, total_revenue, platforms_processed
    ) VALUES (
        p_date, v_total_streams, v_total_revenue, 
        JSON_ARRAY('SPOTIFY', 'APPLE_MUSIC')
    );
END//

-- Procedure: Calculate platform royalties
CREATE PROCEDURE sp_calculate_platform_royalties(
    IN p_account_id CHAR(36),
    IN p_start_date DATE,
    IN p_end_date DATE
)
BEGIN
    DECLARE v_dsp_code VARCHAR(50);
    DECLARE v_total_royalties DECIMAL(15,2) DEFAULT 0;
    DECLARE done INT DEFAULT FALSE;
    
    -- Cursor for DSP accounts
    DECLARE dsp_cursor CURSOR FOR
        SELECT DISTINCT dsp_code 
        FROM dsp_account 
        WHERE account_id = p_account_id 
        AND account_status = 'ACTIVE';
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN dsp_cursor;
    
    read_loop: LOOP
        FETCH dsp_cursor INTO v_dsp_code;
        IF done THEN
            LEAVE read_loop;
        END IF;
        
        -- Calculate royalties per platform
        IF v_dsp_code = 'SPOTIFY' THEN
            INSERT INTO royalty_calculation (
                asset_id, platform, period_start, period_end,
                stream_count, rate_per_stream, total_royalty
            )
            SELECT 
                s.asset_id,
                'SPOTIFY',
                p_start_date,
                p_end_date,
                SUM(s.total_streams),
                AVG(r.stream_rate),
                SUM(s.total_streams) * AVG(r.stream_rate)
            FROM spotify_for_artists s
            JOIN dsp_payout_rate r ON r.dsp_code = 'SPOTIFY'
            WHERE s.account_id = p_account_id
            AND s.report_date BETWEEN p_start_date AND p_end_date
            AND r.effective_date <= s.report_date
            AND (r.end_date IS NULL OR r.end_date >= s.report_date)
            GROUP BY s.asset_id;
        END IF;
        
        -- Add other platforms...
    END LOOP;
    
    CLOSE dsp_cursor;
    
    -- Calculate total royalties
    SELECT SUM(total_royalty) INTO v_total_royalties
    FROM royalty_calculation
    WHERE period_start = p_start_date
    AND period_end = p_end_date;
    
    -- Return summary
    SELECT v_total_royalties as total_platform_royalties;
END//

DELIMITER ;

-- =====================================================
-- VIEWS
-- =====================================================

-- View: Active DSP integrations summary
CREATE VIEW v_active_dsp_integrations AS
SELECT 
    da.company_id,
    da.dsp_code,
    da.account_name,
    da.account_status,
    da.territory_scope,
    COUNT(DISTINCT dd.delivery_id) as total_deliveries,
    COUNT(DISTINCT CASE WHEN dd.delivery_status = 'COMPLETED' THEN dd.delivery_id END) as successful_deliveries,
    MAX(dd.completed_at) as last_delivery,
    COUNT(DISTINCT dr.report_id) as total_reports,
    MAX(dr.report_period_end) as latest_report_date
FROM dsp_account da
LEFT JOIN dsp_delivery dd ON da.account_id = dd.account_id
LEFT JOIN dsp_report dr ON da.account_id = dr.account_id
WHERE da.is_deleted = FALSE
GROUP BY da.company_id, da.dsp_code, da.account_name, da.account_status, da.territory_scope;

-- View: Cross-platform analytics
CREATE VIEW v_cross_platform_analytics AS
SELECT 
    a.asset_id,
    a.title,
    a.isrc,
    DATE(COALESCE(s.report_date, am.report_date, y.last_checked_at)) as report_date,
    COALESCE(s.total_streams, 0) as spotify_streams,
    COALESCE(am.total_plays, 0) as apple_plays,
    COALESCE(y.views, 0) as youtube_views,
    COALESCE(t.total_videos, 0) as tiktok_videos,
    COALESCE(s.estimated_revenue, 0) + 
    COALESCE(am.estimated_revenue, 0) + 
    COALESCE(y.estimated_revenue, 0) as total_revenue
FROM assets a
LEFT JOIN spotify_for_artists s ON a.asset_id = s.asset_id
LEFT JOIN apple_music_analytics am ON a.asset_id = am.asset_id 
    AND s.report_date = am.report_date
LEFT JOIN youtube_content_id y ON a.asset_id = y.asset_id
LEFT JOIN tiktok_sound t ON a.asset_id = t.asset_id
WHERE a.asset_type = 'RECORDING';

-- View: Platform payout comparison
CREATE VIEW v_platform_payout_comparison AS
SELECT 
    dsp_code,
    territory_code,
    effective_date,
    user_type,
    stream_rate,
    currency,
    stream_rate * 1000 as rate_per_thousand,
    RANK() OVER (PARTITION BY territory_code, effective_date 
                 ORDER BY stream_rate DESC) as payout_rank
FROM dsp_payout_rate
WHERE end_date IS NULL
AND rate_type = 'PER_STREAM';

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Additional performance indexes
CREATE INDEX idx_delivery_scheduled ON dsp_delivery(scheduled_at, delivery_status);
CREATE INDEX idx_report_processing ON dsp_report(processing_status, created_at);
CREATE INDEX idx_error_recent ON dsp_error_log(occurred_at, is_resolved);
CREATE INDEX idx_spotify_date_range ON spotify_for_artists(report_date, account_id);
CREATE INDEX idx_apple_date_range ON apple_music_analytics(report_date, account_id);

-- =====================================================
-- TRIGGERS
-- =====================================================

DELIMITER //

-- Trigger: Auto-validate delivery items
CREATE TRIGGER trg_validate_delivery_item
BEFORE INSERT ON dsp_delivery_item
FOR EACH ROW
BEGIN
    -- Validate ISRC format
    IF NEW.isrc IS NOT NULL AND LENGTH(NEW.isrc) != 12 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'ISRC must be exactly 12 characters';
    END IF;
    
    -- Set default status
    IF NEW.item_status IS NULL THEN
        SET NEW.item_status = 'PENDING';
    END IF;
END//

-- Trigger: Update delivery counts
CREATE TRIGGER trg_update_delivery_counts
AFTER UPDATE ON dsp_delivery_item
FOR EACH ROW
BEGIN
    IF OLD.item_status != NEW.item_status THEN
        UPDATE dsp_delivery d
        SET 
            successful_items = (
                SELECT COUNT(*) FROM dsp_delivery_item 
                WHERE delivery_id = NEW.delivery_id 
                AND item_status = 'DELIVERED'
            ),
            failed_items = (
                SELECT COUNT(*) FROM dsp_delivery_item 
                WHERE delivery_id = NEW.delivery_id 
                AND item_status IN ('FAILED', 'REJECTED')
            )
        WHERE d.delivery_id = NEW.delivery_id;
    END IF;
END//

DELIMITER ;

-- =====================================================
-- GRANTS (Example - adjust to your security model)
-- =====================================================

-- GRANT SELECT, INSERT, UPDATE ON astro_platform.dsp_* TO 'astro_app'@'%';
-- GRANT EXECUTE ON PROCEDURE astro_platform.sp_process_dsp_delivery TO 'astro_app'@'%';
-- GRANT EXECUTE ON PROCEDURE astro_platform.sp_aggregate_streaming_analytics TO 'astro_app'@'%';

-- =====================================================
-- Section 16: USER & ACCESS TABLES
-- =====================================================

-- =====================================================
-- CORE USER MANAGEMENT
-- =====================================================

-- User table: Core user information
CREATE TABLE user (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    email VARCHAR(255) NOT NULL UNIQUE,
    email_verified BOOLEAN DEFAULT FALSE,
    username VARCHAR(100) UNIQUE,
    display_name VARCHAR(255) NOT NULL,
    
    -- Profile information
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    phone_number VARCHAR(50),
    phone_verified BOOLEAN DEFAULT FALSE,
    avatar_url VARCHAR(500),
    bio TEXT,
    
    -- Account status
    status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, ACTIVE, SUSPENDED, DEACTIVATED
    account_type VARCHAR(50) NOT NULL, -- ARTIST, SONGWRITER, PUBLISHER, LABEL, MANAGER, LAWYER, ACCOUNTANT, ADMIN
    subscription_tier VARCHAR(50) DEFAULT 'LAUNCHPAD', -- LAUNCHPAD, ASCEND, PRO, ENTERPRISE
    
    -- Security settings
    security_level VARCHAR(50) DEFAULT 'STANDARD', -- STANDARD, ENHANCED, MAXIMUM
    require_mfa BOOLEAN DEFAULT FALSE,
    password_expires_at DATETIME(6),
    last_password_change DATETIME(6),
    
    -- Compliance
    terms_accepted_at DATETIME(6),
    terms_version VARCHAR(20),
    privacy_accepted_at DATETIME(6),
    privacy_version VARCHAR(20),
    data_residency_region VARCHAR(50), -- US, EU, APAC, etc.
    age_verified BOOLEAN DEFAULT FALSE,
    age_verified_at DATETIME(6),
    
    -- Blockchain integration
    primary_wallet_address VARCHAR(255),
    wallet_verified BOOLEAN DEFAULT FALSE,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    created_by CHAR(36),
    last_login_at DATETIME(6),
    last_activity_at DATETIME(6),
    login_count INT DEFAULT 0,
    
    -- Soft delete
    deleted_at DATETIME(6),
    deleted_by CHAR(36),
    
    INDEX idx_user_email (email),
    INDEX idx_user_username (username),
    INDEX idx_user_status (status),
    INDEX idx_user_account_type (account_type),
    INDEX idx_user_last_activity (last_activity_at),
    INDEX idx_user_created_at (created_at),
    INDEX idx_user_wallet (primary_wallet_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User credentials: Secure password and MFA storage
CREATE TABLE user_credential (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    
    -- Password (hashed with Argon2id)
    password_hash VARCHAR(255),
    password_salt VARCHAR(255),
    password_algorithm VARCHAR(50) DEFAULT 'ARGON2ID',
    
    -- Multi-factor authentication (encrypted)
    mfa_secret_encrypted TEXT, -- TOTP secret, AES-256 encrypted
    mfa_backup_codes_encrypted TEXT, -- JSON array of backup codes, encrypted
    mfa_enabled BOOLEAN DEFAULT FALSE,
    mfa_method VARCHAR(50), -- TOTP, SMS, WEBAUTHN, EMAIL
    
    -- WebAuthn/FIDO2 credentials (for hardware keys)
    webauthn_credentials_encrypted TEXT, -- JSON array of registered devices
    
    -- Recovery
    recovery_email VARCHAR(255),
    recovery_email_verified BOOLEAN DEFAULT FALSE,
    recovery_phone VARCHAR(50),
    recovery_phone_verified BOOLEAN DEFAULT FALSE,
    
    -- Password history (encrypted)
    password_history_encrypted TEXT, -- JSON array of previous hashes
    
    -- Security questions (encrypted)
    security_questions_encrypted TEXT, -- JSON array of Q&A pairs
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_credential (user_id),
    INDEX idx_credential_user (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User security log: Track all security-related events
CREATE TABLE user_security_log (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36),
    event_type VARCHAR(100) NOT NULL, -- LOGIN_SUCCESS, LOGIN_FAILED, LOGOUT, PASSWORD_CHANGED, MFA_ENABLED, etc.
    event_status VARCHAR(50) NOT NULL, -- SUCCESS, FAILED, BLOCKED
    
    -- Context
    ip_address VARCHAR(45),
    user_agent TEXT,
    device_fingerprint VARCHAR(255),
    geolocation JSON, -- {country, region, city, lat, lon}
    
    -- Risk assessment
    risk_score DECIMAL(5,2), -- 0-100
    risk_factors JSON, -- [{factor: "new_location", score: 20}, ...]
    action_taken VARCHAR(100), -- ALLOWED, CHALLENGED, BLOCKED
    
    -- Additional data
    failure_reason VARCHAR(255),
    metadata JSON,
    
    -- Timestamp
    occurred_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    INDEX idx_security_log_user (user_id),
    INDEX idx_security_log_event (event_type),
    INDEX idx_security_log_occurred (occurred_at),
    INDEX idx_security_log_ip (ip_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(occurred_at)) (
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p2026 VALUES LESS THAN (2027),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- User wallet: Blockchain wallet management
CREATE TABLE user_wallet (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    
    -- Wallet details
    wallet_address VARCHAR(255) NOT NULL,
    wallet_type VARCHAR(50) NOT NULL, -- ETHEREUM, SOLANA, POLYGON, etc.
    wallet_name VARCHAR(100),
    is_primary BOOLEAN DEFAULT FALSE,
    
    -- Verification
    verified BOOLEAN DEFAULT FALSE,
    verified_at DATETIME(6),
    verification_signature TEXT,
    
    -- Permissions
    can_sign_transactions BOOLEAN DEFAULT TRUE,
    can_receive_royalties BOOLEAN DEFAULT TRUE,
    daily_transaction_limit DECIMAL(20,8),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    last_used_at DATETIME(6),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    UNIQUE KEY unique_wallet_address (wallet_address, wallet_type),
    INDEX idx_wallet_user (user_id),
    INDEX idx_wallet_address (wallet_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- ACCESS CONTROL
-- =====================================================

-- User roles: Predefined and custom roles
CREATE TABLE user_role (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    role_name VARCHAR(100) NOT NULL UNIQUE,
    role_type VARCHAR(50) NOT NULL, -- SYSTEM, ORGANIZATION, CUSTOM
    display_name VARCHAR(255) NOT NULL,
    description TEXT,
    
    -- Hierarchy
    parent_role_id CHAR(36),
    hierarchy_level INT DEFAULT 0,
    
    -- Scope
    organization_id CHAR(36), -- NULL for system roles
    is_assignable BOOLEAN DEFAULT TRUE,
    max_assignments INT, -- Maximum users who can have this role
    
    -- Music industry specific
    industry_category VARCHAR(100), -- CREATIVE, BUSINESS, ADMINISTRATIVE, TECHNICAL
    can_manage_catalog BOOLEAN DEFAULT FALSE,
    can_manage_royalties BOOLEAN DEFAULT FALSE,
    can_sign_agreements BOOLEAN DEFAULT FALSE,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    created_by CHAR(36),
    
    FOREIGN KEY (parent_role_id) REFERENCES user_role(id),
    INDEX idx_role_name (role_name),
    INDEX idx_role_type (role_type),
    INDEX idx_role_organization (organization_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User permissions: Granular permission definitions
CREATE TABLE user_permission (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    permission_name VARCHAR(200) NOT NULL UNIQUE,
    resource_type VARCHAR(100) NOT NULL, -- SONG, ALBUM, AGREEMENT, ROYALTY, USER, etc.
    action VARCHAR(100) NOT NULL, -- VIEW, CREATE, UPDATE, DELETE, APPROVE, SIGN, etc.
    
    -- Permission details
    display_name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100), -- CATALOG, FINANCIAL, ADMINISTRATIVE, SECURITY
    
    -- Constraints
    requires_mfa BOOLEAN DEFAULT FALSE,
    requires_approval BOOLEAN DEFAULT FALSE,
    risk_level VARCHAR(50) DEFAULT 'LOW', -- LOW, MEDIUM, HIGH, CRITICAL
    
    -- Scope modifiers (can be applied when granting)
    supports_conditions BOOLEAN DEFAULT TRUE, -- Can have conditions attached
    supports_delegation BOOLEAN DEFAULT TRUE, -- Can be delegated to others
    supports_time_limit BOOLEAN DEFAULT TRUE, -- Can be time-limited
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    INDEX idx_permission_name (permission_name),
    INDEX idx_permission_resource (resource_type),
    INDEX idx_permission_action (action),
    UNIQUE KEY unique_resource_action (resource_type, action)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Role-permission mapping
CREATE TABLE user_role_permission (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    role_id CHAR(36) NOT NULL,
    permission_id CHAR(36) NOT NULL,
    
    -- Conditions
    conditions JSON, -- {"territories": ["US", "CA"], "max_amount": 10000}
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    created_by CHAR(36),
    
    FOREIGN KEY (role_id) REFERENCES user_role(id) ON DELETE CASCADE,
    FOREIGN KEY (permission_id) REFERENCES user_permission(id) ON DELETE CASCADE,
    UNIQUE KEY unique_role_permission (role_id, permission_id),
    INDEX idx_role_permission_role (role_id),
    INDEX idx_role_permission_permission (permission_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User role assignments
CREATE TABLE user_role_assignment (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    role_id CHAR(36) NOT NULL,
    
    -- Scope
    organization_id CHAR(36),
    team_id CHAR(36),
    
    -- Time limits
    valid_from DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    valid_until DATETIME(6),
    
    -- Assignment details
    assigned_by CHAR(36) NOT NULL,
    assignment_reason TEXT,
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES user_role(id),
    FOREIGN KEY (assigned_by) REFERENCES user(id),
    UNIQUE KEY unique_user_role_org (user_id, role_id, organization_id),
    INDEX idx_role_assignment_user (user_id),
    INDEX idx_role_assignment_role (role_id),
    INDEX idx_role_assignment_active (is_active, valid_from, valid_until)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Direct permission grants (outside of roles)
CREATE TABLE user_permission_grant (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    permission_id CHAR(36) NOT NULL,
    
    -- Specific resource (optional)
    resource_type VARCHAR(100),
    resource_id CHAR(36),
    
    -- Conditions
    conditions JSON, -- {"territories": ["US"], "until": "2025-12-31"}
    
    -- Time limits
    valid_from DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    valid_until DATETIME(6),
    
    -- Grant details
    granted_by CHAR(36) NOT NULL,
    grant_reason TEXT,
    is_delegatable BOOLEAN DEFAULT FALSE,
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY (permission_id) REFERENCES user_permission(id),
    FOREIGN KEY (granted_by) REFERENCES user(id),
    INDEX idx_permission_grant_user (user_id),
    INDEX idx_permission_grant_permission (permission_id),
    INDEX idx_permission_grant_resource (resource_type, resource_id),
    INDEX idx_permission_grant_active (is_active, valid_from, valid_until)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- ORGANIZATION STRUCTURE
-- =====================================================

-- Organizations: Companies, labels, publishers
CREATE TABLE user_organization (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    organization_name VARCHAR(255) NOT NULL,
    organization_type VARCHAR(100) NOT NULL, -- LABEL, PUBLISHER, MANAGEMENT, DISTRIBUTOR, etc.
    legal_name VARCHAR(255),
    
    -- Details
    tax_id_encrypted TEXT, -- Encrypted tax ID
    incorporation_country VARCHAR(2),
    incorporation_date DATE,
    
    -- Contact
    primary_email VARCHAR(255),
    primary_phone VARCHAR(50),
    website_url VARCHAR(500),
    
    -- Address
    address_line1 VARCHAR(255),
    address_line2 VARCHAR(255),
    city VARCHAR(100),
    state_province VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(2),
    
    -- Subscription
    subscription_tier VARCHAR(50) DEFAULT 'PRO',
    subscription_seats INT DEFAULT 5,
    subscription_expires_at DATETIME(6),
    
    -- Settings
    settings JSON, -- Organization-specific settings
    branding JSON, -- Logo, colors, etc.
    
    -- Status
    status VARCHAR(50) DEFAULT 'ACTIVE', -- ACTIVE, SUSPENDED, DEACTIVATED
    verified BOOLEAN DEFAULT FALSE,
    verified_at DATETIME(6),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    created_by CHAR(36),
    
    INDEX idx_organization_name (organization_name),
    INDEX idx_organization_type (organization_type),
    INDEX idx_organization_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Organization members
CREATE TABLE user_organization_member (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    organization_id CHAR(36) NOT NULL,
    user_id CHAR(36) NOT NULL,
    
    -- Membership details
    member_role VARCHAR(100) DEFAULT 'MEMBER', -- OWNER, ADMIN, MEMBER, GUEST
    department VARCHAR(100),
    title VARCHAR(255),
    
    -- Permissions
    is_billing_contact BOOLEAN DEFAULT FALSE,
    is_technical_contact BOOLEAN DEFAULT FALSE,
    can_invite_members BOOLEAN DEFAULT FALSE,
    
    -- Status
    status VARCHAR(50) DEFAULT 'ACTIVE', -- ACTIVE, SUSPENDED, PENDING
    joined_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    left_at DATETIME(6),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    invited_by CHAR(36),
    
    FOREIGN KEY (organization_id) REFERENCES user_organization(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY (invited_by) REFERENCES user(id),
    UNIQUE KEY unique_org_member (organization_id, user_id),
    INDEX idx_org_member_org (organization_id),
    INDEX idx_org_member_user (user_id),
    INDEX idx_org_member_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Teams within organizations
CREATE TABLE user_team (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    organization_id CHAR(36) NOT NULL,
    team_name VARCHAR(100) NOT NULL,
    description TEXT,
    
    -- Team type
    team_type VARCHAR(100), -- A&R, MARKETING, LEGAL, FINANCE, etc.
    
    -- Settings
    settings JSON,
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    created_by CHAR(36),
    
    FOREIGN KEY (organization_id) REFERENCES user_organization(id) ON DELETE CASCADE,
    UNIQUE KEY unique_org_team (organization_id, team_name),
    INDEX idx_team_org (organization_id),
    INDEX idx_team_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Team members
CREATE TABLE user_team_member (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    team_id CHAR(36) NOT NULL,
    user_id CHAR(36) NOT NULL,
    
    -- Role in team
    team_role VARCHAR(100) DEFAULT 'MEMBER', -- LEAD, MEMBER
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    joined_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    left_at DATETIME(6),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    added_by CHAR(36),
    
    FOREIGN KEY (team_id) REFERENCES user_team(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY (added_by) REFERENCES user(id),
    UNIQUE KEY unique_team_member (team_id, user_id),
    INDEX idx_team_member_team (team_id),
    INDEX idx_team_member_user (user_id),
    INDEX idx_team_member_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User delegation: Temporary access delegation
CREATE TABLE user_delegation (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    delegator_id CHAR(36) NOT NULL, -- Person granting access
    delegate_id CHAR(36) NOT NULL, -- Person receiving access
    
    -- Delegation scope
    delegation_type VARCHAR(100) NOT NULL, -- FULL_ACCESS, LIMITED_ACCESS, VACATION_COVERAGE
    permissions JSON, -- Specific permissions being delegated
    resource_restrictions JSON, -- Limit to specific songs, agreements, etc.
    
    -- Time bounds
    valid_from DATETIME(6) NOT NULL,
    valid_until DATETIME(6) NOT NULL,
    
    -- Reason
    delegation_reason TEXT,
    
    -- Status
    status VARCHAR(50) DEFAULT 'ACTIVE', -- ACTIVE, EXPIRED, REVOKED
    revoked_at DATETIME(6),
    revoked_by CHAR(36),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (delegator_id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY (delegate_id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY (revoked_by) REFERENCES user(id),
    INDEX idx_delegation_delegator (delegator_id),
    INDEX idx_delegation_delegate (delegate_id),
    INDEX idx_delegation_active (status, valid_from, valid_until)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- AUTHENTICATION & SESSIONS
-- =====================================================

-- User sessions: Active login sessions
CREATE TABLE user_session (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    
    -- Session details
    session_token_hash VARCHAR(255) NOT NULL, -- Hashed session token
    refresh_token_hash VARCHAR(255), -- Hashed refresh token
    
    -- Device/Client info
    device_id CHAR(36),
    ip_address VARCHAR(45),
    user_agent TEXT,
    client_type VARCHAR(50), -- WEB, MOBILE_IOS, MOBILE_ANDROID, API
    client_version VARCHAR(20),
    
    -- Location
    geolocation JSON, -- {country, region, city, lat, lon}
    
    -- Session properties
    is_active BOOLEAN DEFAULT TRUE,
    expires_at DATETIME(6) NOT NULL,
    last_activity_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    activity_count INT DEFAULT 0,
    
    -- Security
    security_level VARCHAR(50), -- STANDARD, ELEVATED (after MFA)
    mfa_verified_at DATETIME(6),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    terminated_at DATETIME(6),
    termination_reason VARCHAR(100), -- LOGOUT, TIMEOUT, SECURITY, ADMIN
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    UNIQUE KEY unique_session_token (session_token_hash),
    INDEX idx_session_user (user_id),
    INDEX idx_session_active (is_active, expires_at),
    INDEX idx_session_device (device_id),
    INDEX idx_session_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User devices: Trusted devices for 2FA
CREATE TABLE user_device (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    
    -- Device identification
    device_fingerprint VARCHAR(255) NOT NULL,
    device_name VARCHAR(100),
    device_type VARCHAR(50), -- DESKTOP, MOBILE, TABLET
    
    -- Device details
    operating_system VARCHAR(100),
    browser VARCHAR(100),
    
    -- Trust status
    is_trusted BOOLEAN DEFAULT FALSE,
    trusted_at DATETIME(6),
    trust_expires_at DATETIME(6),
    
    -- Usage
    last_used_at DATETIME(6),
    usage_count INT DEFAULT 0,
    
    -- Push notifications
    push_token_encrypted TEXT, -- FCM/APNS token, encrypted
    push_enabled BOOLEAN DEFAULT FALSE,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_device (user_id, device_fingerprint),
    INDEX idx_device_user (user_id),
    INDEX idx_device_trusted (is_trusted),
    INDEX idx_device_last_used (last_used_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User invitations: Pending invitations to join
CREATE TABLE user_invitation (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    
    -- Invitation details
    email VARCHAR(255) NOT NULL,
    invitation_token_hash VARCHAR(255) NOT NULL UNIQUE,
    invitation_type VARCHAR(50) NOT NULL, -- ORGANIZATION, TEAM, COLLABORATION
    
    -- What they're being invited to
    organization_id CHAR(36),
    team_id CHAR(36),
    role_id CHAR(36),
    
    -- Invitation message
    personal_message TEXT,
    
    -- Status
    status VARCHAR(50) DEFAULT 'PENDING', -- PENDING, ACCEPTED, DECLINED, EXPIRED
    expires_at DATETIME(6) NOT NULL,
    
    -- Response
    accepted_at DATETIME(6),
    declined_at DATETIME(6),
    accepted_by_user_id CHAR(36),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    created_by CHAR(36) NOT NULL,
    
    FOREIGN KEY (organization_id) REFERENCES user_organization(id) ON DELETE CASCADE,
    FOREIGN KEY (team_id) REFERENCES user_team(id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES user_role(id),
    FOREIGN KEY (created_by) REFERENCES user(id),
    INDEX idx_invitation_email (email),
    INDEX idx_invitation_token (invitation_token_hash),
    INDEX idx_invitation_status (status),
    INDEX idx_invitation_expires (expires_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- USER EXPERIENCE
-- =====================================================

-- User preferences: UI and notification preferences
CREATE TABLE user_preference (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    
    -- UI preferences
    theme VARCHAR(50) DEFAULT 'LIGHT', -- LIGHT, DARK, AUTO
    language VARCHAR(10) DEFAULT 'en', -- ISO 639-1
    timezone VARCHAR(50) DEFAULT 'UTC',
    date_format VARCHAR(20) DEFAULT 'YYYY-MM-DD',
    currency VARCHAR(3) DEFAULT 'USD',
    
    -- Notification preferences
    email_notifications JSON, -- {"royalty_payments": true, "new_agreements": false}
    push_notifications JSON,
    sms_notifications JSON,
    in_app_notifications JSON,
    
    -- Dashboard preferences
    default_dashboard VARCHAR(100),
    dashboard_layout JSON,
    favorite_sections JSON, -- ["catalog", "royalties", "analytics"]
    
    -- Privacy preferences
    show_profile_publicly BOOLEAN DEFAULT FALSE,
    allow_collaboration_requests BOOLEAN DEFAULT TRUE,
    share_activity_status BOOLEAN DEFAULT TRUE,
    
    -- Music-specific preferences
    default_territory VARCHAR(2) DEFAULT 'US',
    preferred_pro VARCHAR(100), -- ASCAP, BMI, etc.
    catalog_view_mode VARCHAR(50) DEFAULT 'GRID', -- GRID, LIST, COMPACT
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_preference (user_id),
    INDEX idx_preference_user (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User notifications: In-app notifications
CREATE TABLE user_notification (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    
    -- Notification details
    notification_type VARCHAR(100) NOT NULL, -- ROYALTY_PAYMENT, NEW_AGREEMENT, CATALOG_UPDATE, etc.
    priority VARCHAR(50) DEFAULT 'NORMAL', -- LOW, NORMAL, HIGH, URGENT
    
    -- Content
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    action_url VARCHAR(500), -- Where to go when clicked
    
    -- Related entities
    related_entity_type VARCHAR(100),
    related_entity_id CHAR(36),
    metadata JSON, -- Additional context
    
    -- Status
    is_read BOOLEAN DEFAULT FALSE,
    read_at DATETIME(6),
    is_archived BOOLEAN DEFAULT FALSE,
    archived_at DATETIME(6),
    
    -- Delivery
    delivered_via JSON, -- ["IN_APP", "EMAIL", "PUSH"]
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    expires_at DATETIME(6),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    INDEX idx_notification_user (user_id),
    INDEX idx_notification_unread (user_id, is_read),
    INDEX idx_notification_type (notification_type),
    INDEX idx_notification_created (created_at),
    INDEX idx_notification_expires (expires_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User activity log: Track user actions for audit
CREATE TABLE user_activity_log (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    
    -- Activity details
    activity_type VARCHAR(100) NOT NULL, -- VIEWED_SONG, EDITED_AGREEMENT, DOWNLOADED_REPORT, etc.
    activity_category VARCHAR(100), -- CATALOG, FINANCIAL, ADMINISTRATIVE
    
    -- Context
    resource_type VARCHAR(100),
    resource_id CHAR(36),
    resource_name VARCHAR(255), -- For quick reference
    
    -- Action details
    action VARCHAR(100) NOT NULL, -- VIEW, CREATE, UPDATE, DELETE, DOWNLOAD, EXPORT
    previous_value JSON, -- For updates
    new_value JSON,
    
    -- Session info
    session_id CHAR(36),
    ip_address VARCHAR(45),
    user_agent TEXT,
    
    -- Result
    result_status VARCHAR(50) DEFAULT 'SUCCESS', -- SUCCESS, FAILED, PARTIAL
    error_message TEXT,
    
    -- Performance
    duration_ms INT, -- How long the action took
    
    -- Metadata
    occurred_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    INDEX idx_activity_user (user_id),
    INDEX idx_activity_type (activity_type),
    INDEX idx_activity_resource (resource_type, resource_id),
    INDEX idx_activity_occurred (occurred_at),
    INDEX idx_activity_session (session_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(occurred_at)) (
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p2026 VALUES LESS THAN (2027),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- =====================================================
-- API MANAGEMENT
-- =====================================================

-- API keys: For third-party integrations
CREATE TABLE api_key (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id CHAR(36) NOT NULL,
    organization_id CHAR(36),
    
    -- Key details
    key_name VARCHAR(100) NOT NULL,
    key_hash VARCHAR(255) NOT NULL UNIQUE, -- Hashed API key
    key_prefix VARCHAR(20) NOT NULL, -- First few chars for identification
    
    -- Type and scope
    key_type VARCHAR(50) NOT NULL, -- PERSONAL, ORGANIZATION, SERVICE
    environment VARCHAR(50) DEFAULT 'PRODUCTION', -- SANDBOX, PRODUCTION
    
    -- Status
    status VARCHAR(50) DEFAULT 'ACTIVE', -- ACTIVE, SUSPENDED, REVOKED
    expires_at DATETIME(6),
    
    -- Usage stats
    last_used_at DATETIME(6),
    usage_count BIGINT DEFAULT 0,
    
    -- Restrictions
    allowed_ips JSON, -- ["192.168.1.1", "10.0.0.0/8"]
    allowed_origins JSON, -- ["https://example.com"]
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    revoked_at DATETIME(6),
    revoked_by CHAR(36),
    
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY (organization_id) REFERENCES user_organization(id) ON DELETE CASCADE,
    INDEX idx_api_key_user (user_id),
    INDEX idx_api_key_org (organization_id),
    INDEX idx_api_key_hash (key_hash),
    INDEX idx_api_key_prefix (key_prefix),
    INDEX idx_api_key_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- API permissions: What each API key can do
CREATE TABLE api_permission (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    api_key_id CHAR(36) NOT NULL,
    
    -- Permission scope
    endpoint_pattern VARCHAR(255) NOT NULL, -- /api/v1/songs/* or specific endpoint
    http_methods JSON NOT NULL, -- ["GET", "POST"]
    
    -- Rate limits (overrides defaults)
    rate_limit_per_minute INT,
    rate_limit_per_hour INT,
    rate_limit_per_day INT,
    
    -- Restrictions
    allowed_fields JSON, -- For limiting response fields
    denied_fields JSON, -- Fields to always exclude
    max_results_per_request INT,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (api_key_id) REFERENCES api_key(id) ON DELETE CASCADE,
    INDEX idx_api_permission_key (api_key_id),
    INDEX idx_api_permission_endpoint (endpoint_pattern)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- API rate limits: Configure rate limiting
CREATE TABLE api_rate_limit (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    
    -- Scope
    limit_type VARCHAR(50) NOT NULL, -- GLOBAL, USER, ORGANIZATION, API_KEY
    limit_key VARCHAR(255), -- user_id, org_id, api_key_id, or NULL for global
    
    -- Limits
    requests_per_minute INT,
    requests_per_hour INT,
    requests_per_day INT,
    
    -- Burst allowance
    burst_size INT DEFAULT 10,
    
    -- Override for specific endpoints
    endpoint_pattern VARCHAR(255),
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    UNIQUE KEY unique_rate_limit (limit_type, limit_key, endpoint_pattern),
    INDEX idx_rate_limit_type (limit_type),
    INDEX idx_rate_limit_key (limit_key),
    INDEX idx_rate_limit_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- API usage log: Track all API calls
CREATE TABLE api_usage_log (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    api_key_id CHAR(36),
    
    -- Request details
    endpoint VARCHAR(500) NOT NULL,
    http_method VARCHAR(10) NOT NULL,
    request_headers JSON,
    request_body_size INT,
    
    -- Response details
    response_status_code INT,
    response_body_size INT,
    response_time_ms INT,
    
    -- Context
    ip_address VARCHAR(45),
    user_agent TEXT,
    
    -- Rate limiting
    rate_limit_remaining INT,
    rate_limit_reset_at DATETIME(6),
    
    -- Error info
    error_type VARCHAR(100),
    error_message TEXT,
    
    -- Metadata
    requested_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    INDEX idx_api_usage_key (api_key_id),
    INDEX idx_api_usage_endpoint (endpoint),
    INDEX idx_api_usage_requested (requested_at),
    INDEX idx_api_usage_status (response_status_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(requested_at)) (
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p2026 VALUES LESS THAN (2027),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- =====================================================
-- OAUTH INTEGRATION
-- =====================================================

-- OAuth clients: Third-party applications
CREATE TABLE oauth_client (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    
    -- Client details
    client_id VARCHAR(255) NOT NULL UNIQUE,
    client_secret_hash VARCHAR(255) NOT NULL,
    client_name VARCHAR(255) NOT NULL,
    client_type VARCHAR(50) NOT NULL, -- CONFIDENTIAL, PUBLIC
    
    -- OAuth settings
    redirect_uris JSON NOT NULL, -- ["https://app.example.com/callback"]
    allowed_grant_types JSON NOT NULL, -- ["authorization_code", "refresh_token"]
    allowed_scopes JSON NOT NULL, -- ["read:catalog", "write:royalties"]
    
    -- Client info
    logo_url VARCHAR(500),
    homepage_url VARCHAR(500),
    privacy_policy_url VARCHAR(500),
    terms_of_service_url VARCHAR(500),
    
    -- Ownership
    owner_user_id CHAR(36),
    owner_organization_id CHAR(36),
    
    -- Status
    status VARCHAR(50) DEFAULT 'ACTIVE', -- ACTIVE, SUSPENDED, REVOKED
    verified BOOLEAN DEFAULT FALSE,
    
    -- Usage stats
    active_users INT DEFAULT 0,
    total_authorizations BIGINT DEFAULT 0,
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (owner_user_id) REFERENCES user(id),
    FOREIGN KEY (owner_organization_id) REFERENCES user_organization(id),
    INDEX idx_oauth_client_id (client_id),
    INDEX idx_oauth_client_owner_user (owner_user_id),
    INDEX idx_oauth_client_owner_org (owner_organization_id),
    INDEX idx_oauth_client_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- OAuth tokens: Access and refresh tokens
CREATE TABLE oauth_token (
    id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    
    -- Token details
    access_token_hash VARCHAR(255) NOT NULL UNIQUE,
    refresh_token_hash VARCHAR(255) UNIQUE,
    token_type VARCHAR(50) DEFAULT 'Bearer',
    
    -- Associations
    client_id CHAR(36) NOT NULL,
    user_id CHAR(36) NOT NULL,
    
    -- Scope and permissions
    granted_scopes JSON NOT NULL, -- ["read:catalog", "write:royalties"]
    
    -- Expiration
    access_token_expires_at DATETIME(6) NOT NULL,
    refresh_token_expires_at DATETIME(6),
    
    -- Usage
    last_used_at DATETIME(6),
    usage_count INT DEFAULT 0,
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    revoked_at DATETIME(6),
    revocation_reason VARCHAR(100),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    FOREIGN KEY (client_id) REFERENCES oauth_client(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
    INDEX idx_oauth_token_access (access_token_hash),
    INDEX idx_oauth_token_refresh (refresh_token_hash),
    INDEX idx_oauth_token_client (client_id),
    INDEX idx_oauth_token_user (user_id),
    INDEX idx_oauth_token_active (is_active, access_token_expires_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

DELIMITER $$

-- Authenticate user and create session
CREATE PROCEDURE sp_authenticate_user(
    IN p_email VARCHAR(255),
    IN p_password VARCHAR(255),
    IN p_ip_address VARCHAR(45),
    IN p_user_agent TEXT,
    IN p_device_fingerprint VARCHAR(255),
    OUT p_user_id CHAR(36),
    OUT p_session_token VARCHAR(255),
    OUT p_requires_mfa BOOLEAN
)
BEGIN
    DECLARE v_user_id CHAR(36);
    DECLARE v_password_hash VARCHAR(255);
    DECLARE v_user_status VARCHAR(50);
    DECLARE v_mfa_enabled BOOLEAN;
    DECLARE v_login_attempts INT DEFAULT 0;
    DECLARE v_last_failed_login DATETIME(6);
    
    -- Get user details
    SELECT u.id, uc.password_hash, u.status, uc.mfa_enabled
    INTO v_user_id, v_password_hash, v_user_status, v_mfa_enabled
    FROM user u
    JOIN user_credential uc ON u.id = uc.user_id
    WHERE u.email = p_email
    AND u.deleted_at IS NULL;
    
    -- Check if user exists and is active
    IF v_user_id IS NULL THEN
        -- Log failed attempt
        INSERT INTO user_security_log (user_id, event_type, event_status, ip_address, user_agent, failure_reason)
        VALUES (NULL, 'LOGIN_FAILED', 'FAILED', p_ip_address, p_user_agent, 'USER_NOT_FOUND');
        
        SET p_user_id = NULL;
        SET p_session_token = NULL;
        SET p_requires_mfa = FALSE;
        
    ELSEIF v_user_status != 'ACTIVE' THEN
        -- Log failed attempt
        INSERT INTO user_security_log (user_id, event_type, event_status, ip_address, user_agent, failure_reason)
        VALUES (v_user_id, 'LOGIN_FAILED', 'FAILED', p_ip_address, p_user_agent, 'USER_NOT_ACTIVE');
        
        SET p_user_id = NULL;
        SET p_session_token = NULL;
        SET p_requires_mfa = FALSE;
        
    -- TODO: Verify password hash using application logic (Argon2)
    -- For now, assuming password verification happens in application
    
    ELSE
        -- Generate session token (in real implementation, use secure random)
        SET p_session_token = UUID();
        
        -- Create session
        INSERT INTO user_session (
            user_id, 
            session_token_hash, 
            ip_address, 
            user_agent, 
            device_id,
            expires_at,
            client_type
        )
        VALUES (
            v_user_id,
            SHA2(p_session_token, 256),
            p_ip_address,
            p_user_agent,
            (SELECT id FROM user_device WHERE user_id = v_user_id AND device_fingerprint = p_device_fingerprint),
            DATE_ADD(NOW(6), INTERVAL 24 HOUR),
            'WEB'
        );
        
        -- Update last login
        UPDATE user 
        SET last_login_at = NOW(6), 
            last_activity_at = NOW(6),
            login_count = login_count + 1
        WHERE id = v_user_id;
        
        -- Log successful login
        INSERT INTO user_security_log (user_id, event_type, event_status, ip_address, user_agent)
        VALUES (v_user_id, 'LOGIN_SUCCESS', 'SUCCESS', p_ip_address, p_user_agent);
        
        SET p_user_id = v_user_id;
        SET p_requires_mfa = v_mfa_enabled;
    END IF;
END$$

-- Check user permissions
CREATE PROCEDURE sp_check_user_permission(
    IN p_user_id CHAR(36),
    IN p_resource_type VARCHAR(100),
    IN p_action VARCHAR(100),
    IN p_resource_id CHAR(36),
    OUT p_has_permission BOOLEAN
)
BEGIN
    DECLARE v_permission_count INT DEFAULT 0;
    
    -- Check direct permission grants
    SELECT COUNT(*) INTO v_permission_count
    FROM user_permission_grant upg
    JOIN user_permission up ON upg.permission_id = up.id
    WHERE upg.user_id = p_user_id
    AND up.resource_type = p_resource_type
    AND up.action = p_action
    AND upg.is_active = TRUE
    AND (upg.valid_from IS NULL OR upg.valid_from <= NOW(6))
    AND (upg.valid_until IS NULL OR upg.valid_until >= NOW(6))
    AND (upg.resource_id IS NULL OR upg.resource_id = p_resource_id);
    
    IF v_permission_count > 0 THEN
        SET p_has_permission = TRUE;
    ELSE
        -- Check role-based permissions
        SELECT COUNT(*) INTO v_permission_count
        FROM user_role_assignment ura
        JOIN user_role_permission urp ON ura.role_id = urp.role_id
        JOIN user_permission up ON urp.permission_id = up.id
        WHERE ura.user_id = p_user_id
        AND up.resource_type = p_resource_type
        AND up.action = p_action
        AND ura.is_active = TRUE
        AND (ura.valid_from IS NULL OR ura.valid_from <= NOW(6))
        AND (ura.valid_until IS NULL OR ura.valid_until >= NOW(6));
        
        IF v_permission_count > 0 THEN
            SET p_has_permission = TRUE;
        ELSE
            -- Check delegated permissions
            SELECT COUNT(*) INTO v_permission_count
            FROM user_delegation ud
            WHERE ud.delegate_id = p_user_id
            AND ud.status = 'ACTIVE'
            AND ud.valid_from <= NOW(6)
            AND ud.valid_until >= NOW(6)
            AND JSON_CONTAINS(ud.permissions, JSON_OBJECT('resource_type', p_resource_type, 'action', p_action));
            
            SET p_has_permission = (v_permission_count > 0);
        END IF;
    END IF;
END$$

-- Create organization with owner
CREATE PROCEDURE sp_create_organization(
    IN p_organization_name VARCHAR(255),
    IN p_organization_type VARCHAR(100),
    IN p_owner_user_id CHAR(36),
    OUT p_organization_id CHAR(36)
)
BEGIN
    DECLARE v_org_id CHAR(36);
    DECLARE v_admin_role_id CHAR(36);
    
    -- Create organization
    SET v_org_id = UUID();
    
    INSERT INTO user_organization (
        id,
        organization_name,
        organization_type,
        created_by,
        status
    )
    VALUES (
        v_org_id,
        p_organization_name,
        p_organization_type,
        p_owner_user_id,
        'ACTIVE'
    );
    
    -- Add owner as member
    INSERT INTO user_organization_member (
        organization_id,
        user_id,
        member_role,
        is_billing_contact,
        is_technical_contact,
        can_invite_members,
        invited_by
    )
    VALUES (
        v_org_id,
        p_owner_user_id,
        'OWNER',
        TRUE,
        TRUE,
        TRUE,
        p_owner_user_id
    );
    
    -- Create organization admin role
    SET v_admin_role_id = UUID();
    
    INSERT INTO user_role (
        id,
        role_name,
        role_type,
        display_name,
        organization_id,
        can_manage_catalog,
        can_manage_royalties,
        can_sign_agreements
    )
    VALUES (
        v_admin_role_id,
        CONCAT('org_admin_', v_org_id),
        'ORGANIZATION',
        'Organization Administrator',
        v_org_id,
        TRUE,
        TRUE,
        TRUE
    );
    
    -- Assign admin role to owner
    INSERT INTO user_role_assignment (
        user_id,
        role_id,
        organization_id,
        assigned_by
    )
    VALUES (
        p_owner_user_id,
        v_admin_role_id,
        v_org_id,
        p_owner_user_id
    );
    
    SET p_organization_id = v_org_id;
END$$

DELIMITER ;

-- =====================================================
-- VIEWS
-- =====================================================

-- View: Active user sessions with details
CREATE VIEW v_active_user_sessions AS
SELECT 
    s.id AS session_id,
    u.id AS user_id,
    u.email,
    u.display_name,
    u.account_type,
    s.ip_address,
    s.client_type,
    s.created_at AS session_start,
    s.last_activity_at,
    s.expires_at,
    s.security_level,
    d.device_name,
    d.device_type,
    d.is_trusted AS trusted_device
FROM user_session s
JOIN user u ON s.user_id = u.id
LEFT JOIN user_device d ON s.device_id = d.id
WHERE s.is_active = TRUE
AND s.expires_at > NOW(6);

-- View: User permissions summary
CREATE VIEW v_user_permissions AS
SELECT DISTINCT
    u.id AS user_id,
    u.email,
    u.display_name,
    p.resource_type,
    p.action,
    p.display_name AS permission_name,
    'ROLE' AS permission_source,
    r.role_name,
    ura.organization_id
FROM user u
JOIN user_role_assignment ura ON u.id = ura.user_id
JOIN user_role r ON ura.role_id = r.id
JOIN user_role_permission urp ON r.id = urp.role_id
JOIN user_permission p ON urp.permission_id = p.id
WHERE ura.is_active = TRUE
AND (ura.valid_from IS NULL OR ura.valid_from <= NOW(6))
AND (ura.valid_until IS NULL OR ura.valid_until >= NOW(6))

UNION

SELECT DISTINCT
    u.id AS user_id,
    u.email,
    u.display_name,
    p.resource_type,
    p.action,
    p.display_name AS permission_name,
    'DIRECT' AS permission_source,
    NULL AS role_name,
    NULL AS organization_id
FROM user u
JOIN user_permission_grant upg ON u.id = upg.user_id
JOIN user_permission p ON upg.permission_id = p.id
WHERE upg.is_active = TRUE
AND (upg.valid_from IS NULL OR upg.valid_from <= NOW(6))
AND (upg.valid_until IS NULL OR upg.valid_until >= NOW(6));

-- View: Organization member summary
CREATE VIEW v_organization_members AS
SELECT 
    o.id AS organization_id,
    o.organization_name,
    o.organization_type,
    u.id AS user_id,
    u.email,
    u.display_name,
    om.member_role,
    om.department,
    om.title,
    om.joined_at,
    COUNT(DISTINCT ura.role_id) AS role_count,
    GROUP_CONCAT(DISTINCT r.display_name) AS assigned_roles
FROM user_organization o
JOIN user_organization_member om ON o.id = om.organization_id
JOIN user u ON om.user_id = u.id
LEFT JOIN user_role_assignment ura ON u.id = ura.user_id AND ura.organization_id = o.id AND ura.is_active = TRUE
LEFT JOIN user_role r ON ura.role_id = r.id
WHERE om.status = 'ACTIVE'
GROUP BY o.id, u.id;

-- =====================================================
-- TRIGGERS
-- =====================================================

DELIMITER $$

-- Trigger: Log security events on user updates
CREATE TRIGGER trg_user_security_changes
AFTER UPDATE ON user
FOR EACH ROW
BEGIN
    IF NEW.password_expires_at != OLD.password_expires_at THEN
        INSERT INTO user_security_log (user_id, event_type, event_status, metadata)
        VALUES (NEW.id, 'PASSWORD_EXPIRY_CHANGED', 'SUCCESS', 
                JSON_OBJECT('old_expiry', OLD.password_expires_at, 'new_expiry', NEW.password_expires_at));
    END IF;
    
    IF NEW.status != OLD.status THEN
        INSERT INTO user_security_log (user_id, event_type, event_status, metadata)
        VALUES (NEW.id, 'ACCOUNT_STATUS_CHANGED', 'SUCCESS',
                JSON_OBJECT('old_status', OLD.status, 'new_status', NEW.status));
    END IF;
    
    IF NEW.require_mfa != OLD.require_mfa THEN
        INSERT INTO user_security_log (user_id, event_type, event_status, metadata)
        VALUES (NEW.id, IF(NEW.require_mfa, 'MFA_REQUIRED', 'MFA_OPTIONAL'), 'SUCCESS', NULL);
    END IF;
END$$

-- Trigger: Enforce single primary wallet per user
CREATE TRIGGER trg_user_wallet_primary
BEFORE INSERT ON user_wallet
FOR EACH ROW
BEGIN
    IF NEW.is_primary = TRUE THEN
        UPDATE user_wallet 
        SET is_primary = FALSE 
        WHERE user_id = NEW.user_id 
        AND id != NEW.id;
    END IF;
END$$

-- Trigger: Clean up expired sessions
CREATE TRIGGER trg_session_expiry_check
BEFORE UPDATE ON user_session
FOR EACH ROW
BEGIN
    IF NEW.expires_at < NOW(6) AND NEW.is_active = TRUE THEN
        SET NEW.is_active = FALSE;
        SET NEW.terminated_at = NOW(6);
        SET NEW.termination_reason = 'TIMEOUT';
    END IF;
END$$

DELIMITER ;

-- =====================================================
-- SAMPLE DATA
-- =====================================================

-- Insert system permissions
INSERT INTO user_permission (permission_name, resource_type, action, display_name, description, category, risk_level) VALUES
-- Catalog permissions
('catalog.song.view', 'SONG', 'VIEW', 'View Songs', 'View song metadata and details', 'CATALOG', 'LOW'),
('catalog.song.create', 'SONG', 'CREATE', 'Create Songs', 'Add new songs to catalog', 'CATALOG', 'MEDIUM'),
('catalog.song.edit', 'SONG', 'UPDATE', 'Edit Songs', 'Modify song metadata', 'CATALOG', 'MEDIUM'),
('catalog.song.delete', 'SONG', 'DELETE', 'Delete Songs', 'Remove songs from catalog', 'CATALOG', 'HIGH'),
('catalog.song.export', 'SONG', 'EXPORT', 'Export Songs', 'Export song data', 'CATALOG', 'MEDIUM'),

-- Agreement permissions
('agreement.view', 'AGREEMENT', 'VIEW', 'View Agreements', 'View agreement details', 'CATALOG', 'LOW'),
('agreement.create', 'AGREEMENT', 'CREATE', 'Create Agreements', 'Draft new agreements', 'CATALOG', 'MEDIUM'),
('agreement.sign', 'AGREEMENT', 'SIGN', 'Sign Agreements', 'Digitally sign agreements', 'CATALOG', 'HIGH'),
('agreement.approve', 'AGREEMENT', 'APPROVE', 'Approve Agreements', 'Approve agreements for execution', 'CATALOG', 'HIGH'),

-- Financial permissions
('royalty.view', 'ROYALTY', 'VIEW', 'View Royalties', 'View royalty statements', 'FINANCIAL', 'MEDIUM'),
('royalty.calculate', 'ROYALTY', 'CALCULATE', 'Calculate Royalties', 'Run royalty calculations', 'FINANCIAL', 'HIGH'),
('royalty.approve', 'ROYALTY', 'APPROVE', 'Approve Royalties', 'Approve royalty payments', 'FINANCIAL', 'CRITICAL'),
('royalty.export', 'ROYALTY', 'EXPORT', 'Export Royalties', 'Export royalty data', 'FINANCIAL', 'MEDIUM'),

-- User management permissions
('user.view', 'USER', 'VIEW', 'View Users', 'View user profiles', 'ADMINISTRATIVE', 'LOW'),
('user.create', 'USER', 'CREATE', 'Create Users', 'Create new user accounts', 'ADMINISTRATIVE', 'HIGH'),
('user.edit', 'USER', 'UPDATE', 'Edit Users', 'Modify user profiles', 'ADMINISTRATIVE', 'HIGH'),
('user.deactivate', 'USER', 'DEACTIVATE', 'Deactivate Users', 'Deactivate user accounts', 'ADMINISTRATIVE', 'CRITICAL'),

-- API permissions
('api.key.create', 'API_KEY', 'CREATE', 'Create API Keys', 'Generate new API keys', 'SECURITY', 'HIGH'),
('api.key.revoke', 'API_KEY', 'REVOKE', 'Revoke API Keys', 'Revoke API access', 'SECURITY', 'HIGH');

-- Insert system roles
INSERT INTO user_role (role_name, role_type, display_name, description, industry_category, can_manage_catalog, can_manage_royalties, can_sign_agreements) VALUES
-- System roles
('super_admin', 'SYSTEM', 'Super Administrator', 'Full system access', 'ADMINISTRATIVE', TRUE, TRUE, TRUE),
('platform_admin', 'SYSTEM', 'Platform Administrator', 'Platform administration', 'ADMINISTRATIVE', TRUE, TRUE, FALSE),
('support_agent', 'SYSTEM', 'Support Agent', 'Customer support access', 'ADMINISTRATIVE', FALSE, FALSE, FALSE),

-- Industry roles
('artist', 'SYSTEM', 'Artist', 'Musical artist/performer', 'CREATIVE', TRUE, FALSE, TRUE),
('songwriter', 'SYSTEM', 'Songwriter', 'Song writer/composer', 'CREATIVE', TRUE, FALSE, TRUE),
('producer', 'SYSTEM', 'Producer', 'Music producer', 'CREATIVE', TRUE, FALSE, TRUE),
('label_executive', 'SYSTEM', 'Label Executive', 'Record label executive', 'BUSINESS', TRUE, TRUE, TRUE),
('label_ar', 'SYSTEM', 'A&R Representative', 'Artists and Repertoire', 'BUSINESS', TRUE, FALSE, TRUE),
('publisher_admin', 'SYSTEM', 'Publishing Administrator', 'Publishing company admin', 'BUSINESS', TRUE, TRUE, TRUE),
('manager', 'SYSTEM', 'Manager', 'Artist/business manager', 'BUSINESS', TRUE, TRUE, TRUE),
('accountant', 'SYSTEM', 'Accountant', 'Financial professional', 'BUSINESS', FALSE, TRUE, FALSE),
('lawyer', 'SYSTEM', 'Lawyer', 'Legal representative', 'BUSINESS', FALSE, FALSE, TRUE),
('auditor', 'SYSTEM', 'Auditor', 'Read-only audit access', 'BUSINESS', FALSE, FALSE, FALSE);

-- Map permissions to roles
INSERT INTO user_role_permission (role_id, permission_id) 
SELECT r.id, p.id 
FROM user_role r
CROSS JOIN user_permission p
WHERE r.role_name = 'super_admin';

-- Artist role permissions
INSERT INTO user_role_permission (role_id, permission_id)
SELECT r.id, p.id
FROM user_role r
JOIN user_permission p ON p.permission_name IN (
    'catalog.song.view', 'catalog.song.create', 'catalog.song.edit',
    'agreement.view', 'agreement.sign',
    'royalty.view', 'royalty.export'
)
WHERE r.role_name = 'artist';

-- Manager role permissions
INSERT INTO user_role_permission (role_id, permission_id)
SELECT r.id, p.id
FROM user_role r
JOIN user_permission p ON p.permission_name IN (
    'catalog.song.view', 'catalog.song.create', 'catalog.song.edit', 'catalog.song.export',
    'agreement.view', 'agreement.create', 'agreement.sign',
    'royalty.view', 'royalty.export',
    'user.view'
)
WHERE r.role_name = 'manager';

-- Insert API rate limits
INSERT INTO api_rate_limit (limit_type, limit_key, requests_per_minute, requests_per_hour, requests_per_day) VALUES
('GLOBAL', NULL, 1000, 30000, 500000),
('USER', NULL, 100, 3000, 50000),
('ORGANIZATION', NULL, 500, 15000, 250000);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Additional performance indexes
CREATE INDEX idx_user_email_status ON user(email, status);
CREATE INDEX idx_user_type_status ON user(account_type, status);
CREATE INDEX idx_session_user_active ON user_session(user_id, is_active, expires_at);
CREATE INDEX idx_security_log_user_date ON user_security_log(user_id, occurred_at);
CREATE INDEX idx_activity_log_user_date ON user_activity_log(user_id, occurred_at);
CREATE INDEX idx_role_assignment_user_active ON user_role_assignment(user_id, is_active);
CREATE INDEX idx_permission_grant_user_active ON user_permission_grant(user_id, is_active);
CREATE INDEX idx_api_key_user_status ON api_key(user_id, status);
CREATE INDEX idx_notification_user_unread ON user_notification(user_id, is_read, created_at);

-- Composite indexes for common queries
CREATE INDEX idx_user_login ON user(email, deleted_at);
CREATE INDEX idx_session_lookup ON user_session(session_token_hash, is_active);
CREATE INDEX idx_permission_check ON user_permission(resource_type, action);
CREATE INDEX idx_org_member_lookup ON user_organization_member(organization_id, user_id, status);

-- =====================================================
-- SECTION 17: AUDIT & COMPLIANCE TABLES
-- =====================================================

-- =====================================================
-- CORE AUDIT TABLES
-- =====================================================

-- Main audit trail with immutable hash chain
CREATE TABLE audit_log (
    audit_id BIGINT UNSIGNED AUTO_INCREMENT,
    audit_timestamp DATETIME(6) NOT NULL,
    audit_hash VARCHAR(64) NOT NULL, -- SHA-256 hash of this entry
    previous_hash VARCHAR(64), -- Hash of previous entry for chain integrity
    
    -- Who performed the action
    user_id INT UNSIGNED,
    impersonated_by_user_id INT UNSIGNED, -- If action performed on behalf of another user
    session_id VARCHAR(128),
    ip_address VARCHAR(45), -- IPv6 compatible
    ip_country VARCHAR(2), -- ISO country code
    ip_region VARCHAR(100),
    user_agent TEXT,
    
    -- What was done
    action_type VARCHAR(50) NOT NULL, -- CREATE, UPDATE, DELETE, ACCESS, EXPORT, etc.
    table_name VARCHAR(64) NOT NULL,
    record_id VARCHAR(100), -- Generic to handle different ID types
    record_type VARCHAR(50), -- SONG, RECORDING, AGREEMENT, etc.
    
    -- Where and why
    module_name VARCHAR(50), -- CATALOG, ROYALTIES, AGREEMENTS, etc.
    function_name VARCHAR(100), -- Specific function/endpoint
    reason_code VARCHAR(50), -- MANUAL_UPDATE, SYSTEM_SYNC, COMPLIANCE_REQUEST, etc.
    reason_description TEXT,
    
    -- Additional context
    metadata JSON, -- Flexible additional data
    risk_score DECIMAL(5,2), -- 0-100 risk assessment
    compliance_flags JSON, -- Array of compliance issues detected
    
    -- System fields
    server_timestamp DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    server_id VARCHAR(50), -- For distributed systems
    tenant_id INT UNSIGNED,
    
    PRIMARY KEY (audit_id),
    INDEX idx_audit_timestamp (audit_timestamp),
    INDEX idx_audit_user (user_id, audit_timestamp),
    INDEX idx_audit_table_record (table_name, record_id),
    INDEX idx_audit_action (action_type, audit_timestamp),
    INDEX idx_audit_hash (audit_hash),
    INDEX idx_audit_risk (risk_score, audit_timestamp),
    INDEX idx_audit_tenant (tenant_id, audit_timestamp)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (YEAR(audit_timestamp) * 100 + MONTH(audit_timestamp)) (
    PARTITION p202501 VALUES LESS THAN (202502),
    PARTITION p202502 VALUES LESS THAN (202503),
    PARTITION p202503 VALUES LESS THAN (202504),
    PARTITION p202504 VALUES LESS THAN (202505),
    PARTITION p202505 VALUES LESS THAN (202506),
    PARTITION p202506 VALUES LESS THAN (202507),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Detailed field-level changes
CREATE TABLE audit_detail (
    detail_id BIGINT UNSIGNED AUTO_INCREMENT,
    audit_id BIGINT UNSIGNED NOT NULL,
    
    -- Field change details
    field_name VARCHAR(64) NOT NULL,
    field_type VARCHAR(50) NOT NULL, -- STRING, NUMBER, DATE, JSON, etc.
    old_value TEXT,
    new_value TEXT,
    old_value_encrypted BLOB, -- For sensitive data
    new_value_encrypted BLOB,
    value_hash VARCHAR(64), -- Hash for large values
    
    -- Data classification
    data_classification VARCHAR(50), -- PUBLIC, INTERNAL, CONFIDENTIAL, RESTRICTED
    pii_flag BOOLEAN DEFAULT FALSE,
    financial_flag BOOLEAN DEFAULT FALSE,
    
    -- Change metadata
    change_type VARCHAR(50), -- ADD, MODIFY, REMOVE
    validation_status VARCHAR(50), -- VALID, WARNING, ERROR
    validation_message TEXT,
    
    PRIMARY KEY (detail_id),
    INDEX idx_detail_audit (audit_id),
    INDEX idx_detail_field (field_name),
    INDEX idx_detail_classification (data_classification),
    FOREIGN KEY (audit_id) REFERENCES audit_log(audit_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Complete record snapshots for forensic analysis
CREATE TABLE audit_snapshot (
    snapshot_id BIGINT UNSIGNED AUTO_INCREMENT,
    audit_id BIGINT UNSIGNED NOT NULL,
    
    -- Snapshot data
    before_snapshot JSON, -- Complete record state before change
    after_snapshot JSON, -- Complete record state after change
    before_snapshot_encrypted BLOB, -- Encrypted version for sensitive data
    after_snapshot_encrypted BLOB,
    
    -- Snapshot metadata
    snapshot_hash VARCHAR(64) NOT NULL, -- Hash of snapshot data
    snapshot_size INT UNSIGNED, -- Size in bytes
    compression_type VARCHAR(20), -- NONE, GZIP, LZ4
    encryption_type VARCHAR(20), -- NONE, AES256
    
    -- Retention
    retention_policy VARCHAR(50),
    expiry_date DATE,
    
    PRIMARY KEY (snapshot_id),
    INDEX idx_snapshot_audit (audit_id),
    INDEX idx_snapshot_expiry (expiry_date),
    FOREIGN KEY (audit_id) REFERENCES audit_log(audit_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- COMPLIANCE MANAGEMENT TABLES
-- =====================================================

-- Automated compliance validations
CREATE TABLE compliance_check (
    check_id INT UNSIGNED AUTO_INCREMENT,
    check_name VARCHAR(100) NOT NULL,
    check_code VARCHAR(50) NOT NULL UNIQUE,
    
    -- Check configuration
    check_type VARCHAR(50) NOT NULL, -- SCHEDULED, TRIGGERED, CONTINUOUS
    jurisdiction VARCHAR(50), -- EU, US, GLOBAL, etc.
    regulation VARCHAR(50), -- GDPR, CCPA, CISAC, MLC, etc.
    category VARCHAR(50), -- PRIVACY, FINANCIAL, COPYRIGHT, etc.
    
    -- Check details
    description TEXT,
    check_query TEXT, -- SQL or rules engine query
    check_parameters JSON,
    severity_level VARCHAR(20), -- CRITICAL, HIGH, MEDIUM, LOW
    
    -- Scheduling
    schedule_cron VARCHAR(100), -- For scheduled checks
    last_run_timestamp DATETIME(6),
    next_run_timestamp DATETIME(6),
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    is_automated BOOLEAN DEFAULT TRUE,
    requires_manual_review BOOLEAN DEFAULT FALSE,
    
    -- Remediation
    auto_remediate BOOLEAN DEFAULT FALSE,
    remediation_query TEXT,
    remediation_parameters JSON,
    notification_template VARCHAR(100),
    
    -- Metadata
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    created_by_user_id INT UNSIGNED,
    
    PRIMARY KEY (check_id),
    INDEX idx_check_code (check_code),
    INDEX idx_check_type (check_type),
    INDEX idx_check_regulation (regulation),
    INDEX idx_check_schedule (next_run_timestamp)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Detected violations and remediation tracking
CREATE TABLE compliance_violation (
    violation_id BIGINT UNSIGNED AUTO_INCREMENT,
    violation_timestamp DATETIME(6) NOT NULL,
    
    -- Violation details
    check_id INT UNSIGNED NOT NULL,
    violation_code VARCHAR(50) NOT NULL,
    violation_type VARCHAR(50), -- DATA_BREACH, RETENTION_VIOLATION, ACCESS_VIOLATION, etc.
    severity VARCHAR(20) NOT NULL, -- CRITICAL, HIGH, MEDIUM, LOW
    
    -- Context
    table_name VARCHAR(64),
    record_id VARCHAR(100),
    user_id INT UNSIGNED,
    details JSON, -- Specific violation details
    evidence JSON, -- Supporting evidence/data
    
    -- Impact assessment
    affected_records_count INT UNSIGNED,
    affected_users_count INT UNSIGNED,
    data_categories JSON, -- Categories of data affected
    territories_affected JSON, -- List of affected jurisdictions
    
    -- Status and remediation
    status VARCHAR(50) NOT NULL, -- DETECTED, INVESTIGATING, REMEDIATING, RESOLVED, ESCALATED
    remediation_status VARCHAR(50), -- PENDING, IN_PROGRESS, COMPLETED, FAILED
    remediation_timestamp DATETIME(6),
    remediation_details JSON,
    resolution_notes TEXT,
    
    -- Compliance reporting
    reported_to_authority BOOLEAN DEFAULT FALSE,
    authority_reference VARCHAR(100),
    report_deadline DATETIME,
    fine_amount DECIMAL(15,2),
    fine_currency VARCHAR(3),
    
    -- Metadata
    detected_by VARCHAR(50), -- SYSTEM, MANUAL, EXTERNAL_AUDIT
    assigned_to_user_id INT UNSIGNED,
    tenant_id INT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (violation_id),
    INDEX idx_violation_timestamp (violation_timestamp),
    INDEX idx_violation_check (check_id),
    INDEX idx_violation_status (status),
    INDEX idx_violation_severity (severity, status),
    INDEX idx_violation_user (user_id),
    INDEX idx_violation_deadline (report_deadline),
    FOREIGN KEY (check_id) REFERENCES compliance_check(check_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Compliance certificates and attestations
CREATE TABLE compliance_certification (
    certification_id INT UNSIGNED AUTO_INCREMENT,
    
    -- Certificate details
    certification_type VARCHAR(50) NOT NULL, -- GDPR_COMPLIANT, SOX_COMPLIANT, ISO27001, etc.
    certification_code VARCHAR(100) UNIQUE,
    issuing_authority VARCHAR(100),
    
    -- Validity
    issue_date DATE NOT NULL,
    expiry_date DATE NOT NULL,
    is_valid BOOLEAN DEFAULT TRUE,
    
    -- Scope
    scope_description TEXT,
    covered_systems JSON, -- List of systems/modules covered
    covered_territories JSON, -- Jurisdictions covered
    exclusions JSON, -- Any exclusions or limitations
    
    -- Evidence
    audit_report_url VARCHAR(500),
    certificate_url VARCHAR(500),
    evidence_documents JSON, -- List of supporting documents
    
    -- Verification
    verification_status VARCHAR(50), -- PENDING, VERIFIED, EXPIRED, REVOKED
    verification_date DATETIME,
    verified_by VARCHAR(100),
    blockchain_hash VARCHAR(64), -- For blockchain verification
    
    -- Metadata
    tenant_id INT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (certification_id),
    INDEX idx_cert_type (certification_type),
    INDEX idx_cert_expiry (expiry_date),
    INDEX idx_cert_valid (is_valid, expiry_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- PRIVACY & DATA MANAGEMENT TABLES
-- =====================================================

-- GDPR/CCPA privacy requests
CREATE TABLE privacy_request (
    request_id BIGINT UNSIGNED AUTO_INCREMENT,
    request_number VARCHAR(50) UNIQUE NOT NULL, -- Human-readable reference
    
    -- Request details
    request_type VARCHAR(50) NOT NULL, -- ACCESS, DELETION, RECTIFICATION, PORTABILITY, RESTRICTION, OBJECTION
    regulation VARCHAR(50) NOT NULL, -- GDPR, CCPA, LGPD, etc.
    requester_type VARCHAR(50), -- DATA_SUBJECT, AUTHORIZED_AGENT, PARENT_GUARDIAN
    
    -- Requester information
    requester_user_id INT UNSIGNED,
    requester_email VARCHAR(255),
    requester_name VARCHAR(200),
    requester_id_verified BOOLEAN DEFAULT FALSE,
    verification_method VARCHAR(50), -- EMAIL, ID_DOCUMENT, TWO_FACTOR, etc.
    
    -- Request scope
    scope_all_data BOOLEAN DEFAULT TRUE,
    scope_categories JSON, -- Specific data categories if not all
    scope_date_from DATE,
    scope_date_to DATE,
    additional_instructions TEXT,
    
    -- Processing
    status VARCHAR(50) NOT NULL, -- RECEIVED, VERIFYING, PROCESSING, COMPLETED, REJECTED
    priority VARCHAR(20), -- URGENT, HIGH, NORMAL, LOW
    assigned_to_user_id INT UNSIGNED,
    
    -- Timelines (GDPR requires 30 days)
    received_at DATETIME(6) NOT NULL,
    deadline_date DATETIME(6) NOT NULL,
    acknowledged_at DATETIME(6),
    completed_at DATETIME(6),
    
    -- Response
    response_method VARCHAR(50), -- EMAIL, PORTAL, API, POSTAL
    response_format VARCHAR(50), -- JSON, CSV, PDF, XML
    response_url VARCHAR(500), -- Secure download link
    response_expiry DATETIME,
    
    -- Compliance tracking
    sla_status VARCHAR(20), -- ON_TIME, AT_RISK, OVERDUE
    extension_requested BOOLEAN DEFAULT FALSE,
    extension_reason TEXT,
    rejection_reason TEXT,
    
    -- Audit trail
    processing_log JSON, -- Detailed log of all processing steps
    systems_queried JSON, -- List of systems/tables queried
    records_found INT UNSIGNED,
    records_processed INT UNSIGNED,
    
    -- Metadata
    tenant_id INT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (request_id),
    INDEX idx_privacy_number (request_number),
    INDEX idx_privacy_type (request_type),
    INDEX idx_privacy_status (status),
    INDEX idx_privacy_deadline (deadline_date),
    INDEX idx_privacy_user (requester_user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- User consent records with versioning
CREATE TABLE privacy_consent (
    consent_id BIGINT UNSIGNED AUTO_INCREMENT,
    user_id INT UNSIGNED NOT NULL,
    
    -- Consent details
    consent_type VARCHAR(50) NOT NULL, -- MARKETING, ANALYTICS, THIRD_PARTY, COOKIES, etc.
    consent_version VARCHAR(20) NOT NULL, -- Version of consent text
    consent_status VARCHAR(20) NOT NULL, -- GRANTED, WITHDRAWN, EXPIRED
    
    -- Consent specifics
    purpose VARCHAR(200) NOT NULL, -- Specific purpose of data processing
    legal_basis VARCHAR(50), -- CONSENT, CONTRACT, LEGITIMATE_INTEREST, etc.
    data_categories JSON, -- Categories of data covered
    third_parties JSON, -- Third parties data may be shared with
    retention_period VARCHAR(100), -- How long data will be retained
    
    -- Timestamps
    granted_at DATETIME(6),
    withdrawn_at DATETIME(6),
    expires_at DATETIME(6),
    
    -- Consent capture
    capture_method VARCHAR(50), -- WEB_FORM, API, EMAIL, PHONE, etc.
    capture_location VARCHAR(200), -- URL or location where consent was captured
    ip_address VARCHAR(45),
    user_agent TEXT,
    
    -- Parent/Guardian consent for minors
    is_minor BOOLEAN DEFAULT FALSE,
    guardian_name VARCHAR(200),
    guardian_email VARCHAR(255),
    guardian_relationship VARCHAR(50),
    
    -- Audit
    consent_text TEXT, -- Full text of what user consented to
    consent_hash VARCHAR(64), -- Hash of consent text for integrity
    blockchain_hash VARCHAR(64), -- For blockchain verification
    
    -- Metadata
    is_active BOOLEAN DEFAULT TRUE,
    tenant_id INT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (consent_id),
    INDEX idx_consent_user (user_id, consent_type),
    INDEX idx_consent_status (consent_status),
    INDEX idx_consent_expiry (expires_at),
    INDEX idx_consent_version (consent_version)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Data export request tracking
CREATE TABLE data_export_request (
    export_id BIGINT UNSIGNED AUTO_INCREMENT,
    privacy_request_id BIGINT UNSIGNED,
    
    -- Export details
    export_type VARCHAR(50) NOT NULL, -- FULL_EXPORT, PARTIAL_EXPORT, PORTABILITY
    export_format VARCHAR(20) NOT NULL, -- JSON, CSV, XML, PDF
    
    -- Scope
    tables_included JSON, -- List of tables to export from
    date_range_start DATE,
    date_range_end DATE,
    filters JSON, -- Additional filters applied
    
    -- Processing
    status VARCHAR(50) NOT NULL, -- QUEUED, PROCESSING, COMPLETED, FAILED, EXPIRED
    started_at DATETIME(6),
    completed_at DATETIME(6),
    
    -- Output
    file_size_bytes BIGINT UNSIGNED,
    record_count INT UNSIGNED,
    file_hash VARCHAR(64),
    storage_location VARCHAR(500), -- S3 bucket/key or file path
    download_url VARCHAR(500),
    download_expiry DATETIME,
    download_count INT UNSIGNED DEFAULT 0,
    
    -- Security
    encryption_method VARCHAR(50), -- AES256, PGP, etc.
    password_protected BOOLEAN DEFAULT FALSE,
    access_code VARCHAR(100), -- One-time access code
    
    -- Metadata
    requested_by_user_id INT UNSIGNED,
    processed_by_system VARCHAR(50),
    error_message TEXT,
    tenant_id INT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (export_id),
    INDEX idx_export_request (privacy_request_id),
    INDEX idx_export_status (status),
    INDEX idx_export_expiry (download_expiry),
    FOREIGN KEY (privacy_request_id) REFERENCES privacy_request(request_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Data deletion request processing
CREATE TABLE data_deletion_request (
    deletion_id BIGINT UNSIGNED AUTO_INCREMENT,
    privacy_request_id BIGINT UNSIGNED,
    
    -- Deletion scope
    deletion_type VARCHAR(50) NOT NULL, -- FULL_DELETION, SELECTIVE_DELETION, ANONYMIZATION
    user_id INT UNSIGNED,
    
    -- What to delete
    tables_affected JSON, -- List of tables and record counts
    data_categories JSON, -- Categories of data to delete
    retention_exceptions JSON, -- Data that must be retained for legal reasons
    
    -- Processing
    status VARCHAR(50) NOT NULL, -- PENDING, PROCESSING, COMPLETED, FAILED, PARTIAL
    validation_status VARCHAR(50), -- VALIDATED, CONFLICTS_FOUND, OVERRIDE_REQUIRED
    
    -- Execution details
    deletion_method VARCHAR(50), -- HARD_DELETE, SOFT_DELETE, ANONYMIZE
    records_identified INT UNSIGNED,
    records_deleted INT UNSIGNED,
    records_anonymized INT UNSIGNED,
    records_retained INT UNSIGNED,
    
    -- Timing
    scheduled_for DATETIME(6),
    started_at DATETIME(6),
    completed_at DATETIME(6),
    
    -- Cascade handling
    cascade_deletions JSON, -- Related records that were also deleted
    orphaned_records JSON, -- Records that became orphaned
    
    -- Compliance
    legal_hold BOOLEAN DEFAULT FALSE,
    legal_hold_reason TEXT,
    retention_override_reason TEXT,
    approved_by_user_id INT UNSIGNED,
    
    -- Rollback capability
    rollback_available BOOLEAN DEFAULT FALSE,
    rollback_data_location VARCHAR(500),
    rollback_expiry DATETIME,
    
    -- Metadata
    error_log JSON,
    tenant_id INT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (deletion_id),
    INDEX idx_deletion_request (privacy_request_id),
    INDEX idx_deletion_user (user_id),
    INDEX idx_deletion_status (status),
    INDEX idx_deletion_scheduled (scheduled_for),
    FOREIGN KEY (privacy_request_id) REFERENCES privacy_request(request_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Data retention policy enforcement log
CREATE TABLE data_retention_log (
    retention_id BIGINT UNSIGNED AUTO_INCREMENT,
    
    -- Policy details
    retention_policy VARCHAR(100) NOT NULL,
    policy_version VARCHAR(20),
    
    -- Execution
    execution_date DATE NOT NULL,
    execution_type VARCHAR(50), -- SCHEDULED, MANUAL, TRIGGERED
    
    -- Scope
    table_name VARCHAR(64) NOT NULL,
    retention_period_days INT UNSIGNED,
    cutoff_date DATE,
    
    -- Results
    records_evaluated INT UNSIGNED,
    records_deleted INT UNSIGNED,
    records_archived INT UNSIGNED,
    records_retained INT UNSIGNED,
    
    -- Retention reasons
    retained_for_legal JSON, -- Records retained for legal reasons
    retained_for_business JSON, -- Records retained for business reasons
    
    -- Performance
    execution_time_seconds INT UNSIGNED,
    
    -- Status
    status VARCHAR(50) NOT NULL, -- COMPLETED, FAILED, PARTIAL
    error_message TEXT,
    
    -- Metadata
    executed_by VARCHAR(50), -- SYSTEM, user_id
    tenant_id INT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (retention_id),
    INDEX idx_retention_date (execution_date),
    INDEX idx_retention_table (table_name, execution_date),
    INDEX idx_retention_policy (retention_policy)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- REPORTING TABLES
-- =====================================================

-- Generated audit and compliance reports
CREATE TABLE audit_report (
    report_id INT UNSIGNED AUTO_INCREMENT,
    report_number VARCHAR(50) UNIQUE NOT NULL,
    
    -- Report details
    report_type VARCHAR(50) NOT NULL, -- AUDIT_TRAIL, COMPLIANCE_SUMMARY, PRIVACY_REPORT, etc.
    report_period_start DATETIME NOT NULL,
    report_period_end DATETIME NOT NULL,
    
    -- Configuration
    report_template VARCHAR(100),
    report_parameters JSON,
    included_modules JSON, -- Which modules/tables to include
    filters_applied JSON,
    
    -- Generation
    status VARCHAR(50) NOT NULL, -- QUEUED, GENERATING, COMPLETED, FAILED
    requested_by_user_id INT UNSIGNED,
    requested_at DATETIME(6) NOT NULL,
    completed_at DATETIME(6),
    
    -- Output
    format VARCHAR(20), -- PDF, EXCEL, JSON, XML
    file_size_bytes INT UNSIGNED,
    file_hash VARCHAR(64),
    storage_location VARCHAR(500),
    
    -- Distribution
    recipients JSON, -- List of email addresses or user IDs
    sent_at DATETIME(6),
    access_url VARCHAR(500),
    access_expiry DATETIME,
    password_protected BOOLEAN DEFAULT FALSE,
    
    -- Compliance attestation
    includes_pii BOOLEAN DEFAULT FALSE,
    includes_financial BOOLEAN DEFAULT FALSE,
    regulatory_submission BOOLEAN DEFAULT FALSE,
    submission_reference VARCHAR(100),
    
    -- Metadata
    generation_time_seconds INT UNSIGNED,
    error_message TEXT,
    tenant_id INT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (report_id),
    INDEX idx_report_number (report_number),
    INDEX idx_report_type (report_type),
    INDEX idx_report_period (report_period_start, report_period_end),
    INDEX idx_report_requested_by (requested_by_user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

DELIMITER //

-- Procedure to create immutable audit log entry with hash chain
CREATE PROCEDURE sp_create_audit_log(
    IN p_user_id INT UNSIGNED,
    IN p_action_type VARCHAR(50),
    IN p_table_name VARCHAR(64),
    IN p_record_id VARCHAR(100),
    IN p_reason_code VARCHAR(50),
    IN p_metadata JSON
)
BEGIN
    DECLARE v_previous_hash VARCHAR(64);
    DECLARE v_audit_data TEXT;
    DECLARE v_audit_hash VARCHAR(64);
    DECLARE v_audit_id BIGINT UNSIGNED;
    
    -- Get the hash of the most recent audit entry
    SELECT audit_hash INTO v_previous_hash
    FROM audit_log
    ORDER BY audit_id DESC
    LIMIT 1;
    
    -- Create concatenated audit data for hashing
    SET v_audit_data = CONCAT(
        IFNULL(v_previous_hash, 'GENESIS'),
        '|', p_user_id,
        '|', p_action_type,
        '|', p_table_name,
        '|', p_record_id,
        '|', p_reason_code,
        '|', NOW(6)
    );
    
    -- Generate SHA-256 hash
    SET v_audit_hash = SHA2(v_audit_data, 256);
    
    -- Insert audit log entry
    INSERT INTO audit_log (
        audit_timestamp,
        audit_hash,
        previous_hash,
        user_id,
        action_type,
        table_name,
        record_id,
        reason_code,
        metadata
    ) VALUES (
        NOW(6),
        v_audit_hash,
        v_previous_hash,
        p_user_id,
        p_action_type,
        p_table_name,
        p_record_id,
        p_reason_code,
        p_metadata
    );
    
    SET v_audit_id = LAST_INSERT_ID();
    
    SELECT v_audit_id AS audit_id, v_audit_hash AS audit_hash;
END //

-- Procedure to handle privacy requests with SLA tracking
CREATE PROCEDURE sp_process_privacy_request(
    IN p_request_type VARCHAR(50),
    IN p_regulation VARCHAR(50),
    IN p_requester_email VARCHAR(255),
    IN p_requester_name VARCHAR(200)
)
BEGIN
    DECLARE v_request_number VARCHAR(50);
    DECLARE v_deadline_days INT DEFAULT 30; -- GDPR default
    
    -- Generate unique request number
    SET v_request_number = CONCAT(
        p_regulation, '-',
        DATE_FORMAT(NOW(), '%Y%m%d'), '-',
        LPAD(FLOOR(RAND() * 10000), 4, '0')
    );
    
    -- Adjust deadline based on regulation
    IF p_regulation = 'CCPA' THEN
        SET v_deadline_days = 45;
    ELSEIF p_regulation = 'LGPD' THEN
        SET v_deadline_days = 15;
    END IF;
    
    -- Create privacy request
    INSERT INTO privacy_request (
        request_number,
        request_type,
        regulation,
        requester_email,
        requester_name,
        status,
        received_at,
        deadline_date
    ) VALUES (
        v_request_number,
        p_request_type,
        p_regulation,
        p_requester_email,
        p_requester_name,
        'RECEIVED',
        NOW(6),
        DATE_ADD(NOW(), INTERVAL v_deadline_days DAY)
    );
    
    SELECT LAST_INSERT_ID() AS request_id, v_request_number AS request_number;
END //

-- Procedure to check compliance violations
CREATE PROCEDURE sp_check_compliance_violations(
    IN p_check_code VARCHAR(50)
)
BEGIN
    DECLARE v_check_id INT UNSIGNED;
    DECLARE v_check_query TEXT;
    DECLARE v_violation_count INT DEFAULT 0;
    
    -- Get check configuration
    SELECT check_id, check_query 
    INTO v_check_id, v_check_query
    FROM compliance_check
    WHERE check_code = p_check_code
    AND is_active = TRUE;
    
    -- Execute dynamic compliance check
    -- (In production, this would execute the actual check query)
    
    -- Update last run timestamp
    UPDATE compliance_check
    SET last_run_timestamp = NOW(6)
    WHERE check_id = v_check_id;
    
    SELECT v_check_id AS check_id, v_violation_count AS violations_found;
END //

DELIMITER ;

-- =====================================================
-- VIEWS FOR REPORTING
-- =====================================================

-- Privacy request SLA monitoring view
CREATE VIEW v_privacy_request_sla AS
SELECT 
    request_id,
    request_number,
    request_type,
    regulation,
    status,
    received_at,
    deadline_date,
    DATEDIFF(deadline_date, NOW()) AS days_remaining,
    CASE 
        WHEN status IN ('COMPLETED', 'REJECTED') THEN 'CLOSED'
        WHEN DATEDIFF(deadline_date, NOW()) < 0 THEN 'OVERDUE'
        WHEN DATEDIFF(deadline_date, NOW()) <= 5 THEN 'AT_RISK'
        ELSE 'ON_TRACK'
    END AS sla_status,
    requester_email,
    assigned_to_user_id
FROM privacy_request;

-- Active compliance violations summary
CREATE VIEW v_compliance_violations_summary AS
SELECT 
    cv.severity,
    cv.status,
    cc.regulation,
    cc.category,
    COUNT(*) AS violation_count,
    MIN(cv.violation_timestamp) AS oldest_violation,
    MAX(cv.violation_timestamp) AS latest_violation
FROM compliance_violation cv
JOIN compliance_check cc ON cv.check_id = cc.check_id
WHERE cv.status NOT IN ('RESOLVED')
GROUP BY cv.severity, cv.status, cc.regulation, cc.category;

-- User consent status view
CREATE VIEW v_user_consent_status AS
SELECT 
    user_id,
    consent_type,
    MAX(CASE WHEN consent_status = 'GRANTED' THEN granted_at END) AS last_granted,
    MAX(CASE WHEN consent_status = 'WITHDRAWN' THEN withdrawn_at END) AS last_withdrawn,
    MAX(expires_at) AS consent_expires,
    CASE 
        WHEN MAX(CASE WHEN consent_status = 'GRANTED' THEN 1 ELSE 0 END) = 1 
             AND (MAX(expires_at) IS NULL OR MAX(expires_at) > NOW()) THEN 'ACTIVE'
        WHEN MAX(expires_at) <= NOW() THEN 'EXPIRED'
        ELSE 'WITHDRAWN'
    END AS current_status
FROM privacy_consent
WHERE is_active = TRUE
GROUP BY user_id, consent_type;

-- =====================================================
-- INITIAL CONFIGURATION DATA
-- =====================================================

-- Insert standard compliance checks
INSERT INTO compliance_check (check_name, check_code, check_type, jurisdiction, regulation, category, severity_level, schedule_cron) VALUES
('GDPR Data Retention Check', 'GDPR_RETENTION', 'SCHEDULED', 'EU', 'GDPR', 'PRIVACY', 'HIGH', '0 2 * * *'),
('CCPA Access Request SLA', 'CCPA_ACCESS_SLA', 'CONTINUOUS', 'US-CA', 'CCPA', 'PRIVACY', 'HIGH', NULL),
('CISAC Work Registration Compliance', 'CISAC_WORK_REG', 'TRIGGERED', 'GLOBAL', 'CISAC', 'COPYRIGHT', 'MEDIUM', NULL),
('MLC Royalty Reporting Accuracy', 'MLC_ROYALTY_ACCURACY', 'SCHEDULED', 'US', 'MLC', 'FINANCIAL', 'CRITICAL', '0 0 1 * *'),
('PCI DSS Payment Data Security', 'PCI_DSS_SECURITY', 'CONTINUOUS', 'GLOBAL', 'PCI_DSS', 'FINANCIAL', 'CRITICAL', NULL),
('Cross-Border Data Transfer', 'GDPR_TRANSFER', 'TRIGGERED', 'EU', 'GDPR', 'PRIVACY', 'HIGH', NULL),
('Minor Data Protection', 'COPPA_MINOR', 'CONTINUOUS', 'US', 'COPPA', 'PRIVACY', 'CRITICAL', NULL),
('SOX Financial Audit Trail', 'SOX_AUDIT', 'SCHEDULED', 'US', 'SOX', 'FINANCIAL', 'HIGH', '0 0 * * 0'),
('LGPD Consent Management', 'LGPD_CONSENT', 'CONTINUOUS', 'BR', 'LGPD', 'PRIVACY', 'HIGH', NULL),
('ISO 27001 Access Control', 'ISO27001_ACCESS', 'SCHEDULED', 'GLOBAL', 'ISO27001', 'SECURITY', 'MEDIUM', '0 0 * * *');

-- =====================================================
-- TRIGGERS FOR AUTOMATIC AUDIT LOGGING
-- =====================================================

-- Note: These would be created for each table in the system
-- Example trigger for automatic audit logging would be:
/*
DELIMITER //
CREATE TRIGGER tr_table_name_audit_insert
AFTER INSERT ON table_name
FOR EACH ROW
BEGIN
    CALL sp_create_audit_log(
        NEW.created_by_user_id,
        'CREATE',
        'table_name',
        NEW.id,
        'MANUAL_CREATE',
        JSON_OBJECT('trigger', 'insert')
    );
END //
DELIMITER ;
*/

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Additional performance indexes
CREATE INDEX idx_audit_log_composite ON audit_log(table_name, action_type, audit_timestamp);
CREATE INDEX idx_privacy_request_composite ON privacy_request(regulation, request_type, status);
CREATE INDEX idx_consent_lookup ON privacy_consent(user_id, consent_type, consent_status, is_active);
CREATE INDEX idx_violation_lookup ON compliance_violation(severity, status, violation_timestamp);

-- =====================================================
-- Section 18: ANALYTICS & ML TABLES
-- =====================================================

-- =====================================================
-- CORE ANALYTICS TABLES
-- =====================================================

-- Raw event tracking table (partitioned by date for performance)
CREATE TABLE analytics_event (
    event_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    event_uuid CHAR(36) NOT NULL,
    event_type VARCHAR(50) NOT NULL, -- 'stream', 'purchase', 'share', 'save', 'skip'
    event_timestamp DATETIME(6) NOT NULL,
    
    -- Entity references
    user_id INT UNSIGNED,
    asset_id INT UNSIGNED,
    release_id INT UNSIGNED,
    playlist_id INT UNSIGNED,
    
    -- Platform information
    platform_code VARCHAR(20), -- 'spotify', 'apple_music', 'youtube'
    platform_version VARCHAR(20),
    
    -- Session information
    session_id CHAR(36),
    session_sequence INT UNSIGNED,
    
    -- Event details (flexible JSON for extensibility)
    event_properties JSON,
    
    -- User context
    user_properties JSON, -- Anonymous demographics, preferences
    
    -- Technical context
    device_type VARCHAR(50),
    device_id VARCHAR(100),
    app_version VARCHAR(20),
    os_name VARCHAR(50),
    os_version VARCHAR(20),
    browser_name VARCHAR(50),
    browser_version VARCHAR(20),
    
    -- Geographic information (privacy-compliant)
    country_code CHAR(2),
    region_code VARCHAR(10),
    city_name VARCHAR(100),
    timezone VARCHAR(50),
    
    -- Performance metrics
    event_duration_ms INT UNSIGNED,
    
    -- Quality flags
    is_valid BOOLEAN DEFAULT TRUE,
    is_duplicate BOOLEAN DEFAULT FALSE,
    is_test BOOLEAN DEFAULT FALSE,
    
    -- Processing metadata
    processed_at DATETIME(6),
    processing_version VARCHAR(20),
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (event_id, event_timestamp),
    UNIQUE KEY idx_event_uuid (event_uuid),
    KEY idx_event_type_timestamp (event_type, event_timestamp),
    KEY idx_user_timestamp (user_id, event_timestamp),
    KEY idx_asset_timestamp (asset_id, event_timestamp),
    KEY idx_platform_timestamp (platform_code, event_timestamp),
    KEY idx_country_timestamp (country_code, event_timestamp),
    KEY idx_session (session_id, session_sequence)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (TO_DAYS(event_timestamp)) (
    PARTITION p_2024_01 VALUES LESS THAN (TO_DAYS('2024-02-01')),
    PARTITION p_2024_02 VALUES LESS THAN (TO_DAYS('2024-03-01')),
    PARTITION p_2024_03 VALUES LESS THAN (TO_DAYS('2024-04-01')),
    PARTITION p_2024_04 VALUES LESS THAN (TO_DAYS('2024-05-01')),
    PARTITION p_2024_05 VALUES LESS THAN (TO_DAYS('2024-06-01')),
    PARTITION p_2024_06 VALUES LESS THAN (TO_DAYS('2024-07-01')),
    PARTITION p_2024_07 VALUES LESS THAN (TO_DAYS('2024-08-01')),
    PARTITION p_2024_08 VALUES LESS THAN (TO_DAYS('2024-09-01')),
    PARTITION p_2024_09 VALUES LESS THAN (TO_DAYS('2024-10-01')),
    PARTITION p_2024_10 VALUES LESS THAN (TO_DAYS('2024-11-01')),
    PARTITION p_2024_11 VALUES LESS THAN (TO_DAYS('2024-12-01')),
    PARTITION p_2024_12 VALUES LESS THAN (TO_DAYS('2025-01-01')),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Metric definitions
CREATE TABLE analytics_metric (
    metric_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    metric_code VARCHAR(50) NOT NULL,
    metric_name VARCHAR(100) NOT NULL,
    metric_category VARCHAR(50) NOT NULL, -- 'engagement', 'revenue', 'performance'
    metric_type VARCHAR(50) NOT NULL, -- 'count', 'sum', 'average', 'percentile'
    
    -- Calculation details
    calculation_sql TEXT,
    aggregation_method VARCHAR(50),
    
    -- Display properties
    display_unit VARCHAR(20),
    decimal_places TINYINT UNSIGNED DEFAULT 2,
    format_type VARCHAR(20), -- 'number', 'currency', 'percentage'
    
    -- Business rules
    is_key_metric BOOLEAN DEFAULT FALSE,
    refresh_frequency VARCHAR(20), -- 'realtime', 'hourly', 'daily'
    retention_days INT UNSIGNED,
    
    -- Metadata
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (metric_id),
    UNIQUE KEY idx_metric_code (metric_code),
    KEY idx_metric_category (metric_category)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Dimension definitions
CREATE TABLE analytics_dimension (
    dimension_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    dimension_code VARCHAR(50) NOT NULL,
    dimension_name VARCHAR(100) NOT NULL,
    dimension_type VARCHAR(50) NOT NULL, -- 'time', 'geography', 'platform', 'content'
    
    -- Hierarchy information
    parent_dimension_id INT UNSIGNED,
    hierarchy_level TINYINT UNSIGNED,
    
    -- Cardinality and performance
    estimated_cardinality INT UNSIGNED,
    index_priority TINYINT UNSIGNED,
    
    -- Metadata
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (dimension_id),
    UNIQUE KEY idx_dimension_code (dimension_code),
    KEY idx_dimension_type (dimension_type),
    FOREIGN KEY (parent_dimension_id) REFERENCES analytics_dimension(dimension_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Pre-computed aggregates for performance
CREATE TABLE analytics_aggregation (
    aggregation_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    aggregation_date DATE NOT NULL,
    time_grain VARCHAR(20) NOT NULL, -- 'hour', 'day', 'week', 'month'
    
    -- Dimensions
    asset_id INT UNSIGNED,
    release_id INT UNSIGNED,
    artist_id INT UNSIGNED,
    platform_code VARCHAR(20),
    country_code CHAR(2),
    
    -- Metrics
    stream_count BIGINT UNSIGNED DEFAULT 0,
    unique_listeners INT UNSIGNED DEFAULT 0,
    total_duration_seconds BIGINT UNSIGNED DEFAULT 0,
    skip_count INT UNSIGNED DEFAULT 0,
    save_count INT UNSIGNED DEFAULT 0,
    share_count INT UNSIGNED DEFAULT 0,
    playlist_add_count INT UNSIGNED DEFAULT 0,
    
    -- Calculated metrics
    completion_rate DECIMAL(5,4),
    skip_rate DECIMAL(5,4),
    engagement_score DECIMAL(10,4),
    
    -- Revenue metrics
    revenue_amount DECIMAL(15,6),
    revenue_currency CHAR(3),
    
    -- Processing metadata
    last_updated DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (aggregation_id),
    UNIQUE KEY idx_unique_aggregation (aggregation_date, time_grain, asset_id, platform_code, country_code),
    KEY idx_date_grain (aggregation_date, time_grain),
    KEY idx_asset_date (asset_id, aggregation_date),
    KEY idx_platform_date (platform_code, aggregation_date),
    KEY idx_country_date (country_code, aggregation_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
PARTITION BY RANGE (TO_DAYS(aggregation_date)) (
    PARTITION p_2024_q1 VALUES LESS THAN (TO_DAYS('2024-04-01')),
    PARTITION p_2024_q2 VALUES LESS THAN (TO_DAYS('2024-07-01')),
    PARTITION p_2024_q3 VALUES LESS THAN (TO_DAYS('2024-10-01')),
    PARTITION p_2024_q4 VALUES LESS THAN (TO_DAYS('2025-01-01')),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- =====================================================
-- PERFORMANCE METRICS TABLES
-- =====================================================

-- Platform-specific streaming metrics
CREATE TABLE streaming_metric (
    streaming_metric_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    metric_date DATE NOT NULL,
    asset_id INT UNSIGNED NOT NULL,
    platform_code VARCHAR(20) NOT NULL,
    
    -- Core streaming metrics
    total_streams BIGINT UNSIGNED DEFAULT 0,
    unique_listeners INT UNSIGNED DEFAULT 0,
    new_listeners INT UNSIGNED DEFAULT 0,
    returning_listeners INT UNSIGNED DEFAULT 0,
    
    -- Engagement metrics
    saves_count INT UNSIGNED DEFAULT 0,
    playlist_adds INT UNSIGNED DEFAULT 0,
    shares_count INT UNSIGNED DEFAULT 0,
    likes_count INT UNSIGNED DEFAULT 0,
    
    -- Skip metrics by position
    skip_rate_intro DECIMAL(5,4), -- First 10 seconds
    skip_rate_verse DECIMAL(5,4), -- 10-60 seconds
    skip_rate_chorus DECIMAL(5,4), -- 60-120 seconds
    skip_rate_outro DECIMAL(5,4), -- Last 30 seconds
    
    -- Completion metrics
    completion_rate DECIMAL(5,4),
    average_listen_duration DECIMAL(10,2),
    repeat_rate DECIMAL(5,4),
    
    -- Discovery metrics
    playlist_discovery_count INT UNSIGNED DEFAULT 0,
    radio_discovery_count INT UNSIGNED DEFAULT 0,
    search_discovery_count INT UNSIGNED DEFAULT 0,
    algorithmic_discovery_count INT UNSIGNED DEFAULT 0,
    
    -- Device breakdown
    mobile_streams INT UNSIGNED DEFAULT 0,
    desktop_streams INT UNSIGNED DEFAULT 0,
    smart_speaker_streams INT UNSIGNED DEFAULT 0,
    tv_streams INT UNSIGNED DEFAULT 0,
    
    -- Time-based patterns
    peak_hour TINYINT UNSIGNED,
    peak_day_of_week TINYINT UNSIGNED,
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (streaming_metric_id),
    UNIQUE KEY idx_unique_streaming (metric_date, asset_id, platform_code),
    KEY idx_asset_date (asset_id, metric_date),
    KEY idx_platform_date (platform_code, metric_date),
    KEY idx_streams (total_streams)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Sales metrics across all channels
CREATE TABLE sales_metric (
    sales_metric_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    metric_date DATE NOT NULL,
    asset_id INT UNSIGNED,
    release_id INT UNSIGNED,
    
    -- Digital sales
    digital_track_sales INT UNSIGNED DEFAULT 0,
    digital_album_sales INT UNSIGNED DEFAULT 0,
    
    -- Physical sales
    cd_sales INT UNSIGNED DEFAULT 0,
    vinyl_sales INT UNSIGNED DEFAULT 0,
    cassette_sales INT UNSIGNED DEFAULT 0,
    
    -- Special formats
    limited_edition_sales INT UNSIGNED DEFAULT 0,
    bundle_sales INT UNSIGNED DEFAULT 0,
    
    -- NFT/Blockchain sales
    nft_sales INT UNSIGNED DEFAULT 0,
    nft_revenue DECIMAL(15,6),
    
    -- Merchandise
    merch_units_sold INT UNSIGNED DEFAULT 0,
    merch_revenue DECIMAL(15,6),
    
    -- Revenue by channel
    digital_revenue DECIMAL(15,6),
    physical_revenue DECIMAL(15,6),
    total_revenue DECIMAL(15,6),
    revenue_currency CHAR(3) DEFAULT 'USD',
    
    -- Conversion metrics
    stream_to_sale_conversion DECIMAL(5,4),
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (sales_metric_id),
    KEY idx_date (metric_date),
    KEY idx_asset_date (asset_id, metric_date),
    KEY idx_release_date (release_id, metric_date),
    KEY idx_revenue (total_revenue)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Playlist placement tracking
CREATE TABLE playlist_placement (
    placement_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    asset_id INT UNSIGNED NOT NULL,
    playlist_id VARCHAR(100) NOT NULL,
    platform_code VARCHAR(20) NOT NULL,
    
    -- Playlist details
    playlist_name VARCHAR(200),
    playlist_type VARCHAR(50), -- 'editorial', 'algorithmic', 'user', 'branded'
    playlist_owner VARCHAR(100),
    playlist_followers INT UNSIGNED,
    
    -- Placement details
    position_in_playlist INT UNSIGNED,
    added_date DATE NOT NULL,
    removed_date DATE,
    days_on_playlist INT UNSIGNED,
    
    -- Performance metrics
    streams_from_playlist BIGINT UNSIGNED DEFAULT 0,
    listeners_from_playlist INT UNSIGNED DEFAULT 0,
    saves_from_playlist INT UNSIGNED DEFAULT 0,
    skip_rate_on_playlist DECIMAL(5,4),
    
    -- Impact metrics
    stream_lift_percentage DECIMAL(10,2),
    follower_conversion_rate DECIMAL(5,4),
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (placement_id),
    KEY idx_asset_playlist (asset_id, playlist_id),
    KEY idx_platform_date (platform_code, added_date),
    KEY idx_playlist_type (playlist_type),
    KEY idx_active_placements (removed_date, added_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Chart position history
CREATE TABLE chart_position (
    chart_position_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    asset_id INT UNSIGNED,
    release_id INT UNSIGNED,
    chart_date DATE NOT NULL,
    
    -- Chart identification
    chart_name VARCHAR(100) NOT NULL,
    chart_type VARCHAR(50) NOT NULL, -- 'official', 'streaming', 'radio', 'genre'
    chart_territory VARCHAR(50) NOT NULL,
    
    -- Position data
    current_position INT UNSIGNED NOT NULL,
    previous_position INT UNSIGNED,
    peak_position INT UNSIGNED,
    weeks_on_chart INT UNSIGNED DEFAULT 1,
    
    -- Movement indicators
    position_change INT,
    is_new_entry BOOLEAN DEFAULT FALSE,
    is_re_entry BOOLEAN DEFAULT FALSE,
    
    -- Performance metrics
    chart_points INT UNSIGNED,
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (chart_position_id),
    UNIQUE KEY idx_unique_chart (asset_id, release_id, chart_name, chart_territory, chart_date),
    KEY idx_chart_date (chart_date),
    KEY idx_position (current_position),
    KEY idx_asset_chart (asset_id, chart_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Comprehensive release performance
CREATE TABLE release_performance (
    performance_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    release_id INT UNSIGNED NOT NULL,
    performance_date DATE NOT NULL,
    
    -- Aggregate streaming metrics
    total_streams_to_date BIGINT UNSIGNED DEFAULT 0,
    daily_streams BIGINT UNSIGNED DEFAULT 0,
    weekly_streams BIGINT UNSIGNED DEFAULT 0,
    monthly_streams BIGINT UNSIGNED DEFAULT 0,
    
    -- Sales metrics
    total_sales_to_date INT UNSIGNED DEFAULT 0,
    daily_sales INT UNSIGNED DEFAULT 0,
    weekly_sales INT UNSIGNED DEFAULT 0,
    
    -- Revenue metrics
    total_revenue_to_date DECIMAL(15,6),
    daily_revenue DECIMAL(15,6),
    streaming_revenue DECIMAL(15,6),
    sales_revenue DECIMAL(15,6),
    sync_revenue DECIMAL(15,6),
    
    -- Engagement metrics
    total_playlist_adds INT UNSIGNED DEFAULT 0,
    active_playlist_count INT UNSIGNED DEFAULT 0,
    social_mentions INT UNSIGNED DEFAULT 0,
    
    -- Milestones
    achieved_gold BOOLEAN DEFAULT FALSE,
    achieved_platinum BOOLEAN DEFAULT FALSE,
    achieved_diamond BOOLEAN DEFAULT FALSE,
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (performance_id),
    UNIQUE KEY idx_release_date (release_id, performance_date),
    KEY idx_performance_date (performance_date),
    KEY idx_total_streams (total_streams_to_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- INTELLIGENCE & INSIGHTS TABLES
-- =====================================================

-- Identified trends
CREATE TABLE trend_analysis (
    trend_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    trend_type VARCHAR(50) NOT NULL, -- 'genre', 'mood', 'tempo', 'viral'
    trend_name VARCHAR(100) NOT NULL,
    
    -- Trend metrics
    trend_score DECIMAL(10,4),
    growth_rate DECIMAL(10,4),
    momentum_score DECIMAL(10,4),
    
    -- Time bounds
    detected_date DATE NOT NULL,
    peak_date DATE,
    decline_date DATE,
    
    -- Associated entities
    related_genres JSON,
    related_moods JSON,
    example_tracks JSON,
    
    -- Geographic spread
    origin_country CHAR(2),
    affected_territories JSON,
    
    -- Platform distribution
    platform_breakdown JSON,
    
    -- Metadata
    confidence_score DECIMAL(5,4),
    analysis_version VARCHAR(20),
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (trend_id),
    KEY idx_trend_type (trend_type),
    KEY idx_detected_date (detected_date),
    KEY idx_trend_score (trend_score)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Market intelligence
CREATE TABLE market_analysis (
    market_analysis_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    analysis_date DATE NOT NULL,
    market_segment VARCHAR(50) NOT NULL,
    territory VARCHAR(50) NOT NULL,
    
    -- Market size metrics
    total_market_value DECIMAL(15,2),
    market_growth_rate DECIMAL(10,4),
    
    -- Competitive landscape
    market_concentration DECIMAL(5,4), -- Herfindahl index
    top_player_share DECIMAL(5,4),
    
    -- Consumer behavior
    average_consumption_hours DECIMAL(10,2),
    paid_subscription_rate DECIMAL(5,4),
    
    -- Platform distribution
    streaming_share DECIMAL(5,4),
    physical_share DECIMAL(5,4),
    digital_download_share DECIMAL(5,4),
    
    -- Demographic insights
    demographic_breakdown JSON,
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (market_analysis_id),
    UNIQUE KEY idx_market_date (analysis_date, market_segment, territory),
    KEY idx_territory (territory),
    KEY idx_market_value (total_market_value)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Competitive intelligence
CREATE TABLE competitor_analysis (
    competitor_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    competitor_name VARCHAR(100) NOT NULL,
    competitor_type VARCHAR(50) NOT NULL, -- 'artist', 'label', 'distributor'
    
    -- Market position
    market_share DECIMAL(5,4),
    growth_trajectory VARCHAR(20),
    
    -- Performance benchmarks
    average_streams_per_release BIGINT UNSIGNED,
    average_playlist_reach INT UNSIGNED,
    release_frequency_days INT UNSIGNED,
    
    -- Strategic insights
    primary_genres JSON,
    target_demographics JSON,
    key_territories JSON,
    platform_focus JSON,
    
    -- Comparative metrics
    our_performance_index DECIMAL(10,4),
    
    last_updated DATE,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (competitor_id),
    KEY idx_competitor_type (competitor_type),
    KEY idx_market_share (market_share)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Geographic performance heat maps
CREATE TABLE geographic_performance (
    geo_performance_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    asset_id INT UNSIGNED,
    release_id INT UNSIGNED,
    performance_date DATE NOT NULL,
    
    -- Location hierarchy
    country_code CHAR(2) NOT NULL,
    region_name VARCHAR(100),
    city_name VARCHAR(100),
    
    -- Performance metrics
    total_streams BIGINT UNSIGNED DEFAULT 0,
    unique_listeners INT UNSIGNED DEFAULT 0,
    market_penetration DECIMAL(5,4),
    
    -- Comparative metrics
    national_rank INT UNSIGNED,
    regional_rank INT UNSIGNED,
    
    -- Growth metrics
    daily_growth_rate DECIMAL(10,4),
    weekly_growth_rate DECIMAL(10,4),
    
    -- Cultural factors
    local_playlist_features INT UNSIGNED DEFAULT 0,
    local_radio_plays INT UNSIGNED DEFAULT 0,
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (geo_performance_id),
    KEY idx_asset_geo (asset_id, country_code, performance_date),
    KEY idx_release_geo (release_id, country_code, performance_date),
    KEY idx_country_date (country_code, performance_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- FAN ANALYTICS TABLES
-- =====================================================

-- Audience demographics (privacy-compliant, aggregated)
CREATE TABLE fan_demographic (
    demographic_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    artist_id INT UNSIGNED,
    asset_id INT UNSIGNED,
    demographic_date DATE NOT NULL,
    
    -- Age distribution (percentages)
    age_13_17_pct DECIMAL(5,2),
    age_18_24_pct DECIMAL(5,2),
    age_25_34_pct DECIMAL(5,2),
    age_35_44_pct DECIMAL(5,2),
    age_45_54_pct DECIMAL(5,2),
    age_55_plus_pct DECIMAL(5,2),
    
    -- Gender distribution
    gender_male_pct DECIMAL(5,2),
    gender_female_pct DECIMAL(5,2),
    gender_other_pct DECIMAL(5,2),
    
    -- Top territories
    top_countries JSON,
    top_cities JSON,
    
    -- Listening behavior
    average_listening_hours DECIMAL(10,2),
    peak_listening_hour TINYINT UNSIGNED,
    preferred_device_type VARCHAR(50),
    
    -- Engagement level distribution
    super_fans_pct DECIMAL(5,2), -- Top 1% by engagement
    active_fans_pct DECIMAL(5,2), -- Top 10%
    casual_listeners_pct DECIMAL(5,2),
    
    -- Discovery sources
    playlist_discovery_pct DECIMAL(5,2),
    radio_discovery_pct DECIMAL(5,2),
    social_discovery_pct DECIMAL(5,2),
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (demographic_id),
    KEY idx_artist_date (artist_id, demographic_date),
    KEY idx_asset_date (asset_id, demographic_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Fan engagement metrics
CREATE TABLE fan_engagement (
    engagement_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    fan_segment_id VARCHAR(50) NOT NULL, -- Anonymous segment identifier
    engagement_date DATE NOT NULL,
    
    -- Engagement scores
    overall_engagement_score DECIMAL(10,4),
    streaming_engagement_score DECIMAL(10,4),
    social_engagement_score DECIMAL(10,4),
    
    -- Behavioral metrics
    sessions_per_week DECIMAL(10,2),
    tracks_per_session DECIMAL(10,2),
    repeat_listening_rate DECIMAL(5,4),
    
    -- Cross-platform behavior
    platforms_used INT UNSIGNED,
    primary_platform VARCHAR(20),
    
    -- Content preferences
    preferred_genres JSON,
    preferred_moods JSON,
    preferred_eras JSON,
    
    -- Lifecycle stage
    fan_lifecycle_stage VARCHAR(50), -- 'new', 'growing', 'loyal', 'at_risk', 'churned'
    days_since_first_listen INT UNSIGNED,
    days_since_last_listen INT UNSIGNED,
    
    -- Predictive scores
    churn_risk_score DECIMAL(5,4),
    upsell_probability DECIMAL(5,4),
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (engagement_id),
    KEY idx_segment_date (fan_segment_id, engagement_date),
    KEY idx_lifecycle (fan_lifecycle_stage),
    KEY idx_engagement_score (overall_engagement_score)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- MACHINE LEARNING TABLES
-- =====================================================

-- ML model registry
CREATE TABLE prediction_model (
    model_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    model_name VARCHAR(100) NOT NULL,
    model_type VARCHAR(50) NOT NULL, -- 'hit_prediction', 'revenue_forecast', 'churn'
    model_version VARCHAR(20) NOT NULL,
    
    -- Model details
    algorithm VARCHAR(50),
    framework VARCHAR(50), -- 'tensorflow', 'pytorch', 'scikit-learn'
    
    -- Performance metrics
    accuracy_score DECIMAL(5,4),
    precision_score DECIMAL(5,4),
    recall_score DECIMAL(5,4),
    f1_score DECIMAL(5,4),
    auc_score DECIMAL(5,4),
    
    -- Training details
    training_date DATE,
    training_samples INT UNSIGNED,
    feature_count INT UNSIGNED,
    
    -- Model artifacts
    model_path VARCHAR(500),
    model_hash VARCHAR(64),
    
    -- Deployment status
    deployment_status VARCHAR(50), -- 'development', 'staging', 'production', 'retired'
    deployed_at DATETIME(6),
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (model_id),
    UNIQUE KEY idx_model_version (model_name, model_version),
    KEY idx_model_type (model_type),
    KEY idx_deployment_status (deployment_status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Model predictions
CREATE TABLE prediction_result (
    prediction_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    model_id INT UNSIGNED NOT NULL,
    prediction_date DATETIME(6) NOT NULL,
    
    -- Target entity
    entity_type VARCHAR(50) NOT NULL, -- 'asset', 'release', 'artist'
    entity_id INT UNSIGNED NOT NULL,
    
    -- Prediction details
    prediction_type VARCHAR(50) NOT NULL,
    prediction_value DECIMAL(15,6),
    confidence_score DECIMAL(5,4),
    
    -- Additional predictions (JSON for flexibility)
    prediction_details JSON,
    
    -- Feature importance
    top_features JSON,
    
    -- Actual vs predicted (for model evaluation)
    actual_value DECIMAL(15,6),
    prediction_error DECIMAL(15,6),
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (prediction_id),
    KEY idx_model_date (model_id, prediction_date),
    KEY idx_entity (entity_type, entity_id),
    KEY idx_prediction_type (prediction_type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Feature definitions
CREATE TABLE ml_feature (
    feature_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    feature_name VARCHAR(100) NOT NULL,
    feature_category VARCHAR(50) NOT NULL,
    
    -- Feature engineering
    calculation_sql TEXT,
    data_type VARCHAR(50),
    
    -- Feature importance
    global_importance_score DECIMAL(5,4),
    
    -- Feature statistics
    mean_value DECIMAL(15,6),
    std_deviation DECIMAL(15,6),
    min_value DECIMAL(15,6),
    max_value DECIMAL(15,6),
    
    -- Usage tracking
    models_using_count INT UNSIGNED DEFAULT 0,
    last_calculated DATETIME(6),
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (feature_id),
    UNIQUE KEY idx_feature_name (feature_name),
    KEY idx_feature_category (feature_category)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Training datasets
CREATE TABLE ml_training_data (
    training_data_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    model_id INT UNSIGNED NOT NULL,
    
    -- Dataset details
    dataset_name VARCHAR(100) NOT NULL,
    dataset_version VARCHAR(20) NOT NULL,
    
    -- Data characteristics
    total_samples INT UNSIGNED NOT NULL,
    positive_samples INT UNSIGNED,
    negative_samples INT UNSIGNED,
    
    -- Time bounds
    data_start_date DATE,
    data_end_date DATE,
    
    -- Storage
    storage_path VARCHAR(500),
    file_size_mb DECIMAL(10,2),
    
    -- Validation
    validation_status VARCHAR(50),
    validation_errors JSON,
    
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (training_data_id),
    KEY idx_model (model_id),
    KEY idx_dataset_version (dataset_name, dataset_version),
    FOREIGN KEY (model_id) REFERENCES prediction_model(model_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Model version control
CREATE TABLE ml_model_version (
    version_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    model_id INT UNSIGNED NOT NULL,
    version_number VARCHAR(20) NOT NULL,
    
    -- Version details
    major_version INT UNSIGNED,
    minor_version INT UNSIGNED,
    patch_version INT UNSIGNED,
    
    -- Changes
    change_description TEXT,
    features_added JSON,
    features_removed JSON,
    
    -- Performance comparison
    performance_delta JSON,
    
    -- Deployment history
    deployed_environments JSON,
    rollback_count INT UNSIGNED DEFAULT 0,
    
    created_by VARCHAR(100),
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (version_id),
    UNIQUE KEY idx_model_version (model_id, version_number),
    FOREIGN KEY (model_id) REFERENCES prediction_model(model_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- EXPERIMENTATION TABLES
-- =====================================================

-- A/B test configurations
CREATE TABLE ab_test (
    test_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    test_name VARCHAR(100) NOT NULL,
    test_type VARCHAR(50) NOT NULL, -- 'release_strategy', 'pricing', 'metadata'
    
    -- Test setup
    hypothesis TEXT,
    success_metrics JSON,
    
    -- Test groups
    control_group JSON,
    variant_groups JSON,
    
    -- Test parameters
    sample_size INT UNSIGNED,
    confidence_level DECIMAL(5,4) DEFAULT 0.95,
    minimum_effect DECIMAL(10,4),
    
    -- Time bounds
    start_date DATETIME(6),
    end_date DATETIME(6),
    
    -- Results
    test_status VARCHAR(50), -- 'planning', 'running', 'completed', 'aborted'
    winner_variant VARCHAR(50),
    statistical_significance DECIMAL(5,4),
    
    -- Impact
    estimated_impact JSON,
    
    created_by VARCHAR(100),
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    PRIMARY KEY (test_id),
    KEY idx_test_type (test_type),
    KEY idx_test_status (test_status),
    KEY idx_dates (start_date, end_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Recommendation engine results
CREATE TABLE recommendation_engine (
    recommendation_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
    recommendation_type VARCHAR(50) NOT NULL, -- 'next_track', 'similar_artist', 'playlist'
    
    -- Context
    user_segment VARCHAR(50),
    context_data JSON,
    
    -- Recommendations
    recommended_items JSON,
    recommendation_scores JSON,
    
    -- Performance
    click_through_rate DECIMAL(5,4),
    conversion_rate DECIMAL(5,4),
    
    -- Feedback
    user_feedback_score DECIMAL(3,2),
    
    generated_at DATETIME(6) NOT NULL,
    
    PRIMARY KEY (recommendation_id),
    KEY idx_type_generated (recommendation_type, generated_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- VIEWS FOR COMMON ANALYTICS QUERIES
-- =====================================================

-- Daily streaming performance view
CREATE VIEW v_daily_streaming_performance AS
SELECT 
    sm.metric_date,
    sm.asset_id,
    a.asset_title,
    sm.platform_code,
    sm.total_streams,
    sm.unique_listeners,
    sm.completion_rate,
    sm.playlist_adds,
    LAG(sm.total_streams, 1) OVER (PARTITION BY sm.asset_id, sm.platform_code ORDER BY sm.metric_date) as previous_day_streams,
    (sm.total_streams - LAG(sm.total_streams, 1) OVER (PARTITION BY sm.asset_id, sm.platform_code ORDER BY sm.metric_date)) / 
        NULLIF(LAG(sm.total_streams, 1) OVER (PARTITION BY sm.asset_id, sm.platform_code ORDER BY sm.metric_date), 0) * 100 as daily_growth_pct
FROM streaming_metric sm
JOIN asset a ON sm.asset_id = a.asset_id
WHERE sm.metric_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);

-- Artist performance dashboard view
CREATE VIEW v_artist_performance_dashboard AS
SELECT 
    ar.artist_id,
    ar.artist_name,
    COUNT(DISTINCT a.asset_id) as total_tracks,
    SUM(sm.total_streams) as total_streams,
    SUM(sm.unique_listeners) as total_listeners,
    AVG(sm.completion_rate) as avg_completion_rate,
    COUNT(DISTINCT pp.playlist_id) as total_playlists,
    MAX(cp.peak_position) as highest_chart_position
FROM artist ar
JOIN asset_contributor ac ON ar.artist_id = ac.contributor_id
JOIN asset a ON ac.asset_id = a.asset_id
LEFT JOIN streaming_metric sm ON a.asset_id = sm.asset_id
LEFT JOIN playlist_placement pp ON a.asset_id = pp.asset_id AND pp.removed_date IS NULL
LEFT JOIN chart_position cp ON a.asset_id = cp.asset_id
WHERE ac.contributor_role = 'primary_artist'
GROUP BY ar.artist_id, ar.artist_name;

-- Geographic heat map view
CREATE VIEW v_geographic_heatmap AS
SELECT 
    gp.country_code,
    gp.region_name,
    gp.performance_date,
    SUM(gp.total_streams) as total_streams,
    SUM(gp.unique_listeners) as unique_listeners,
    AVG(gp.market_penetration) as avg_market_penetration,
    SUM(gp.local_playlist_features) as playlist_features
FROM geographic_performance gp
WHERE gp.performance_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY)
GROUP BY gp.country_code, gp.region_name, gp.performance_date;

-- =====================================================
-- STORED PROCEDURES FOR ETL AND ANALYTICS
-- =====================================================

DELIMITER //

-- Procedure to aggregate daily streaming metrics
CREATE PROCEDURE sp_aggregate_daily_streaming_metrics(IN p_date DATE)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Aggregate streaming events into daily metrics
    INSERT INTO streaming_metric (
        metric_date,
        asset_id,
        platform_code,
        total_streams,
        unique_listeners,
        saves_count,
        playlist_adds,
        shares_count,
        skip_rate_intro,
        completion_rate,
        average_listen_duration,
        mobile_streams,
        desktop_streams
    )
    SELECT 
        DATE(ae.event_timestamp) as metric_date,
        ae.asset_id,
        ae.platform_code,
        COUNT(CASE WHEN ae.event_type = 'stream' THEN 1 END) as total_streams,
        COUNT(DISTINCT CASE WHEN ae.event_type = 'stream' THEN ae.user_id END) as unique_listeners,
        COUNT(CASE WHEN ae.event_type = 'save' THEN 1 END) as saves_count,
        COUNT(CASE WHEN ae.event_type = 'playlist_add' THEN 1 END) as playlist_adds,
        COUNT(CASE WHEN ae.event_type = 'share' THEN 1 END) as shares_count,
        AVG(CASE WHEN ae.event_type = 'skip' AND ae.event_duration_ms < 10000 THEN 1 ELSE 0 END) as skip_rate_intro,
        AVG(CASE WHEN ae.event_type = 'stream' AND ae.event_duration_ms > 30000 THEN 1 ELSE 0 END) as completion_rate,
        AVG(CASE WHEN ae.event_type = 'stream' THEN ae.event_duration_ms / 1000 END) as average_listen_duration,
        COUNT(CASE WHEN ae.event_type = 'stream' AND ae.device_type = 'mobile' THEN 1 END) as mobile_streams,
        COUNT(CASE WHEN ae.event_type = 'stream' AND ae.device_type = 'desktop' THEN 1 END) as desktop_streams
    FROM analytics_event ae
    WHERE DATE(ae.event_timestamp) = p_date
        AND ae.is_valid = TRUE
        AND ae.is_duplicate = FALSE
    GROUP BY DATE(ae.event_timestamp), ae.asset_id, ae.platform_code
    ON DUPLICATE KEY UPDATE
        total_streams = VALUES(total_streams),
        unique_listeners = VALUES(unique_listeners),
        saves_count = VALUES(saves_count),
        playlist_adds = VALUES(playlist_adds),
        shares_count = VALUES(shares_count),
        skip_rate_intro = VALUES(skip_rate_intro),
        completion_rate = VALUES(completion_rate),
        average_listen_duration = VALUES(average_listen_duration),
        mobile_streams = VALUES(mobile_streams),
        desktop_streams = VALUES(desktop_streams),
        updated_at = CURRENT_TIMESTAMP(6);
    
    COMMIT;
END //

-- Procedure to calculate fan engagement scores
CREATE PROCEDURE sp_calculate_fan_engagement_scores(IN p_date DATE)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Calculate engagement scores based on multi-dimensional behavior
    INSERT INTO fan_engagement (
        fan_segment_id,
        engagement_date,
        overall_engagement_score,
        streaming_engagement_score,
        sessions_per_week,
        tracks_per_session,
        repeat_listening_rate,
        platforms_used,
        fan_lifecycle_stage,
        churn_risk_score
    )
    SELECT 
        MD5(CONCAT(ae.user_id, DATE_FORMAT(p_date, '%Y%m'))) as fan_segment_id,
        p_date as engagement_date,
        -- Overall engagement score (weighted combination)
        (
            0.4 * (COUNT(DISTINCT DATE(ae.event_timestamp)) / 7) +  -- Frequency
            0.3 * (COUNT(CASE WHEN ae.event_type = 'stream' THEN 1 END) / 100) +  -- Volume
            0.2 * AVG(CASE WHEN ae.event_type = 'stream' THEN ae.event_duration_ms / 180000 ELSE 0 END) +  -- Depth
            0.1 * (COUNT(DISTINCT ae.platform_code) / 5)  -- Platform diversity
        ) as overall_engagement_score,
        -- Streaming-specific engagement
        COUNT(CASE WHEN ae.event_type = 'stream' THEN 1 END) / 100 as streaming_engagement_score,
        COUNT(DISTINCT ae.session_id) as sessions_per_week,
        COUNT(CASE WHEN ae.event_type = 'stream' THEN 1 END) / NULLIF(COUNT(DISTINCT ae.session_id), 0) as tracks_per_session,
        COUNT(DISTINCT CASE WHEN ae.event_type = 'stream' THEN ae.asset_id END) / 
            NULLIF(COUNT(CASE WHEN ae.event_type = 'stream' THEN 1 END), 0) as repeat_listening_rate,
        COUNT(DISTINCT ae.platform_code) as platforms_used,
        -- Lifecycle stage determination
        CASE 
            WHEN DATEDIFF(p_date, MIN(DATE(ae.event_timestamp))) < 7 THEN 'new'
            WHEN COUNT(CASE WHEN ae.event_type = 'stream' THEN 1 END) > 50 
                AND COUNT(DISTINCT DATE(ae.event_timestamp)) > 5 THEN 'loyal'
            WHEN MAX(DATE(ae.event_timestamp)) < DATE_SUB(p_date, INTERVAL 14 DAY) THEN 'at_risk'
            WHEN MAX(DATE(ae.event_timestamp)) < DATE_SUB(p_date, INTERVAL 30 DAY) THEN 'churned'
            ELSE 'growing'
        END as fan_lifecycle_stage,
        -- Churn risk (simplified)
        CASE 
            WHEN MAX(DATE(ae.event_timestamp)) < DATE_SUB(p_date, INTERVAL 7 DAY) THEN 0.8
            WHEN MAX(DATE(ae.event_timestamp)) < DATE_SUB(p_date, INTERVAL 3 DAY) THEN 0.5
            ELSE 0.2
        END as churn_risk_score
    FROM analytics_event ae
    WHERE ae.event_timestamp >= DATE_SUB(p_date, INTERVAL 7 DAY)
        AND ae.event_timestamp < DATE_ADD(p_date, INTERVAL 1 DAY)
        AND ae.is_valid = TRUE
        AND ae.user_id IS NOT NULL
    GROUP BY ae.user_id
    ON DUPLICATE KEY UPDATE
        overall_engagement_score = VALUES(overall_engagement_score),
        streaming_engagement_score = VALUES(streaming_engagement_score),
        sessions_per_week = VALUES(sessions_per_week),
        tracks_per_session = VALUES(tracks_per_session),
        repeat_listening_rate = VALUES(repeat_listening_rate),
        platforms_used = VALUES(platforms_used),
        fan_lifecycle_stage = VALUES(fan_lifecycle_stage),
        churn_risk_score = VALUES(churn_risk_score);
    
    COMMIT;
END //

-- Procedure to detect trending content
CREATE PROCEDURE sp_detect_trending_content(IN p_date DATE)
BEGIN
    DECLARE v_growth_threshold DECIMAL(10,4) DEFAULT 0.5; -- 50% growth
    DECLARE v_momentum_threshold DECIMAL(10,4) DEFAULT 0.7;
    
    START TRANSACTION;
    
    -- Identify trending tracks based on growth patterns
    INSERT INTO trend_analysis (
        trend_type,
        trend_name,
        trend_score,
        growth_rate,
        momentum_score,
        detected_date,
        example_tracks,
        affected_territories
    )
    SELECT 
        'track' as trend_type,
        CONCAT('Viral Track: ', a.asset_title) as trend_name,
        -- Trend score based on multiple factors
        (
            0.4 * (sm_current.total_streams / NULLIF(sm_previous.total_streams, 0) - 1) +
            0.3 * (sm_current.playlist_adds / NULLIF(AVG(sm_all.playlist_adds), 0)) +
            0.3 * (sm_current.unique_listeners / NULLIF(sm_previous.unique_listeners, 0) - 1)
        ) as trend_score,
        (sm_current.total_streams / NULLIF(sm_previous.total_streams, 0) - 1) as growth_rate,
        -- Momentum based on acceleration
        (
            (sm_current.total_streams - sm_previous.total_streams) / 
            NULLIF(sm_previous.total_streams - sm_week_ago.total_streams, 0)
        ) as momentum_score,
        p_date as detected_date,
        JSON_OBJECT('asset_id', a.asset_id, 'asset_title', a.asset_title) as example_tracks,
        (
            SELECT JSON_ARRAYAGG(DISTINCT gp.country_code)
            FROM geographic_performance gp
            WHERE gp.asset_id = a.asset_id
                AND gp.performance_date = p_date
        ) as affected_territories
    FROM asset a
    JOIN streaming_metric sm_current ON a.asset_id = sm_current.asset_id 
        AND sm_current.metric_date = p_date
    JOIN streaming_metric sm_previous ON a.asset_id = sm_previous.asset_id 
        AND sm_previous.metric_date = DATE_SUB(p_date, INTERVAL 1 DAY)
    LEFT JOIN streaming_metric sm_week_ago ON a.asset_id = sm_week_ago.asset_id 
        AND sm_week_ago.metric_date = DATE_SUB(p_date, INTERVAL 7 DAY)
    CROSS JOIN (
        SELECT AVG(playlist_adds) as playlist_adds
        FROM streaming_metric
        WHERE metric_date = p_date
    ) sm_all
    WHERE (sm_current.total_streams / NULLIF(sm_previous.total_streams, 0) - 1) > v_growth_threshold
    GROUP BY a.asset_id, a.asset_title, sm_current.total_streams, sm_previous.total_streams, 
             sm_current.playlist_adds, sm_current.unique_listeners, sm_previous.unique_listeners,
             sm_week_ago.total_streams
    HAVING momentum_score > v_momentum_threshold;
    
    COMMIT;
END //

DELIMITER ;

-- =====================================================
-- SAMPLE DATA FOR TESTING
-- =====================================================

-- Insert sample metrics
INSERT INTO analytics_metric (metric_code, metric_name, metric_category, metric_type, display_unit, is_key_metric) VALUES
('total_streams', 'Total Streams', 'engagement', 'sum', 'number', TRUE),
('unique_listeners', 'Unique Listeners', 'engagement', 'count', 'number', TRUE),
('completion_rate', 'Completion Rate', 'engagement', 'average', 'percentage', TRUE),
('revenue_per_stream', 'Revenue Per Stream', 'revenue', 'average', 'currency', TRUE),
('playlist_reach', 'Playlist Reach', 'performance', 'sum', 'number', FALSE),
('skip_rate', 'Skip Rate', 'engagement', 'average', 'percentage', FALSE),
('save_rate', 'Save Rate', 'engagement', 'average', 'percentage', FALSE),
('viral_coefficient', 'Viral Coefficient', 'growth', 'average', 'number', FALSE);

-- Insert sample dimensions
INSERT INTO analytics_dimension (dimension_code, dimension_name, dimension_type, estimated_cardinality) VALUES
('platform', 'Streaming Platform', 'platform', 50),
('country', 'Country', 'geography', 200),
('age_group', 'Age Group', 'demographic', 10),
('device_type', 'Device Type', 'technology', 10),
('genre', 'Music Genre', 'content', 100),
('release_type', 'Release Type', 'content', 5),
('day_of_week', 'Day of Week', 'time', 7),
('hour_of_day', 'Hour of Day', 'time', 24);

-- Insert sample ML models
INSERT INTO prediction_model (model_name, model_type, model_version, algorithm, framework, accuracy_score, deployment_status) VALUES
('Hit Predictor', 'hit_prediction', '2.1.0', 'gradient_boosting', 'scikit-learn', 0.8745, 'production'),
('Revenue Forecaster', 'revenue_forecast', '1.5.2', 'lstm', 'tensorflow', 0.9123, 'production'),
('Churn Predictor', 'churn', '1.2.0', 'random_forest', 'scikit-learn', 0.8234, 'staging'),
('Genre Classifier', 'genre_classification', '3.0.1', 'deep_neural_network', 'pytorch', 0.9456, 'production');

-- =====================================================
-- INDEXES FOR QUERY OPTIMIZATION
-- =====================================================

-- Additional composite indexes for common query patterns
CREATE INDEX idx_event_user_asset_date ON analytics_event(user_id, asset_id, event_timestamp);
CREATE INDEX idx_streaming_asset_platform_date ON streaming_metric(asset_id, platform_code, metric_date);
CREATE INDEX idx_geo_performance_composite ON geographic_performance(country_code, performance_date, total_streams);
CREATE INDEX idx_trend_detection ON trend_analysis(trend_type, detected_date, trend_score);

-- =====================================================
-- GRANTS (adjust according to your user setup)
-- =====================================================

-- GRANT SELECT ON astro_music.* TO 'analytics_read'@'%';
-- GRANT SELECT, INSERT, UPDATE ON astro_music.analytics_* TO 'analytics_write'@'%';
-- GRANT EXECUTE ON PROCEDURE astro_music.sp_* TO 'analytics_etl'@'%';

-- =====================================================
-- SECTION 19: CONTENT MANAGEMENT TABLES
-- =====================================================

-- Table: file
CREATE TABLE file (
    file_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    file_uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    catalog_item_id INT UNSIGNED,
    file_type VARCHAR(50) NOT NULL, -- 'audio_master', 'audio_stem', 'video', 'image', 'document', 'spatial_audio'
    file_name VARCHAR(500) NOT NULL,
    file_extension VARCHAR(10) NOT NULL,
    mime_type VARCHAR(100) NOT NULL,
    file_size_bytes BIGINT UNSIGNED NOT NULL,
    file_hash_sha256 CHAR(64) NOT NULL, -- SHA-256 hash for integrity
    file_hash_md5 CHAR(32) NOT NULL, -- MD5 for compatibility
    blockchain_hash VARCHAR(100), -- Ethereum/IPFS hash
    blockchain_network VARCHAR(50), -- 'ethereum', 'solana', 'ipfs'
    blockchain_tx_hash VARCHAR(100), -- Transaction hash for verification
    perceptual_hash VARCHAR(100), -- For duplicate detection
    storage_provider VARCHAR(50) NOT NULL, -- 'aws_s3', 'ipfs', 'arweave', 'google_cloud'
    storage_path TEXT NOT NULL,
    storage_region VARCHAR(50),
    cdn_url TEXT,
    backup_locations JSON, -- Array of backup storage locations
    encryption_status VARCHAR(20) NOT NULL DEFAULT 'none', -- 'none', 'aes256', 'rsa2048'
    compression_type VARCHAR(20), -- 'gzip', 'brotli', 'zstd'
    original_file_id INT UNSIGNED, -- Reference to original if this is processed
    upload_started_at DATETIME(6) NOT NULL,
    upload_completed_at DATETIME(6),
    upload_progress_percent DECIMAL(5,2),
    uploaded_by_user_id INT UNSIGNED NOT NULL,
    file_status VARCHAR(20) NOT NULL DEFAULT 'uploading', -- 'uploading', 'processing', 'active', 'archived', 'deleted'
    access_level VARCHAR(20) NOT NULL DEFAULT 'private', -- 'public', 'private', 'restricted', 'confidential'
    retention_policy VARCHAR(50), -- 'permanent', '7_years', 'until_deleted'
    expiration_date DATETIME,
    last_accessed_at DATETIME(6),
    access_count INT UNSIGNED DEFAULT 0,
    bandwidth_used_mb DECIMAL(15,2) DEFAULT 0,
    tags JSON, -- Flexible tagging system
    custom_metadata JSON, -- Industry-specific metadata
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    deletion_reason VARCHAR(500),
    INDEX idx_file_catalog (catalog_item_id),
    INDEX idx_file_type (file_type),
    INDEX idx_file_status (file_status),
    INDEX idx_file_hash (file_hash_sha256),
    INDEX idx_blockchain_hash (blockchain_hash),
    INDEX idx_perceptual_hash (perceptual_hash),
    INDEX idx_upload_date (upload_completed_at),
    INDEX idx_access_level (access_level),
    FULLTEXT idx_file_name (file_name),
    CONSTRAINT fk_file_original FOREIGN KEY (original_file_id) REFERENCES file(file_id),
    CONSTRAINT fk_file_uploaded_by FOREIGN KEY (uploaded_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: file_encryption
-- Encrypted file storage with military-grade security
CREATE TABLE file_encryption (
    encryption_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    file_id INT UNSIGNED NOT NULL,
    encryption_algorithm VARCHAR(50) NOT NULL, -- 'AES-256-GCM', 'ChaCha20-Poly1305'
    key_derivation_function VARCHAR(50) NOT NULL, -- 'PBKDF2', 'Argon2id'
    encrypted_key TEXT NOT NULL, -- RSA-encrypted AES key
    key_encryption_algorithm VARCHAR(50) NOT NULL DEFAULT 'RSA-4096',
    initialization_vector VARCHAR(100) NOT NULL,
    authentication_tag VARCHAR(100), -- For GCM mode
    salt VARCHAR(100) NOT NULL,
    iterations INT UNSIGNED NOT NULL DEFAULT 100000,
    encrypted_at DATETIME(6) NOT NULL,
    encrypted_by_user_id INT UNSIGNED NOT NULL,
    key_rotation_schedule VARCHAR(50), -- 'monthly', 'quarterly', 'annual'
    last_key_rotation DATETIME(6),
    access_log JSON, -- Track who accessed encrypted content
    emergency_access_users JSON, -- Users who can decrypt in emergencies
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_file_encryption (file_id),
    INDEX idx_encryption_algorithm (encryption_algorithm),
    INDEX idx_encrypted_at (encrypted_at),
    CONSTRAINT fk_file_encryption_file FOREIGN KEY (file_id) REFERENCES file(file_id),
    CONSTRAINT fk_file_encryption_user FOREIGN KEY (encrypted_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: file_version
-- Git-like version control for all assets
CREATE TABLE file_version (
    version_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    file_id INT UNSIGNED NOT NULL,
    version_number VARCHAR(20) NOT NULL, -- 'v1.0.0', 'v2.1.3'
    version_label VARCHAR(200), -- 'Radio Edit', 'Extended Mix', 'Director\'s Cut'
    parent_version_id INT UNSIGNED, -- For branching
    branch_name VARCHAR(100) DEFAULT 'main',
    commit_hash CHAR(40) NOT NULL, -- Git-style commit hash
    commit_message TEXT,
    change_type VARCHAR(50) NOT NULL, -- 'major', 'minor', 'patch', 'hotfix'
    changes_summary JSON, -- Structured change log
    diff_from_parent JSON, -- Technical differences
    file_size_bytes BIGINT UNSIGNED NOT NULL,
    file_hash_sha256 CHAR(64) NOT NULL,
    quality_metrics JSON, -- LUFS, bitrate, resolution, etc.
    approval_status VARCHAR(20) NOT NULL DEFAULT 'draft', -- 'draft', 'review', 'approved', 'released'
    approved_by_user_id INT UNSIGNED,
    approved_at DATETIME(6),
    release_date DATETIME,
    is_public BOOLEAN DEFAULT FALSE,
    download_count INT UNSIGNED DEFAULT 0,
    created_by_user_id INT UNSIGNED NOT NULL,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    archived_at DATETIME(6),
    INDEX idx_version_file (file_id),
    INDEX idx_version_number (version_number),
    INDEX idx_version_branch (branch_name),
    INDEX idx_version_status (approval_status),
    INDEX idx_version_created (created_at),
    UNIQUE KEY uk_file_version (file_id, version_number),
    CONSTRAINT fk_file_version_file FOREIGN KEY (file_id) REFERENCES file(file_id),
    CONSTRAINT fk_file_version_parent FOREIGN KEY (parent_version_id) REFERENCES file_version(version_id),
    CONSTRAINT fk_file_version_approved_by FOREIGN KEY (approved_by_user_id) REFERENCES user(user_id),
    CONSTRAINT fk_file_version_created_by FOREIGN KEY (created_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: asset_bundle
-- Grouping of related assets (album packages, NFT collections)
CREATE TABLE asset_bundle (
    bundle_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    bundle_uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    bundle_type VARCHAR(50) NOT NULL, -- 'album_package', 'single_release', 'nft_collection', 'sync_package'
    bundle_name VARCHAR(300) NOT NULL,
    bundle_description TEXT,
    catalog_item_id INT UNSIGNED,
    total_size_bytes BIGINT UNSIGNED DEFAULT 0,
    file_count INT UNSIGNED DEFAULT 0,
    bundle_metadata JSON, -- Flexible metadata for different bundle types
    nft_contract_address VARCHAR(100), -- For NFT bundles
    nft_token_standard VARCHAR(20), -- 'ERC-721', 'ERC-1155'
    smart_contract_rules JSON, -- Automated distribution rules
    pricing_tiers JSON, -- Different access levels and pricing
    release_strategy VARCHAR(50), -- 'immediate', 'scheduled', 'waterfall'
    release_date DATETIME,
    embargo_regions JSON, -- Geographic restrictions
    bundle_status VARCHAR(20) NOT NULL DEFAULT 'draft', -- 'draft', 'ready', 'released', 'archived'
    visibility VARCHAR(20) NOT NULL DEFAULT 'private', -- 'public', 'private', 'unlisted'
    created_by_user_id INT UNSIGNED NOT NULL,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_bundle_type (bundle_type),
    INDEX idx_bundle_catalog (catalog_item_id),
    INDEX idx_bundle_status (bundle_status),
    INDEX idx_bundle_release (release_date),
    FULLTEXT idx_bundle_name_desc (bundle_name, bundle_description),
    CONSTRAINT fk_bundle_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id),
    CONSTRAINT fk_bundle_created_by FOREIGN KEY (created_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: asset_relationship
-- Complex relationships between assets with semantic meaning
CREATE TABLE asset_relationship (
    relationship_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    parent_file_id INT UNSIGNED NOT NULL,
    child_file_id INT UNSIGNED NOT NULL,
    relationship_type VARCHAR(50) NOT NULL, -- 'master_to_stem', 'original_to_remix', 'audio_to_video'
    relationship_subtype VARCHAR(50), -- 'vocal_stem', 'instrumental', 'official_video'
    bundle_id INT UNSIGNED,
    sequence_order INT UNSIGNED, -- For ordered relationships
    relationship_metadata JSON, -- Type-specific metadata
    sync_offset_ms INT, -- Synchronization offset for related media
    is_primary BOOLEAN DEFAULT FALSE, -- Primary relationship in a set
    quality_tier VARCHAR(20), -- 'master', 'high', 'standard', 'preview'
    access_requirements JSON, -- Conditions for accessing related asset
    usage_restrictions JSON, -- Limitations on how assets can be used together
    created_by_user_id INT UNSIGNED NOT NULL,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_relationship_parent (parent_file_id),
    INDEX idx_relationship_child (child_file_id),
    INDEX idx_relationship_type (relationship_type),
    INDEX idx_relationship_bundle (bundle_id),
    UNIQUE KEY uk_asset_relationship (parent_file_id, child_file_id, relationship_type),
    CONSTRAINT fk_relationship_parent FOREIGN KEY (parent_file_id) REFERENCES file(file_id),
    CONSTRAINT fk_relationship_child FOREIGN KEY (child_file_id) REFERENCES file(file_id),
    CONSTRAINT fk_relationship_bundle FOREIGN KEY (bundle_id) REFERENCES asset_bundle(bundle_id),
    CONSTRAINT fk_relationship_created_by FOREIGN KEY (created_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: audio_master
-- Master recordings with comprehensive technical metadata
CREATE TABLE audio_master (
    audio_master_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    file_id INT UNSIGNED NOT NULL,
    catalog_item_id INT UNSIGNED NOT NULL,
    isrc VARCHAR(20),
    duration_ms INT UNSIGNED NOT NULL,
    duration_formatted VARCHAR(20) NOT NULL, -- 'MM:SS.mmm'
    sample_rate INT UNSIGNED NOT NULL, -- 44100, 48000, 96000, 192000
    bit_depth INT UNSIGNED NOT NULL, -- 16, 24, 32
    channels INT UNSIGNED NOT NULL, -- 1=mono, 2=stereo, 6=5.1, etc.
    channel_layout VARCHAR(50), -- 'stereo', '5.1', '7.1.4'
    codec VARCHAR(50) NOT NULL, -- 'PCM', 'FLAC', 'ALAC', 'AAC'
    bitrate_kbps INT UNSIGNED,
    is_lossless BOOLEAN NOT NULL DEFAULT TRUE,
    loudness_lufs DECIMAL(5,2), -- Integrated loudness
    loudness_range DECIMAL(5,2), -- Dynamic range
    true_peak_dbfs DECIMAL(5,2), -- Maximum true peak
    peak_to_average_ratio DECIMAL(5,2), -- Crest factor
    spectral_analysis JSON, -- Frequency distribution data
    phase_correlation DECIMAL(3,2), -- Stereo field analysis
    has_clipping BOOLEAN DEFAULT FALSE,
    clipping_count INT UNSIGNED DEFAULT 0,
    silence_start_ms INT UNSIGNED, -- Leading silence
    silence_end_ms INT UNSIGNED, -- Trailing silence
    bpm DECIMAL(6,2), -- Detected tempo
    musical_key VARCHAR(10), -- 'C major', 'A minor'
    time_signature VARCHAR(10), -- '4/4', '3/4', '6/8'
    mood_tags JSON, -- AI-detected moods
    instrument_analysis JSON, -- Detected instruments with confidence
    vocal_presence BOOLEAN DEFAULT FALSE,
    vocal_gender VARCHAR(20), -- 'male', 'female', 'mixed', 'none'
    language_detected VARCHAR(10), -- ISO 639-1 code
    explicit_content BOOLEAN DEFAULT FALSE,
    explicit_content_tags JSON, -- Specific flagged content
    mastering_engineer VARCHAR(200),
    mastering_studio VARCHAR(200),
    mastering_date DATE,
    mastering_notes TEXT,
    master_source VARCHAR(50), -- 'analog_tape', 'digital_console', 'daw'
    remaster_of_id INT UNSIGNED, -- Link to original master
    fingerprint_acoustid VARCHAR(100), -- AcoustID fingerprint
    fingerprint_chromaprint TEXT, -- Chromaprint data
    musicbrainz_recording_id CHAR(36),
    processing_status VARCHAR(20) NOT NULL DEFAULT 'pending', -- 'pending', 'analyzing', 'complete', 'failed'
    processing_log JSON, -- Detailed processing information
    quality_score DECIMAL(3,2), -- 0-10 automated quality rating
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_audio_master_file (file_id),
    INDEX idx_audio_catalog (catalog_item_id),
    INDEX idx_audio_isrc (isrc),
    INDEX idx_audio_duration (duration_ms),
    INDEX idx_audio_quality (sample_rate, bit_depth),
    INDEX idx_audio_loudness (loudness_lufs),
    INDEX idx_audio_bpm (bpm),
    INDEX idx_audio_key (musical_key),
    INDEX idx_audio_explicit (explicit_content),
    INDEX idx_audio_processing (processing_status),
    INDEX idx_audio_fingerprint (fingerprint_acoustid),
    CONSTRAINT fk_audio_master_file FOREIGN KEY (file_id) REFERENCES file(file_id),
    CONSTRAINT fk_audio_master_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id),
    CONSTRAINT fk_audio_master_remaster FOREIGN KEY (remaster_of_id) REFERENCES audio_master(audio_master_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: audio_master_encrypted
-- Encrypted masters with granular access control
CREATE TABLE audio_master_encrypted (
    encrypted_master_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    audio_master_id INT UNSIGNED NOT NULL,
    file_id INT UNSIGNED NOT NULL,
    encryption_id INT UNSIGNED NOT NULL,
    access_tier VARCHAR(50) NOT NULL, -- 'label_only', 'internal', 'premium_partners'
    watermark_enabled BOOLEAN DEFAULT TRUE,
    watermark_type VARCHAR(50), -- 'audio', 'psychoacoustic', 'spread_spectrum'
    watermark_payload JSON, -- Embedded identification data
    drm_protection VARCHAR(50), -- 'widevine', 'fairplay', 'playready'
    allowed_plays INT UNSIGNED, -- NULL for unlimited
    expiration_date DATETIME,
    geo_restrictions JSON, -- Allowed/blocked regions
    device_restrictions JSON, -- Allowed device types
    quality_cap VARCHAR(20), -- Maximum allowed quality
    forensic_marking BOOLEAN DEFAULT FALSE, -- Unique ID per download
    access_log_retention_days INT UNSIGNED DEFAULT 365,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_encrypted_master (audio_master_id),
    INDEX idx_encrypted_file (file_id),
    INDEX idx_encrypted_tier (access_tier),
    INDEX idx_encrypted_expiration (expiration_date),
    CONSTRAINT fk_encrypted_master FOREIGN KEY (audio_master_id) REFERENCES audio_master(audio_master_id),
    CONSTRAINT fk_encrypted_file FOREIGN KEY (file_id) REFERENCES file(file_id),
    CONSTRAINT fk_encrypted_encryption FOREIGN KEY (encryption_id) REFERENCES file_encryption(encryption_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: audio_stem
-- Individual instrument/vocal stems for remixing and licensing
CREATE TABLE audio_stem (
    stem_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    audio_master_id INT UNSIGNED NOT NULL,
    file_id INT UNSIGNED NOT NULL,
    stem_type VARCHAR(50) NOT NULL, -- 'vocal', 'drums', 'bass', 'guitar', 'keys', 'strings'
    stem_subtype VARCHAR(50), -- 'lead_vocal', 'backing_vocal', 'kick_drum'
    stem_name VARCHAR(200) NOT NULL,
    track_number INT UNSIGNED,
    duration_ms INT UNSIGNED NOT NULL,
    sample_rate INT UNSIGNED NOT NULL,
    bit_depth INT UNSIGNED NOT NULL,
    channels INT UNSIGNED NOT NULL,
    loudness_lufs DECIMAL(5,2),
    frequency_range_low_hz INT UNSIGNED, -- Dominant frequency range
    frequency_range_high_hz INT UNSIGNED,
    has_effects BOOLEAN DEFAULT FALSE, -- Wet or dry stem
    effects_chain JSON, -- List of applied effects
    isolation_quality DECIMAL(3,2), -- 0-10 quality of separation
    bleed_amount DECIMAL(3,2), -- Amount of other instruments
    phase_aligned BOOLEAN DEFAULT TRUE,
    tempo_synced BOOLEAN DEFAULT TRUE,
    is_ai_separated BOOLEAN DEFAULT FALSE,
    separation_algorithm VARCHAR(50), -- 'spleeter', 'demucs', 'manual'
    midi_available BOOLEAN DEFAULT FALSE,
    midi_file_id INT UNSIGNED,
    licensing_tier VARCHAR(50), -- 'basic', 'pro', 'exclusive'
    usage_restrictions JSON,
    stem_notes TEXT,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_stem_master (audio_master_id),
    INDEX idx_stem_file (file_id),
    INDEX idx_stem_type (stem_type, stem_subtype),
    INDEX idx_stem_track (track_number),
    INDEX idx_stem_licensing (licensing_tier),
    CONSTRAINT fk_stem_master FOREIGN KEY (audio_master_id) REFERENCES audio_master(audio_master_id),
    CONSTRAINT fk_stem_file FOREIGN KEY (file_id) REFERENCES file(file_id),
    CONSTRAINT fk_stem_midi FOREIGN KEY (midi_file_id) REFERENCES file(file_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: spatial_audio
-- Next-gen immersive audio formats (Dolby Atmos, 360 Reality Audio)
CREATE TABLE spatial_audio (
    spatial_audio_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    audio_master_id INT UNSIGNED NOT NULL,
    file_id INT UNSIGNED NOT NULL,
    spatial_format VARCHAR(50) NOT NULL, -- 'dolby_atmos', 'sony_360', 'auro3d', 'dts_x'
    format_version VARCHAR(20),
    object_count INT UNSIGNED, -- Number of audio objects
    bed_channel_count INT UNSIGNED, -- Traditional channel count
    height_channels INT UNSIGNED, -- Height layer channels
    binaural_render_mode VARCHAR(50), -- 'static', 'tracked', 'personalized'
    hrtf_profile VARCHAR(50), -- Head-related transfer function
    room_model VARCHAR(50), -- 'studio', 'concert_hall', 'arena'
    loudness_lufs DECIMAL(5,2),
    immersive_mix_engineer VARCHAR(200),
    immersive_mix_studio VARCHAR(200),
    immersive_mix_date DATE,
    renderer_metadata JSON, -- Format-specific rendering data
    platform_optimization JSON, -- Platform-specific versions
    headphone_optimized BOOLEAN DEFAULT TRUE,
    speaker_configuration JSON, -- Supported speaker layouts
    certification_status VARCHAR(50), -- 'pending', 'certified', 'rejected'
    certification_date DATETIME,
    certification_notes TEXT,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_spatial_format (audio_master_id, spatial_format),
    INDEX idx_spatial_file (file_id),
    INDEX idx_spatial_format (spatial_format),
    INDEX idx_spatial_certification (certification_status),
    CONSTRAINT fk_spatial_master FOREIGN KEY (audio_master_id) REFERENCES audio_master(audio_master_id),
    CONSTRAINT fk_spatial_file FOREIGN KEY (file_id) REFERENCES file(file_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: video_asset
-- Music videos, visualizers, and video content
CREATE TABLE video_asset (
    video_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    file_id INT UNSIGNED NOT NULL,
    catalog_item_id INT UNSIGNED,
    video_type VARCHAR(50) NOT NULL, -- 'music_video', 'lyric_video', 'visualizer', 'documentary'
    title VARCHAR(300) NOT NULL,
    director VARCHAR(200),
    production_company VARCHAR(200),
    release_date DATE,
    duration_ms INT UNSIGNED NOT NULL,
    duration_formatted VARCHAR(20) NOT NULL, -- 'HH:MM:SS.mmm'
    resolution_width INT UNSIGNED NOT NULL,
    resolution_height INT UNSIGNED NOT NULL,
    resolution_label VARCHAR(20), -- '4K', '1080p', '720p'
    aspect_ratio VARCHAR(20), -- '16:9', '21:9', '9:16' (vertical)
    frame_rate DECIMAL(6,3) NOT NULL, -- 23.976, 24, 25, 29.97, 30, 60
    video_codec VARCHAR(50) NOT NULL, -- 'h264', 'h265', 'vp9', 'av1', 'prores'
    video_bitrate_kbps INT UNSIGNED,
    color_space VARCHAR(50), -- 'sRGB', 'rec709', 'rec2020', 'P3'
    hdr_format VARCHAR(50), -- 'HDR10', 'HDR10+', 'Dolby Vision', 'HLG'
    audio_codec VARCHAR(50), -- 'aac', 'opus', 'pcm'
    audio_bitrate_kbps INT UNSIGNED,
    audio_channels INT UNSIGNED,
    has_subtitles BOOLEAN DEFAULT FALSE,
    subtitle_languages JSON, -- Array of language codes
    has_chapters BOOLEAN DEFAULT FALSE,
    chapter_markers JSON, -- Timecodes and titles
    content_rating VARCHAR(20), -- 'G', 'PG', 'PG-13', 'R', 'NC-17'
    content_warnings JSON, -- Specific content flags
    isrc_video VARCHAR(20), -- Video ISRC if different
    isan VARCHAR(30), -- International Standard Audiovisual Number
    youtube_content_id VARCHAR(50),
    vevo_id VARCHAR(50),
    thumbnail_file_id INT UNSIGNED,
    preview_file_id INT UNSIGNED, -- Lower quality preview
    trailer_file_id INT UNSIGNED,
    processing_status VARCHAR(20) NOT NULL DEFAULT 'pending',
    scene_detection JSON, -- AI-detected scene changes
    object_detection JSON, -- AI-detected objects/people
    transcript_available BOOLEAN DEFAULT FALSE,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_video_file (file_id),
    INDEX idx_video_catalog (catalog_item_id),
    INDEX idx_video_type (video_type),
    INDEX idx_video_resolution (resolution_label),
    INDEX idx_video_release (release_date),
    INDEX idx_video_rating (content_rating),
    INDEX idx_video_isrc (isrc_video),
    FULLTEXT idx_video_title_director (title, director),
    CONSTRAINT fk_video_file FOREIGN KEY (file_id) REFERENCES file(file_id),
    CONSTRAINT fk_video_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id),
    CONSTRAINT fk_video_thumbnail FOREIGN KEY (thumbnail_file_id) REFERENCES file(file_id),
    CONSTRAINT fk_video_preview FOREIGN KEY (preview_file_id) REFERENCES file(file_id),
    CONSTRAINT fk_video_trailer FOREIGN KEY (trailer_file_id) REFERENCES file(file_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: motion_artwork
-- Animated covers, NFT visuals, and motion graphics
CREATE TABLE motion_artwork (
    motion_artwork_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    file_id INT UNSIGNED NOT NULL,
    catalog_item_id INT UNSIGNED,
    artwork_type VARCHAR(50) NOT NULL, -- 'animated_cover', 'nft_visual', 'canvas_loop'
    title VARCHAR(300),
    artist_name VARCHAR(200),
    duration_ms INT UNSIGNED,
    is_looping BOOLEAN DEFAULT TRUE,
    loop_point_ms INT UNSIGNED, -- Seamless loop point
    resolution_width INT UNSIGNED NOT NULL,
    resolution_height INT UNSIGNED NOT NULL,
    frame_rate DECIMAL(6,3),
    has_alpha_channel BOOLEAN DEFAULT FALSE,
    animation_style VARCHAR(50), -- '2d', '3d', 'generative', 'particle'
    render_engine VARCHAR(50), -- 'after_effects', 'blender', 'touchdesigner'
    interactive_elements JSON, -- For interactive NFTs
    color_palette JSON, -- Dominant colors
    visual_themes JSON, -- AI-detected themes
    spotify_canvas_approved BOOLEAN DEFAULT FALSE,
    apple_motion_approved BOOLEAN DEFAULT FALSE,
    nft_metadata JSON, -- OpenSea/Rarible metadata
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_motion_file (file_id),
    INDEX idx_motion_catalog (catalog_item_id),
    INDEX idx_motion_type (artwork_type),
    INDEX idx_motion_spotify (spotify_canvas_approved),
    CONSTRAINT fk_motion_file FOREIGN KEY (file_id) REFERENCES file(file_id),
    CONSTRAINT fk_motion_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: multimedia_asset
-- General multimedia files (images, documents, etc.)
CREATE TABLE multimedia_asset (
    multimedia_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    file_id INT UNSIGNED NOT NULL,
    catalog_item_id INT UNSIGNED,
    asset_type VARCHAR(50) NOT NULL, -- 'cover_art', 'press_photo', 'liner_notes', 'contract'
    asset_subtype VARCHAR(50), -- 'front_cover', 'back_cover', 'booklet_page'
    title VARCHAR(300),
    description TEXT,
    width_px INT UNSIGNED, -- For images
    height_px INT UNSIGNED,
    dpi INT UNSIGNED, -- Print resolution
    color_mode VARCHAR(20), -- 'RGB', 'CMYK', 'grayscale'
    has_transparency BOOLEAN DEFAULT FALSE,
    page_count INT UNSIGNED, -- For documents
    word_count INT UNSIGNED,
    language VARCHAR(10), -- ISO 639-1
    is_print_ready BOOLEAN DEFAULT FALSE,
    print_specifications JSON, -- Bleed, crop marks, etc.
    usage_rights VARCHAR(50), -- 'exclusive', 'non_exclusive', 'editorial'
    photographer_credit VARCHAR(200),
    designer_credit VARCHAR(200),
    copyright_notice TEXT,
    model_releases JSON, -- For photos with people
    property_releases JSON, -- For locations/objects
    keywords JSON, -- Searchable tags
    exif_data JSON, -- Camera metadata
    ai_analysis JSON, -- Object/face detection
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_multimedia_file (file_id),
    INDEX idx_multimedia_catalog (catalog_item_id),
    INDEX idx_multimedia_type (asset_type, asset_subtype),
    INDEX idx_multimedia_usage (usage_rights),
    FULLTEXT idx_multimedia_search (title, description),
    CONSTRAINT fk_multimedia_file FOREIGN KEY (file_id) REFERENCES file(file_id),
    CONSTRAINT fk_multimedia_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: multimedia_format
-- Technical format specifications and requirements
CREATE TABLE multimedia_format (
    format_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    format_code VARCHAR(50) NOT NULL UNIQUE, -- 'spotify_cover', 'apple_master', 'youtube_4k'
    platform VARCHAR(50) NOT NULL, -- 'spotify', 'apple_music', 'youtube'
    media_type VARCHAR(20) NOT NULL, -- 'audio', 'video', 'image'
    format_name VARCHAR(100) NOT NULL,
    format_description TEXT,
    file_extension VARCHAR(10),
    mime_type VARCHAR(100),
    min_width_px INT UNSIGNED,
    max_width_px INT UNSIGNED,
    min_height_px INT UNSIGNED,
    max_height_px INT UNSIGNED,
    aspect_ratio_required VARCHAR(20),
    min_file_size_bytes BIGINT UNSIGNED,
    max_file_size_bytes BIGINT UNSIGNED,
    min_bitrate_kbps INT UNSIGNED,
    max_bitrate_kbps INT UNSIGNED,
    required_sample_rate INT UNSIGNED,
    required_bit_depth INT UNSIGNED,
    required_channels INT UNSIGNED,
    loudness_target_lufs DECIMAL(5,2),
    loudness_tolerance DECIMAL(3,2),
    codec_whitelist JSON, -- Allowed codecs
    color_space_required VARCHAR(50),
    metadata_requirements JSON, -- Required metadata fields
    validation_rules JSON, -- Custom validation logic
    effective_date DATE NOT NULL,
    expiration_date DATE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_format_platform (platform),
    INDEX idx_format_type (media_type),
    INDEX idx_format_active (is_active),
    INDEX idx_format_dates (effective_date, expiration_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: multimedia_processing
-- Queue and tracking for media processing tasks
CREATE TABLE multimedia_processing (
    processing_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    processing_uuid CHAR(36) NOT NULL UNIQUE DEFAULT (UUID()),
    source_file_id INT UNSIGNED NOT NULL,
    target_format_id INT UNSIGNED,
    processing_type VARCHAR(50) NOT NULL, -- 'transcode', 'normalize', 'watermark', 'extract_stems'
    processing_profile JSON NOT NULL, -- Detailed processing parameters
    priority VARCHAR(20) NOT NULL DEFAULT 'normal', -- 'low', 'normal', 'high', 'urgent'
    status VARCHAR(20) NOT NULL DEFAULT 'queued', -- 'queued', 'processing', 'completed', 'failed'
    progress_percent DECIMAL(5,2) DEFAULT 0,
    worker_id VARCHAR(100), -- Processing server/worker
    started_at DATETIME(6),
    completed_at DATETIME(6),
    processing_time_ms INT UNSIGNED,
    output_file_id INT UNSIGNED,
    output_files JSON, -- Multiple outputs possible
    quality_metrics JSON, -- Post-processing quality checks
    cost_credits DECIMAL(10,2), -- Processing cost in credits
    error_code VARCHAR(50),
    error_message TEXT,
    retry_count INT UNSIGNED DEFAULT 0,
    max_retries INT UNSIGNED DEFAULT 3,
    callback_url TEXT, -- Webhook for completion
    requested_by_user_id INT UNSIGNED NOT NULL,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_processing_source (source_file_id),
    INDEX idx_processing_status (status),
    INDEX idx_processing_priority (priority, status),
    INDEX idx_processing_started (started_at),
    INDEX idx_processing_worker (worker_id),
    CONSTRAINT fk_processing_source FOREIGN KEY (source_file_id) REFERENCES file(file_id),
    CONSTRAINT fk_processing_format FOREIGN KEY (target_format_id) REFERENCES multimedia_format(format_id),
    CONSTRAINT fk_processing_output FOREIGN KEY (output_file_id) REFERENCES file(file_id),
    CONSTRAINT fk_processing_user FOREIGN KEY (requested_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: lyrics
-- Song lyrics with language support and metadata
CREATE TABLE lyrics (
    lyrics_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    catalog_item_id INT UNSIGNED NOT NULL,
    lyrics_text TEXT NOT NULL,
    lyrics_language VARCHAR(10) NOT NULL, -- ISO 639-1
    lyrics_type VARCHAR(50) NOT NULL DEFAULT 'original', -- 'original', 'romanized', 'phonetic'
    line_count INT UNSIGNED,
    word_count INT UNSIGNED,
    unique_word_count INT UNSIGNED,
    reading_level VARCHAR(20), -- 'elementary', 'intermediate', 'advanced'
    sentiment_score DECIMAL(3,2), -- -1 to 1 sentiment analysis
    explicit_content BOOLEAN DEFAULT FALSE,
    explicit_words JSON, -- Flagged words/phrases
    themes JSON, -- AI-detected themes
    lyricist_names JSON, -- Array of credited writers
    copyright_line TEXT,
    publisher_names JSON,
    is_instrumental BOOLEAN DEFAULT FALSE,
    has_spoken_word BOOLEAN DEFAULT FALSE,
    structure_analysis JSON, -- Verse/chorus detection
    rhyme_scheme JSON, -- Detected rhyme patterns
    verified_by_artist BOOLEAN DEFAULT FALSE,
    verification_date DATETIME,
    source VARCHAR(50), -- 'artist_provided', 'publisher', 'user_generated'
    created_by_user_id INT UNSIGNED NOT NULL,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_lyrics_catalog (catalog_item_id),
    INDEX idx_lyrics_language (lyrics_language),
    INDEX idx_lyrics_type (lyrics_type),
    INDEX idx_lyrics_explicit (explicit_content),
    INDEX idx_lyrics_verified (verified_by_artist),
    FULLTEXT idx_lyrics_text (lyrics_text),
    CONSTRAINT fk_lyrics_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id),
    CONSTRAINT fk_lyrics_created_by FOREIGN KEY (created_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: lyrics_translation
-- Multi-language translations of lyrics
CREATE TABLE lyrics_translation (
    translation_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    lyrics_id INT UNSIGNED NOT NULL,
    target_language VARCHAR(10) NOT NULL, -- ISO 639-1
    translation_type VARCHAR(50) NOT NULL, -- 'literal', 'singable', 'poetic'
    translated_text TEXT NOT NULL,
    translated_title VARCHAR(300),
    line_count INT UNSIGNED,
    word_count INT UNSIGNED,
    translator_name VARCHAR(200),
    translator_type VARCHAR(50), -- 'human', 'ai', 'hybrid'
    ai_model_used VARCHAR(100), -- 'gpt4', 'deepl', 'google_translate'
    confidence_score DECIMAL(3,2), -- 0-1 for AI translations
    cultural_notes JSON, -- Explanations of cultural references
    is_official BOOLEAN DEFAULT FALSE,
    approved_by_artist BOOLEAN DEFAULT FALSE,
    approval_date DATETIME,
    quality_rating DECIMAL(3,2), -- User ratings
    rating_count INT UNSIGNED DEFAULT 0,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_lyrics_translation (lyrics_id, target_language, translation_type),
    INDEX idx_translation_language (target_language),
    INDEX idx_translation_type (translation_type),
    INDEX idx_translation_official (is_official),
    INDEX idx_translation_rating (quality_rating),
    FULLTEXT idx_translation_text (translated_text),
    CONSTRAINT fk_translation_lyrics FOREIGN KEY (lyrics_id) REFERENCES lyrics(lyrics_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: lyrics_sync
-- Time-synced lyrics for karaoke and display
CREATE TABLE lyrics_sync (
    sync_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    lyrics_id INT UNSIGNED NOT NULL,
    audio_master_id INT UNSIGNED NOT NULL,
    sync_format VARCHAR(20) NOT NULL, -- 'lrc', 'srt', 'ttml', 'json'
    sync_data TEXT NOT NULL, -- Time-coded lyrics data
    sync_type VARCHAR(50) NOT NULL, -- 'line_sync', 'word_sync', 'syllable_sync'
    offset_ms INT DEFAULT 0, -- Global timing offset
    accuracy_verified BOOLEAN DEFAULT FALSE,
    verified_by_user_id INT UNSIGNED,
    verification_method VARCHAR(50), -- 'manual', 'ai_assisted', 'waveform_analysis'
    karaoke_effects JSON, -- Visual effects timing
    has_backing_vocals BOOLEAN DEFAULT FALSE,
    backing_vocal_cues JSON, -- Separate timing for backing vocals
    instrumental_breaks JSON, -- Marked instrumental sections
    sync_points_count INT UNSIGNED,
    created_by_user_id INT UNSIGNED NOT NULL,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_lyrics_sync (lyrics_id, audio_master_id, sync_format),
    INDEX idx_sync_audio (audio_master_id),
    INDEX idx_sync_format (sync_format),
    INDEX idx_sync_type (sync_type),
    INDEX idx_sync_verified (accuracy_verified),
    CONSTRAINT fk_sync_lyrics FOREIGN KEY (lyrics_id) REFERENCES lyrics(lyrics_id),
    CONSTRAINT fk_sync_audio FOREIGN KEY (audio_master_id) REFERENCES audio_master(audio_master_id),
    CONSTRAINT fk_sync_verified_by FOREIGN KEY (verified_by_user_id) REFERENCES user(user_id),
    CONSTRAINT fk_sync_created_by FOREIGN KEY (created_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: liner_notes
-- Digital booklets, album notes, and extended credits
CREATE TABLE liner_notes (
    liner_notes_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    catalog_item_id INT UNSIGNED NOT NULL,
    file_id INT UNSIGNED,
    notes_type VARCHAR(50) NOT NULL, -- 'album_notes', 'track_notes', 'thank_you', 'essay'
    title VARCHAR(300),
    content_html TEXT NOT NULL, -- Rich formatted content
    content_plain TEXT, -- Plain text version
    author_name VARCHAR(200),
    author_role VARCHAR(100), -- 'artist', 'producer', 'journalist'
    language VARCHAR(10) NOT NULL DEFAULT 'en',
    word_count INT UNSIGNED,
    reading_time_minutes INT UNSIGNED,
    includes_images BOOLEAN DEFAULT FALSE,
    image_count INT UNSIGNED DEFAULT 0,
    includes_credits BOOLEAN DEFAULT FALSE,
    special_thanks TEXT,
    dedication TEXT,
    historical_context TEXT,
    recording_notes TEXT,
    technical_notes TEXT,
    is_exclusive BOOLEAN DEFAULT FALSE, -- Platform exclusive content
    exclusive_until DATETIME,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_liner_catalog (catalog_item_id),
    INDEX idx_liner_type (notes_type),
    INDEX idx_liner_language (language),
    INDEX idx_liner_exclusive (is_exclusive),
    FULLTEXT idx_liner_content (content_plain, title),
    CONSTRAINT fk_liner_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id),
    CONSTRAINT fk_liner_file FOREIGN KEY (file_id) REFERENCES file(file_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: credit
-- Detailed production credits with standardized roles
CREATE TABLE credit (
    credit_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    catalog_item_id INT UNSIGNED NOT NULL,
    credited_entity_type VARCHAR(20) NOT NULL, -- 'person', 'organization'
    credited_entity_id INT UNSIGNED NOT NULL, -- contributor_id or organization_id
    credit_role VARCHAR(100) NOT NULL, -- 'producer', 'mixing_engineer', 'guitarist'
    credit_role_category VARCHAR(50), -- 'production', 'performance', 'composition'
    instrument VARCHAR(100), -- Specific instrument if applicable
    contribution_description TEXT,
    is_primary BOOLEAN DEFAULT FALSE, -- Main producer, lead guitarist, etc.
    display_order INT UNSIGNED,
    credited_as VARCHAR(200), -- Name as it should appear
    session_date DATE,
    session_location VARCHAR(200), -- Studio or venue
    union_member BOOLEAN DEFAULT FALSE,
    union_name VARCHAR(100), -- 'AFM', 'SAG-AFTRA'
    fee_paid DECIMAL(12,2), -- For royalty calculations
    royalty_share DECIMAL(7,4), -- Percentage if applicable
    notes TEXT,
    verified BOOLEAN DEFAULT FALSE,
    verified_by_user_id INT UNSIGNED,
    verification_date DATETIME,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_credit_catalog (catalog_item_id),
    INDEX idx_credit_entity (credited_entity_type, credited_entity_id),
    INDEX idx_credit_role (credit_role),
    INDEX idx_credit_category (credit_role_category),
    INDEX idx_credit_verified (verified),
    CONSTRAINT fk_credit_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id),
    CONSTRAINT fk_credit_verified_by FOREIGN KEY (verified_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sample_usage
-- Track samples used in recordings with detailed metadata
CREATE TABLE sample_usage (
    sample_usage_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    catalog_item_id INT UNSIGNED NOT NULL, -- Song using the sample
    sampled_catalog_item_id INT UNSIGNED, -- Original song sampled
    sample_type VARCHAR(50) NOT NULL, -- 'melody', 'rhythm', 'vocal', 'instrumental'
    sample_description TEXT,
    duration_ms INT UNSIGNED,
    start_time_ms INT UNSIGNED, -- Where sample appears in new song
    end_time_ms INT UNSIGNED,
    original_start_time_ms INT UNSIGNED, -- Location in original song
    original_end_time_ms INT UNSIGNED,
    pitch_shift_semitones DECIMAL(4,2), -- Pitch modification
    tempo_change_percent DECIMAL(6,2), -- Speed modification
    processing_applied JSON, -- Effects and modifications
    detection_method VARCHAR(50), -- 'manual', 'ai_detected', 'fingerprint'
    detection_confidence DECIMAL(3,2), -- 0-1 for AI detection
    acoustid_match VARCHAR(100), -- AcoustID fingerprint match
    musicbrainz_recording_id CHAR(36),
    clearance_required BOOLEAN DEFAULT TRUE,
    interpolation BOOLEAN DEFAULT FALSE, -- Re-recorded vs direct sample
    created_by_user_id INT UNSIGNED NOT NULL,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    INDEX idx_sample_catalog (catalog_item_id),
    INDEX idx_sample_sampled (sampled_catalog_item_id),
    INDEX idx_sample_type (sample_type),
    INDEX idx_sample_detection (detection_method),
    INDEX idx_sample_clearance (clearance_required),
    CONSTRAINT fk_sample_catalog FOREIGN KEY (catalog_item_id) REFERENCES catalog_item(catalog_item_id),
    CONSTRAINT fk_sample_sampled FOREIGN KEY (sampled_catalog_item_id) REFERENCES catalog_item(catalog_item_id),
    CONSTRAINT fk_sample_created_by FOREIGN KEY (created_by_user_id) REFERENCES user(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sample_clearance
-- Legal clearance status for samples
CREATE TABLE sample_clearance (
    clearance_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    sample_usage_id INT UNSIGNED NOT NULL,
    clearance_type VARCHAR(50) NOT NULL, -- 'master', 'composition', 'both'
    clearance_status VARCHAR(50) NOT NULL DEFAULT 'pending', -- 'pending', 'negotiating', 'approved', 'rejected'
    requested_date DATE NOT NULL,
    response_date DATE,
    approved_by_entity_type VARCHAR(20), -- 'person', 'organization'
    approved_by_entity_id INT UNSIGNED,
    approval_document_file_id INT UNSIGNED,
    terms_type VARCHAR(50), -- 'flat_fee', 'royalty_share', 'hybrid'
    flat_fee_amount DECIMAL(12,2),
    flat_fee_currency VARCHAR(3),
    royalty_percentage DECIMAL(7,4),
    advance_amount DECIMAL(12,2),
    territory_restrictions JSON,
    usage_restrictions JSON,
    term_length_months INT UNSIGNED, -- NULL for perpetual
    expiration_date DATE,
    mfn_clause BOOLEAN DEFAULT FALSE, -- Most favored nation
    credit_requirements TEXT,
    approval_notes TEXT,
    rejection_reason TEXT,
    negotiation_history JSON,
    created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    UNIQUE KEY uk_sample_clearance (sample_usage_id, clearance_type),
    INDEX idx_clearance_status (clearance_status),
    INDEX idx_clearance_requested (requested_date),
    INDEX idx_clearance_expiration (expiration_date),
    CONSTRAINT fk_clearance_sample FOREIGN KEY (sample_usage_id) REFERENCES sample_usage(sample_usage_id),
    CONSTRAINT fk_clearance_document FOREIGN KEY (approval_document_file_id) REFERENCES file(file_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

-- Procedure: Process audio file and extract metadata
DELIMITER //
CREATE PROCEDURE sp_process_audio_file(
    IN p_file_id INT UNSIGNED,
    IN p_catalog_item_id INT UNSIGNED
)
BEGIN
    DECLARE v_processing_id INT UNSIGNED;
    
    -- Create processing job
    INSERT INTO multimedia_processing (
        source_file_id,
        processing_type,
        processing_profile,
        priority,
        requested_by_user_id
    )
    SELECT 
        p_file_id,
        'audio_analysis',
        JSON_OBJECT(
            'extract_metadata', TRUE,
            'generate_waveform', TRUE,
            'detect_bpm', TRUE,
            'analyze_loudness', TRUE,
            'detect_key', TRUE,
            'extract_fingerprint', TRUE
        ),
        'high',
        uploaded_by_user_id
    FROM file
    WHERE file_id = p_file_id;
    
    SET v_processing_id = LAST_INSERT_ID();
    
    -- Return processing job ID
    SELECT v_processing_id AS processing_id;
END//
DELIMITER ;

-- Procedure: Bundle assets for release
DELIMITER //
CREATE PROCEDURE sp_create_release_bundle(
    IN p_catalog_item_id INT UNSIGNED,
    IN p_bundle_name VARCHAR(300),
    IN p_bundle_type VARCHAR(50),
    IN p_user_id INT UNSIGNED
)
BEGIN
    DECLARE v_bundle_id INT UNSIGNED;
    
    START TRANSACTION;
    
    -- Create bundle
    INSERT INTO asset_bundle (
        bundle_type,
        bundle_name,
        catalog_item_id,
        created_by_user_id
    ) VALUES (
        p_bundle_type,
        p_bundle_name,
        p_catalog_item_id,
        p_user_id
    );
    
    SET v_bundle_id = LAST_INSERT_ID();
    
    -- Add all related files to bundle
    INSERT INTO asset_relationship (
        parent_file_id,
        child_file_id,
        relationship_type,
        bundle_id,
        created_by_user_id
    )
    SELECT 
        f1.file_id,
        f2.file_id,
        'bundle_member',
        v_bundle_id,
        p_user_id
    FROM file f1
    CROSS JOIN file f2
    WHERE f1.catalog_item_id = p_catalog_item_id
    AND f2.catalog_item_id = p_catalog_item_id
    AND f1.file_id < f2.file_id
    AND f1.file_status = 'active'
    AND f2.file_status = 'active';
    
    -- Update bundle stats
    UPDATE asset_bundle ab
    SET 
        total_size_bytes = (
            SELECT SUM(f.file_size_bytes)
            FROM file f
            WHERE f.catalog_item_id = p_catalog_item_id
            AND f.file_status = 'active'
        ),
        file_count = (
            SELECT COUNT(*)
            FROM file f
            WHERE f.catalog_item_id = p_catalog_item_id
            AND f.file_status = 'active'
        )
    WHERE ab.bundle_id = v_bundle_id;
    
    COMMIT;
    
    SELECT v_bundle_id AS bundle_id;
END//
DELIMITER ;

-- =====================================================
-- VIEWS
-- =====================================================

-- View: Complete file information with type-specific metadata
CREATE VIEW v_file_complete AS
SELECT 
    f.*,
    am.duration_ms AS audio_duration_ms,
    am.sample_rate,
    am.bit_depth,
    am.loudness_lufs,
    am.bpm,
    am.musical_key,
    va.duration_ms AS video_duration_ms,
    va.resolution_label,
    va.frame_rate,
    va.video_codec,
    fe.encryption_algorithm,
    CASE 
        WHEN am.audio_master_id IS NOT NULL THEN 'audio'
        WHEN va.video_id IS NOT NULL THEN 'video'
        WHEN ma.multimedia_id IS NOT NULL THEN ma.asset_type
        ELSE 'other'
    END AS content_type
FROM file f
LEFT JOIN audio_master am ON f.file_id = am.file_id
LEFT JOIN video_asset va ON f.file_id = va.file_id
LEFT JOIN multimedia_asset ma ON f.file_id = ma.file_id
LEFT JOIN file_encryption fe ON f.file_id = fe.file_id;

-- View: Audio stems with master information
CREATE VIEW v_audio_stems AS
SELECT 
    s.*,
    am.isrc AS master_isrc,
    am.duration_ms AS master_duration_ms,
    f.file_name AS stem_file_name,
    f.file_size_bytes AS stem_file_size,
    f.cdn_url AS stem_url,
    mf.file_name AS master_file_name
FROM audio_stem s
JOIN audio_master am ON s.audio_master_id = am.audio_master_id
JOIN file f ON s.file_id = f.file_id
JOIN file mf ON am.file_id = mf.file_id;

-- =====================================================
-- INITIAL DATA
-- =====================================================

-- Insert standard multimedia formats
INSERT INTO multimedia_format (
    format_code, platform, media_type, format_name, format_description,
    file_extension, mime_type, min_bitrate_kbps, max_bitrate_kbps,
    required_sample_rate, required_bit_depth, loudness_target_lufs,
    effective_date
) VALUES
-- Audio formats
('spotify_master', 'spotify', 'audio', 'Spotify Master', 'Spotify delivery specification',
 'flac', 'audio/flac', NULL, NULL, 44100, 16, -14.0, '2024-01-01'),
('apple_master', 'apple_music', 'audio', 'Apple Digital Master', 'Apple Music mastering spec',
 'wav', 'audio/wav', NULL, NULL, 96000, 24, -16.0, '2024-01-01'),
('tidal_master', 'tidal', 'audio', 'Tidal Master', 'Tidal MQA specification',
 'flac', 'audio/flac', NULL, NULL, 96000, 24, -14.0, '2024-01-01'),

-- Video formats
('youtube_4k', 'youtube', 'video', 'YouTube 4K', 'YouTube 4K video specification',
 'mp4', 'video/mp4', 15000, 68000, NULL, NULL, NULL, '2024-01-01'),
('vevo_hd', 'vevo', 'video', 'Vevo HD', 'Vevo HD music video spec',
 'mp4', 'video/mp4', 8000, 20000, NULL, NULL, NULL, '2024-01-01'),

-- Image formats
('spotify_cover', 'spotify', 'image', 'Spotify Cover Art', 'Spotify artwork requirements',
 'jpg', 'image/jpeg', NULL, NULL, NULL, NULL, NULL, '2024-01-01'),
('apple_artwork', 'apple_music', 'image', 'Apple Music Artwork', 'Apple Music cover art spec',
 'jpg', 'image/jpeg', NULL, NULL, NULL, NULL, NULL, '2024-01-01');

-- Insert credit role categories
INSERT INTO catalog_metadata_type (type_code, type_name, type_category, display_order)
VALUES
('credit_producer', 'Producer', 'credit_role', 10),
('credit_engineer', 'Recording Engineer', 'credit_role', 20),
('credit_mixer', 'Mixing Engineer', 'credit_role', 30),
('credit_mastering', 'Mastering Engineer', 'credit_role', 40),
('credit_guitarist', 'Guitarist', 'credit_role', 50),
('credit_bassist', 'Bassist', 'credit_role', 60),
('credit_drummer', 'Drummer', 'credit_role', 70),
('credit_keys', 'Keyboardist', 'credit_role', 80),
('credit_vocalist', 'Vocalist', 'credit_role', 90),
('credit_strings', 'String Arrangement', 'credit_role', 100);

-- =====================================================
-- TRIGGERS
-- =====================================================

-- Trigger: Update file stats on version creation
DELIMITER //
CREATE TRIGGER trg_file_version_stats
AFTER INSERT ON file_version
FOR EACH ROW
BEGIN
    -- Update file access count
    UPDATE file 
    SET access_count = access_count + 1,
        last_accessed_at = NOW(6)
    WHERE file_id = NEW.file_id;
END//
DELIMITER ;

-- Trigger: Validate audio master technical specs
DELIMITER //
CREATE TRIGGER trg_audio_master_validation
BEFORE INSERT ON audio_master
FOR EACH ROW
BEGIN
    -- Validate sample rate
    IF NEW.sample_rate NOT IN (44100, 48000, 88200, 96000, 176400, 192000) THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Invalid sample rate. Must be standard audio sample rate.';
    END IF;
    
    -- Validate bit depth
    IF NEW.bit_depth NOT IN (16, 24, 32) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid bit depth. Must be 16, 24, or 32 bit.';
    END IF;
    
    -- Validate loudness
    IF NEW.loudness_lufs IS NOT NULL AND (NEW.loudness_lufs < -30 OR NEW.loudness_lufs > 0) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid loudness. Must be between -30 and 0 LUFS.';
    END IF;
END//
DELIMITER ;

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Additional performance indexes
CREATE INDEX idx_file_blockchain ON file(blockchain_network, blockchain_hash);
CREATE INDEX idx_file_storage ON file(storage_provider, file_status);
CREATE INDEX idx_audio_fingerprint ON audio_master(fingerprint_acoustid, musicbrainz_recording_id);
CREATE INDEX idx_video_content ON video_asset(content_rating, video_type);
CREATE INDEX idx_processing_queue ON multimedia_processing(status, priority, created_at);
CREATE INDEX idx_lyrics_themes ON lyrics((CAST(themes AS CHAR(255))));
CREATE INDEX idx_sample_confidence ON sample_usage(detection_confidence, clearance_required);

-- =====================================================
-- Section 20: SYNC & LICENSING TABLES
-- =====================================================

-- =====================================================
-- OPPORTUNITY MANAGEMENT TABLES
-- =====================================================

-- Table: sync_opportunity
-- Purpose: Sync opportunities from music supervisors, brands, and content creators
CREATE TABLE IF NOT EXISTS sync_opportunity (
    opportunity_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Basic Information
    opportunity_code VARCHAR(50) UNIQUE NOT NULL,
    title VARCHAR(500) NOT NULL,
    description TEXT,
    opportunity_type VARCHAR(50) NOT NULL, -- 'film', 'tv_series', 'commercial', 'game', 'social_media', 'vr_ar', 'metaverse', 'podcast', 'corporate', 'trailer'
    media_format VARCHAR(50), -- 'theatrical', 'streaming', 'broadcast', 'online', 'mobile', 'console', 'vr_headset'
    
    -- Project Details
    project_name VARCHAR(500),
    production_company VARCHAR(500),
    distributor VARCHAR(500),
    director VARCHAR(255),
    music_supervisor VARCHAR(255),
    
    -- Creative Brief
    scene_description TEXT,
    mood_keywords JSON, -- ['uplifting', 'emotional', 'dark', 'energetic']
    tempo_range JSON, -- {"min": 60, "max": 120}
    genre_preferences JSON, -- ['rock', 'electronic', 'orchestral']
    reference_tracks JSON, -- [{"artist": "...", "track": "...", "notes": "..."}]
    
    -- Technical Requirements
    duration_needed_seconds INT,
    instrumental_required BOOLEAN DEFAULT FALSE,
    explicit_allowed BOOLEAN DEFAULT TRUE,
    stems_required BOOLEAN DEFAULT FALSE,
    custom_edit_allowed BOOLEAN DEFAULT TRUE,
    
    -- Timeline
    submission_deadline DATETIME(6),
    decision_deadline DATETIME(6),
    project_release_date DATE,
    option_period_days INT DEFAULT 30,
    
    -- Territory & Distribution
    territories JSON, -- ['US', 'CA', 'GB', 'worldwide']
    distribution_channels JSON, -- ['theatrical', 'streaming', 'broadcast', 'digital']
    excluded_territories JSON, -- ['CN', 'RU']
    
    -- Budget & Terms
    budget_range_min DECIMAL(15,2),
    budget_range_max DECIMAL(15,2),
    budget_currency VARCHAR(3) DEFAULT 'USD',
    fee_type VARCHAR(50), -- 'flat_fee', 'step_deal', 'revenue_share', 'hybrid'
    backend_royalties BOOLEAN DEFAULT FALSE,
    mfn_clause BOOLEAN DEFAULT FALSE,
    
    -- Rights Required
    master_rights_needed BOOLEAN DEFAULT TRUE,
    sync_rights_needed BOOLEAN DEFAULT TRUE,
    performance_rights_included BOOLEAN DEFAULT FALSE,
    mechanical_rights_needed BOOLEAN DEFAULT FALSE,
    adaptation_rights_needed BOOLEAN DEFAULT FALSE,
    
    -- AI Matching Metadata
    ai_brief_analysis JSON, -- AI-extracted requirements
    target_audience JSON, -- Demographics and psychographics
    brand_values JSON, -- For commercial opportunities
    competitor_placements JSON, -- Similar sync uses
    
    -- Source & Verification
    source_platform VARCHAR(100), -- 'direct', 'sync_exchange', 'agency', 'platform_api'
    verified_opportunity BOOLEAN DEFAULT FALSE,
    verification_date DATETIME(6),
    priority_level INT DEFAULT 5, -- 1-10 scale
    
    -- Status Tracking
    status VARCHAR(50) DEFAULT 'active', -- 'draft', 'active', 'reviewing', 'closed', 'filled', 'cancelled'
    visibility VARCHAR(50) DEFAULT 'public', -- 'public', 'private', 'invite_only', 'tier_based'
    
    -- Metrics
    view_count INT DEFAULT 0,
    submission_count INT DEFAULT 0,
    shortlist_count INT DEFAULT 0,
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    deletion_reason VARCHAR(500),
    version INT DEFAULT 1,
    
    -- Indexes
    INDEX idx_opportunity_type (opportunity_type),
    INDEX idx_status (status),
    INDEX idx_deadline (submission_deadline),
    INDEX idx_supervisor (music_supervisor),
    INDEX idx_budget (budget_range_min, budget_range_max),
    INDEX idx_created_at (created_at),
    FULLTEXT idx_search (title, description, project_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sync_pitch
-- Purpose: Track pitches with AI matching scores
CREATE TABLE IF NOT EXISTS sync_pitch (
    pitch_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    opportunity_id BIGINT UNSIGNED NOT NULL,
    asset_id BIGINT UNSIGNED NOT NULL,
    submitted_by BIGINT UNSIGNED NOT NULL,
    
    -- Pitch Details
    pitch_code VARCHAR(50) UNIQUE NOT NULL,
    pitch_title VARCHAR(500),
    pitch_notes TEXT,
    custom_edit_description TEXT,
    
    -- AI Matching Analysis
    ai_match_score DECIMAL(5,4), -- 0.0000 to 1.0000
    ai_match_factors JSON, -- Detailed scoring breakdown
    mood_match_score DECIMAL(5,4),
    tempo_match_score DECIMAL(5,4),
    genre_match_score DECIMAL(5,4),
    audience_match_score DECIMAL(5,4),
    
    -- Creative Alignment
    scene_fit_analysis JSON,
    emotional_arc_match JSON,
    brand_alignment_score DECIMAL(5,4),
    uniqueness_score DECIMAL(5,4),
    
    -- Submission Configuration
    proposed_fee DECIMAL(15,2),
    fee_currency VARCHAR(3) DEFAULT 'USD',
    fee_notes TEXT,
    territory_restrictions JSON,
    usage_restrictions JSON,
    
    -- Alternative Versions
    alternate_versions JSON, -- [{"version": "instrumental", "file_id": "..."}]
    stem_availability JSON,
    custom_edit_available BOOLEAN DEFAULT FALSE,
    
    -- Rights Confirmation
    master_rights_cleared BOOLEAN DEFAULT FALSE,
    sync_rights_cleared BOOLEAN DEFAULT FALSE,
    all_samples_cleared BOOLEAN DEFAULT FALSE,
    all_writers_approved BOOLEAN DEFAULT FALSE,
    
    -- Pitch Status
    status VARCHAR(50) DEFAULT 'submitted', -- 'draft', 'submitted', 'under_review', 'shortlisted', 'selected', 'rejected', 'withdrawn'
    internal_rating INT, -- 1-5 stars from supervisor
    feedback_notes TEXT,
    
    -- Engagement Metrics
    viewed_at DATETIME(6),
    listened_duration_seconds INT,
    downloaded_at DATETIME(6),
    shared_count INT DEFAULT 0,
    
    -- System Fields
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    
    -- Constraints
    FOREIGN KEY (opportunity_id) REFERENCES sync_opportunity(opportunity_id),
    UNIQUE KEY unique_opportunity_asset (opportunity_id, asset_id),
    
    -- Indexes
    INDEX idx_asset (asset_id),
    INDEX idx_submitted_by (submitted_by),
    INDEX idx_status (status),
    INDEX idx_match_score (ai_match_score DESC),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sync_submission
-- Purpose: Detailed submission tracking and management
CREATE TABLE IF NOT EXISTS sync_submission (
    submission_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    pitch_id BIGINT UNSIGNED NOT NULL,
    opportunity_id BIGINT UNSIGNED NOT NULL,
    
    -- Submission Package
    submission_code VARCHAR(50) UNIQUE NOT NULL,
    cover_letter TEXT,
    supporting_materials JSON, -- Links to EPKs, videos, etc.
    
    -- Submitted Versions
    primary_version_file_id VARCHAR(255),
    alternate_versions JSON, -- [{"type": "instrumental", "file_id": "...", "notes": "..."}]
    stems_package_id VARCHAR(255),
    
    -- Rights Documentation
    rights_declaration JSON,
    clearance_documents JSON, -- [{"type": "master_ownership", "file_id": "..."}]
    writer_approvals JSON, -- [{"writer_id": "...", "approved": true, "date": "..."}]
    publisher_approvals JSON,
    
    -- Submission Tracking
    submission_method VARCHAR(50), -- 'platform', 'email', 'api', 'agency'
    submission_ip VARCHAR(45),
    submission_user_agent TEXT,
    
    -- Review Process
    review_status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'in_review', 'approved', 'rejected', 'on_hold'
    reviewer_id BIGINT UNSIGNED,
    review_notes TEXT,
    review_date DATETIME(6),
    
    -- Communication Thread
    message_thread_id VARCHAR(255),
    last_communication DATETIME(6),
    
    -- System Fields
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Constraints
    FOREIGN KEY (pitch_id) REFERENCES sync_pitch(pitch_id),
    FOREIGN KEY (opportunity_id) REFERENCES sync_opportunity(opportunity_id),
    
    -- Indexes
    INDEX idx_opportunity (opportunity_id),
    INDEX idx_review_status (review_status),
    INDEX idx_reviewer (reviewer_id),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sync_placement
-- Purpose: Confirmed sync placements and their details
CREATE TABLE IF NOT EXISTS sync_placement (
    placement_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    pitch_id BIGINT UNSIGNED NOT NULL,
    opportunity_id BIGINT UNSIGNED NOT NULL,
    asset_id BIGINT UNSIGNED NOT NULL,
    license_agreement_id BIGINT UNSIGNED,
    
    -- Placement Details
    placement_code VARCHAR(50) UNIQUE NOT NULL,
    confirmation_date DATETIME(6),
    placement_title VARCHAR(500),
    
    -- Usage Details
    scene_description TEXT,
    time_in_seconds INT,
    prominence VARCHAR(50), -- 'featured', 'background', 'theme', 'montage', 'credits'
    episode_number VARCHAR(50),
    season_number VARCHAR(50),
    
    -- Final Terms
    final_fee DECIMAL(15,2),
    fee_currency VARCHAR(3) DEFAULT 'USD',
    payment_terms VARCHAR(255),
    backend_percentage DECIMAL(5,2),
    
    -- Air/Release Dates
    first_use_date DATE,
    release_date DATE,
    territory_release_dates JSON, -- {"US": "2024-01-01", "UK": "2024-02-01"}
    
    -- Cue Sheet Information
    cue_sheet_id BIGINT UNSIGNED,
    cue_number VARCHAR(50),
    society_work_number VARCHAR(50),
    
    -- Performance Tracking
    broadcast_count INT DEFAULT 0,
    stream_count BIGINT DEFAULT 0,
    territory_performance JSON, -- Performance data by territory
    
    -- Marketing Rights
    trailer_usage_allowed BOOLEAN DEFAULT FALSE,
    promotional_usage_allowed BOOLEAN DEFAULT FALSE,
    social_media_usage_allowed BOOLEAN DEFAULT FALSE,
    
    -- Blockchain Record
    blockchain_tx_hash VARCHAR(255),
    smart_contract_address VARCHAR(255),
    
    -- Status
    status VARCHAR(50) DEFAULT 'confirmed', -- 'pending', 'confirmed', 'active', 'expired', 'terminated'
    activation_date DATETIME(6),
    expiration_date DATETIME(6),
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    
    -- Constraints
    FOREIGN KEY (pitch_id) REFERENCES sync_pitch(pitch_id),
    FOREIGN KEY (opportunity_id) REFERENCES sync_opportunity(opportunity_id),
    
    -- Indexes
    INDEX idx_asset (asset_id),
    INDEX idx_license (license_agreement_id),
    INDEX idx_status (status),
    INDEX idx_release_date (release_date),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- FINANCIAL & TERMS TABLES
-- =====================================================

-- Table: sync_fee
-- Purpose: Fee negotiations with complete history
CREATE TABLE IF NOT EXISTS sync_fee (
    fee_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    opportunity_id BIGINT UNSIGNED,
    pitch_id BIGINT UNSIGNED,
    placement_id BIGINT UNSIGNED,
    
    -- Fee Structure
    fee_type VARCHAR(50) NOT NULL, -- 'flat_fee', 'step_deal', 'revenue_share', 'hybrid', 'gratis'
    base_fee DECIMAL(15,2),
    currency VARCHAR(3) DEFAULT 'USD',
    
    -- Step Deal Configuration
    step_triggers JSON, -- [{"trigger": "1M views", "fee": 5000}, {"trigger": "5M views", "fee": 15000}]
    current_step INT DEFAULT 1,
    
    -- Revenue Share Terms
    revenue_share_percentage DECIMAL(5,2),
    revenue_share_cap DECIMAL(15,2),
    revenue_share_floor DECIMAL(15,2),
    recoupable_expenses DECIMAL(15,2),
    
    -- Territory Pricing
    territory_fees JSON, -- {"US": 10000, "UK": 5000, "worldwide": 25000}
    territory_adjustments JSON, -- {"CA": 0.8, "MX": 0.6}
    
    -- Usage-Based Pricing
    usage_fees JSON, -- {"30_seconds": 5000, "60_seconds": 8000, "full_song": 15000}
    media_type_multipliers JSON, -- {"theatrical": 2.0, "streaming": 1.0, "social": 0.5}
    
    -- Options & Renewals
    option_fee DECIMAL(15,2),
    option_period_days INT DEFAULT 30,
    renewal_fee DECIMAL(15,2),
    renewal_terms JSON,
    
    -- MFN (Most Favored Nation) Tracking
    mfn_applicable BOOLEAN DEFAULT FALSE,
    mfn_reference_deals JSON, -- Other deals to match
    mfn_adjusted_fee DECIMAL(15,2),
    
    -- Negotiation History
    initial_quote DECIMAL(15,2),
    final_agreed_fee DECIMAL(15,2),
    negotiation_rounds INT DEFAULT 0,
    negotiation_history JSON, -- [{"date": "...", "offer": 5000, "counter": 8000, "notes": "..."}]
    
    -- Payment Terms
    payment_schedule VARCHAR(50), -- 'on_signature', 'on_delivery', 'on_release', 'milestone_based'
    payment_milestones JSON, -- [{"milestone": "contract_signed", "percentage": 50}]
    net_terms_days INT DEFAULT 30,
    
    -- Fee Calculation Metadata
    calculation_factors JSON, -- All factors used in fee calculation
    ai_suggested_fee DECIMAL(15,2),
    market_benchmark DECIMAL(15,2),
    
    -- Approval Status
    status VARCHAR(50) DEFAULT 'proposed', -- 'proposed', 'negotiating', 'approved', 'rejected', 'paid'
    approved_by BIGINT UNSIGNED,
    approved_at DATETIME(6),
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Constraints
    FOREIGN KEY (opportunity_id) REFERENCES sync_opportunity(opportunity_id),
    FOREIGN KEY (pitch_id) REFERENCES sync_pitch(pitch_id),
    FOREIGN KEY (placement_id) REFERENCES sync_placement(placement_id),
    
    -- Indexes
    INDEX idx_fee_type (fee_type),
    INDEX idx_status (status),
    INDEX idx_base_fee (base_fee),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sync_term
-- Purpose: License terms and conditions
CREATE TABLE IF NOT EXISTS sync_term (
    term_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    placement_id BIGINT UNSIGNED,
    license_agreement_id BIGINT UNSIGNED,
    
    -- Term Identification
    term_code VARCHAR(50) UNIQUE NOT NULL,
    term_name VARCHAR(255) NOT NULL,
    
    -- License Scope
    rights_granted JSON, -- ['synchronization', 'master_use', 'public_performance']
    media_types JSON, -- ['theatrical', 'streaming', 'broadcast']
    distribution_channels JSON, -- ['netflix', 'hulu', 'amazon', 'theatrical']
    
    -- Territory Configuration
    included_territories JSON, -- ['US', 'CA', 'MX'] or ['worldwide']
    excluded_territories JSON, -- ['CN', 'RU']
    territory_notes TEXT,
    
    -- Time Limitations
    term_start_date DATE,
    term_end_date DATE,
    term_duration_months INT,
    perpetual_license BOOLEAN DEFAULT FALSE,
    
    -- Usage Restrictions
    usage_limitations JSON, -- {"max_seconds": 30, "max_uses": 5}
    edit_rights VARCHAR(50), -- 'no_edits', 'minor_edits', 'full_edit_rights'
    dubbing_rights BOOLEAN DEFAULT FALSE,
    subtitle_rights BOOLEAN DEFAULT TRUE,
    
    -- Promotional Rights
    trailer_rights BOOLEAN DEFAULT FALSE,
    advertising_rights BOOLEAN DEFAULT FALSE,
    social_media_rights BOOLEAN DEFAULT FALSE,
    behind_scenes_rights BOOLEAN DEFAULT FALSE,
    
    -- Exclusivity
    exclusive_license BOOLEAN DEFAULT FALSE,
    exclusivity_period_days INT,
    exclusivity_territories JSON,
    holdback_periods JSON, -- {"streaming": 90, "broadcast": 180}
    
    -- Credit Requirements
    credit_requirement VARCHAR(50), -- 'required', 'optional', 'none'
    credit_format TEXT,
    credit_placement VARCHAR(100), -- 'main_titles', 'end_credits', 'both'
    
    -- Derivative Works
    remake_rights BOOLEAN DEFAULT FALSE,
    sequel_rights BOOLEAN DEFAULT FALSE,
    franchise_rights BOOLEAN DEFAULT FALSE,
    merchandising_rights BOOLEAN DEFAULT FALSE,
    
    -- Compliance & Reporting
    reporting_required BOOLEAN DEFAULT TRUE,
    reporting_frequency VARCHAR(50), -- 'monthly', 'quarterly', 'annually'
    audit_rights BOOLEAN DEFAULT TRUE,
    
    -- Termination Conditions
    termination_triggers JSON, -- ["breach", "non_payment", "change_of_control"]
    cure_period_days INT DEFAULT 30,
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Constraints
    FOREIGN KEY (placement_id) REFERENCES sync_placement(placement_id),
    
    -- Indexes
    INDEX idx_license (license_agreement_id),
    INDEX idx_term_dates (term_start_date, term_end_date),
    INDEX idx_exclusive (exclusive_license),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sync_usage_report
-- Purpose: Track actual usage and performance
CREATE TABLE IF NOT EXISTS sync_usage_report (
    usage_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    placement_id BIGINT UNSIGNED NOT NULL,
    
    -- Report Details
    report_code VARCHAR(50) UNIQUE NOT NULL,
    report_period_start DATE,
    report_period_end DATE,
    report_source VARCHAR(100), -- 'broadcaster', 'streamer', 'distributor', 'content_id'
    
    -- Usage Metrics
    broadcast_count INT DEFAULT 0,
    broadcast_territories JSON, -- {"US": 150, "CA": 50}
    stream_count BIGINT DEFAULT 0,
    stream_territories JSON,
    download_count BIGINT DEFAULT 0,
    
    -- Viewership Data
    total_impressions BIGINT,
    unique_viewers BIGINT,
    average_view_duration_seconds INT,
    completion_rate DECIMAL(5,2),
    
    -- Platform Breakdown
    platform_metrics JSON, /* {
        "netflix": {"plays": 1000000, "hours": 25000},
        "hulu": {"plays": 500000, "hours": 12500}
    } */
    
    -- Geographic Performance
    territory_performance JSON, /* {
        "US": {"plays": 800000, "revenue": 25000},
        "UK": {"plays": 200000, "revenue": 8000}
    } */
    
    -- Time-Based Analytics
    peak_usage_times JSON,
    daily_usage_pattern JSON,
    trending_periods JSON,
    
    -- Audience Demographics
    audience_demographics JSON, /* {
        "age_groups": {"18-24": 0.35, "25-34": 0.40},
        "gender": {"male": 0.55, "female": 0.45}
    } */
    
    -- Financial Impact
    attributed_revenue DECIMAL(15,2),
    revenue_currency VARCHAR(3) DEFAULT 'USD',
    performance_bonus_triggered BOOLEAN DEFAULT FALSE,
    
    -- Compliance Tracking
    usage_compliant BOOLEAN DEFAULT TRUE,
    compliance_issues JSON,
    overage_uses INT DEFAULT 0,
    
    -- Data Verification
    verified_data BOOLEAN DEFAULT FALSE,
    verification_method VARCHAR(100),
    verification_date DATETIME(6),
    
    -- System Fields
    imported_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    processed_at DATETIME(6),
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Constraints
    FOREIGN KEY (placement_id) REFERENCES sync_placement(placement_id),
    
    -- Indexes
    INDEX idx_report_period (report_period_start, report_period_end),
    INDEX idx_report_source (report_source),
    INDEX idx_created_at (created_at),
    INDEX idx_stream_count (stream_count DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sync_cue_sheet
-- Purpose: Industry-standard cue sheet management
CREATE TABLE IF NOT EXISTS sync_cue_sheet (
    cue_sheet_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Production Information
    production_title VARCHAR(500) NOT NULL,
    production_type VARCHAR(50), -- 'feature_film', 'tv_series', 'documentary', 'commercial'
    episode_title VARCHAR(500),
    episode_number VARCHAR(50),
    season_number VARCHAR(50),
    production_number VARCHAR(100),
    
    -- Dates
    air_date DATE,
    production_year YEAR,
    first_air_date DATE,
    
    -- Production Company
    production_company VARCHAR(500),
    producer_name VARCHAR(255),
    director_name VARCHAR(255),
    
    -- Network/Distributor
    network_name VARCHAR(255),
    distributor_name VARCHAR(255),
    
    -- Music Cues
    total_music_duration_seconds INT,
    total_cues INT DEFAULT 0,
    
    -- Cue Sheet Details (normalized in separate table)
    cue_sheet_version VARCHAR(50),
    cue_sheet_type VARCHAR(50), -- 'av', 'radio', 'promo'
    
    -- Society Information
    society_submitted VARCHAR(50), -- 'ASCAP', 'BMI', 'SESAC'
    society_work_number VARCHAR(50),
    submission_date DATE,
    
    -- File References
    original_file_id VARCHAR(255),
    formatted_file_id VARCHAR(255),
    
    -- Verification
    verified_by_production BOOLEAN DEFAULT FALSE,
    verified_by_society BOOLEAN DEFAULT FALSE,
    verification_notes TEXT,
    
    -- Blockchain Record
    blockchain_hash VARCHAR(255),
    ipfs_hash VARCHAR(255),
    
    -- Status
    status VARCHAR(50) DEFAULT 'draft', -- 'draft', 'submitted', 'accepted', 'rejected', 'revised'
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    
    -- Indexes
    INDEX idx_production_title (production_title),
    INDEX idx_air_date (air_date),
    INDEX idx_society (society_submitted),
    INDEX idx_status (status),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sync_cue_sheet_detail
-- Purpose: Individual cue entries within a cue sheet
CREATE TABLE IF NOT EXISTS sync_cue_sheet_detail (
    cue_detail_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    cue_sheet_id BIGINT UNSIGNED NOT NULL,
    placement_id BIGINT UNSIGNED,
    asset_id BIGINT UNSIGNED,
    
    -- Cue Information
    cue_number VARCHAR(50) NOT NULL,
    cue_title VARCHAR(500) NOT NULL,
    
    -- Usage Details
    use_type VARCHAR(50), -- 'background_instrumental', 'background_vocal', 'feature', 'theme'
    timing_start VARCHAR(20), -- 'MM:SS:FF'
    timing_end VARCHAR(20),
    duration_seconds INT,
    
    -- Music Details
    performers JSON, -- ["Artist Name", "Band Name"]
    composers JSON, -- ["Composer 1", "Composer 2"]
    publishers JSON, -- ["Publisher 1", "Publisher 2"]
    
    -- Rights Splits
    composer_splits JSON, /* [
        {"name": "John Doe", "share": 50, "pro": "ASCAP", "ipi": "00123456789"}
    ] */
    publisher_splits JSON, /* [
        {"name": "Music Pub Co", "share": 50, "pro": "BMI", "ipi": "00987654321"}
    ] */
    
    -- Society Codes
    society_work_codes JSON, -- {"ASCAP": "123456", "BMI": "789012"}
    iswc_code VARCHAR(50),
    isrc_code VARCHAR(50),
    
    -- Additional Info
    notes TEXT,
    scene_description TEXT,
    
    -- System Fields
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Constraints
    FOREIGN KEY (cue_sheet_id) REFERENCES sync_cue_sheet(cue_sheet_id),
    
    -- Indexes
    INDEX idx_placement (placement_id),
    INDEX idx_asset (asset_id),
    INDEX idx_cue_number (cue_number),
    INDEX idx_duration (duration_seconds)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- LICENSING WORKFLOW TABLES
-- =====================================================

-- Table: license_request
-- Purpose: Incoming license requests from any source
CREATE TABLE IF NOT EXISTS license_request (
    request_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Request Details
    request_code VARCHAR(50) UNIQUE NOT NULL,
    request_type VARCHAR(50) NOT NULL, -- 'sync', 'master', 'print', 'mechanical', 'sample', 'remix'
    urgency_level VARCHAR(50) DEFAULT 'normal', -- 'urgent', 'high', 'normal', 'low'
    
    -- Requester Information
    requester_name VARCHAR(255),
    requester_email VARCHAR(255),
    requester_phone VARCHAR(50),
    company_name VARCHAR(500),
    company_type VARCHAR(100), -- 'production_company', 'brand', 'agency', 'individual'
    
    -- Project Information
    project_name VARCHAR(500),
    project_description TEXT,
    project_type VARCHAR(100), -- 'film', 'tv', 'commercial', 'game', 'app', 'podcast'
    
    -- Assets Requested
    requested_assets JSON, -- [{"asset_id": "...", "notes": "..."}]
    asset_discovery_source VARCHAR(100), -- 'search', 'playlist', 'recommendation', 'direct'
    
    -- Usage Requirements
    intended_use TEXT,
    media_types JSON,
    territories_needed JSON,
    term_length_requested VARCHAR(100),
    exclusivity_needed BOOLEAN DEFAULT FALSE,
    
    -- Budget Information
    budget_range VARCHAR(100),
    budget_currency VARCHAR(3) DEFAULT 'USD',
    payment_method_preference VARCHAR(50),
    
    -- Timeline
    decision_needed_by DATE,
    project_deadline DATE,
    usage_start_date DATE,
    
    -- Pre-screening
    prescreening_status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'qualified', 'unqualified', 'spam'
    prescreening_score DECIMAL(5,2),
    prescreening_factors JSON,
    
    -- Communication Preferences
    preferred_contact_method VARCHAR(50), -- 'email', 'phone', 'platform', 'text'
    preferred_contact_times JSON,
    language_preference VARCHAR(10) DEFAULT 'en',
    
    -- Source Tracking
    source_channel VARCHAR(100), -- 'website', 'api', 'email', 'partner'
    source_partner_id VARCHAR(255),
    referral_code VARCHAR(50),
    utm_parameters JSON,
    
    -- Assignment
    assigned_to BIGINT UNSIGNED,
    assigned_at DATETIME(6),
    assignment_notes TEXT,
    
    -- Status
    status VARCHAR(50) DEFAULT 'new', -- 'new', 'reviewing', 'quoted', 'negotiating', 'approved', 'declined'
    decline_reason VARCHAR(500),
    
    -- Response Tracking
    first_response_at DATETIME(6),
    response_time_minutes INT,
    
    -- System Fields
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    
    -- Indexes
    INDEX idx_request_type (request_type),
    INDEX idx_urgency (urgency_level),
    INDEX idx_status (status),
    INDEX idx_assigned_to (assigned_to),
    INDEX idx_created_at (created_at),
    INDEX idx_decision_date (decision_needed_by),
    FULLTEXT idx_search (project_name, project_description, intended_use)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: license_quote
-- Purpose: Generated quotes with terms
CREATE TABLE IF NOT EXISTS license_quote (
    quote_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    request_id BIGINT UNSIGNED,
    
    -- Quote Details
    quote_code VARCHAR(50) UNIQUE NOT NULL,
    quote_version INT DEFAULT 1,
    quote_name VARCHAR(500),
    
    -- Financial Terms
    total_fee DECIMAL(15,2) NOT NULL,
    fee_currency VARCHAR(3) DEFAULT 'USD',
    fee_breakdown JSON, /* {
        "sync_fee": 10000,
        "master_fee": 5000,
        "admin_fee": 500
    } */
    
    -- Payment Terms
    payment_terms VARCHAR(255),
    payment_schedule JSON,
    accepted_payment_methods JSON,
    
    -- Rights Included
    rights_included JSON,
    rights_excluded JSON,
    
    -- Territory & Term
    territories_included JSON,
    territories_excluded JSON,
    term_length_months INT,
    term_start_date DATE,
    
    -- Usage Specifications
    permitted_uses JSON,
    prohibited_uses JSON,
    media_specifications JSON,
    
    -- Options & Add-ons
    available_options JSON, /* [
        {"option": "worldwide_rights", "additional_fee": 15000},
        {"option": "perpetual_license", "additional_fee": 25000}
    ] */
    
    -- Terms & Conditions
    standard_terms_version VARCHAR(50),
    custom_terms TEXT,
    special_conditions JSON,
    
    -- Validity
    valid_until_date DATE,
    auto_expire BOOLEAN DEFAULT TRUE,
    
    -- Approval Requirements
    internal_approvals_needed JSON,
    external_approvals_needed JSON,
    
    -- Quote Generation
    generated_by VARCHAR(50), -- 'manual', 'ai_assisted', 'template', 'api'
    template_used VARCHAR(100),
    ai_confidence_score DECIMAL(5,2),
    
    -- Status
    status VARCHAR(50) DEFAULT 'draft', -- 'draft', 'sent', 'viewed', 'negotiating', 'accepted', 'rejected', 'expired'
    sent_at DATETIME(6),
    viewed_at DATETIME(6),
    
    -- Negotiation Tracking
    negotiation_count INT DEFAULT 0,
    last_counter_offer DECIMAL(15,2),
    negotiation_notes TEXT,
    
    -- Conversion Tracking
    converted_to_license BOOLEAN DEFAULT FALSE,
    license_agreement_id BIGINT UNSIGNED,
    conversion_time_hours INT,
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    
    -- Constraints
    FOREIGN KEY (request_id) REFERENCES license_request(request_id),
    
    -- Indexes
    INDEX idx_status (status),
    INDEX idx_valid_until (valid_until_date),
    INDEX idx_total_fee (total_fee),
    INDEX idx_created_at (created_at),
    INDEX idx_quote_version (quote_code, quote_version)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: license_agreement
-- Purpose: Final executed licenses
CREATE TABLE IF NOT EXISTS license_agreement (
    agreement_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    quote_id BIGINT UNSIGNED,
    request_id BIGINT UNSIGNED,
    
    -- Agreement Details
    agreement_code VARCHAR(50) UNIQUE NOT NULL,
    agreement_name VARCHAR(500) NOT NULL,
    agreement_type VARCHAR(50), -- 'sync', 'master', 'mechanical', 'print', 'grand_rights'
    
    -- Parties
    licensor_details JSON, -- {"name": "...", "address": "...", "tax_id": "..."}
    licensee_details JSON,
    
    -- Financial Terms
    total_consideration DECIMAL(15,2),
    consideration_currency VARCHAR(3) DEFAULT 'USD',
    payment_structure JSON,
    
    -- Effective Dates
    effective_date DATE NOT NULL,
    expiration_date DATE,
    perpetual BOOLEAN DEFAULT FALSE,
    
    -- Territory
    worldwide_rights BOOLEAN DEFAULT FALSE,
    included_territories JSON,
    excluded_territories JSON,
    
    -- Rights Granted
    rights_granted JSON,
    usage_restrictions JSON,
    reserved_rights JSON,
    
    -- Execution Details
    execution_date DATETIME(6),
    execution_method VARCHAR(50), -- 'docusign', 'manual', 'blockchain', 'wet_signature'
    
    -- Signatures
    licensor_signature_date DATETIME(6),
    licensee_signature_date DATETIME(6),
    witness_signatures JSON,
    
    -- Document Management
    agreement_document_id VARCHAR(255),
    executed_document_id VARCHAR(255),
    supporting_documents JSON,
    
    -- Blockchain Recording
    blockchain_recorded BOOLEAN DEFAULT FALSE,
    blockchain_tx_hash VARCHAR(255),
    smart_contract_address VARCHAR(255),
    nft_token_id VARCHAR(255),
    
    -- Compliance
    compliance_verified BOOLEAN DEFAULT FALSE,
    compliance_issues JSON,
    audit_trail JSON,
    
    -- Amendments
    amendment_count INT DEFAULT 0,
    latest_amendment_date DATETIME(6),
    amendment_history JSON,
    
    -- Status
    status VARCHAR(50) DEFAULT 'draft', -- 'draft', 'pending_signature', 'executed', 'active', 'expired', 'terminated'
    termination_date DATETIME(6),
    termination_reason VARCHAR(500),
    
    -- Performance Metrics
    revenue_generated DECIMAL(15,2) DEFAULT 0,
    usage_count INT DEFAULT 0,
    compliance_score DECIMAL(5,2),
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    
    -- Constraints
    FOREIGN KEY (quote_id) REFERENCES license_quote(quote_id),
    FOREIGN KEY (request_id) REFERENCES license_request(request_id),
    
    -- Indexes
    INDEX idx_agreement_type (agreement_type),
    INDEX idx_status (status),
    INDEX idx_effective_date (effective_date),
    INDEX idx_expiration_date (expiration_date),
    INDEX idx_execution_date (execution_date),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: license_restriction
-- Purpose: Detailed usage restrictions and compliance rules
CREATE TABLE IF NOT EXISTS license_restriction (
    restriction_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    agreement_id BIGINT UNSIGNED NOT NULL,
    
    -- Restriction Details
    restriction_type VARCHAR(100) NOT NULL, -- 'territorial', 'temporal', 'media', 'content', 'competitive'
    restriction_name VARCHAR(255),
    description TEXT,
    
    -- Territorial Restrictions
    restricted_territories JSON,
    territory_holdback_periods JSON, -- {"JP": 180, "KR": 90}
    
    -- Temporal Restrictions
    blackout_periods JSON, -- [{"start": "2024-12-20", "end": "2024-12-31", "reason": "holiday"}]
    time_windows JSON, -- {"streaming": {"start": "2024-01-01", "end": "2024-12-31"}}
    
    -- Media Restrictions
    prohibited_media_types JSON,
    platform_restrictions JSON, -- ["tiktok", "instagram_reels"]
    format_restrictions JSON, -- ["4k", "hdr", "3d"]
    
    -- Content Restrictions
    prohibited_contexts JSON, -- ["political", "religious", "adult"]
    competitor_restrictions JSON, -- ["Coca-Cola", "Pepsi"]
    industry_restrictions JSON, -- ["tobacco", "gambling"]
    
    -- Usage Limitations
    maximum_uses INT,
    maximum_duration_seconds INT,
    edit_restrictions TEXT,
    
    -- Compliance Monitoring
    monitoring_required BOOLEAN DEFAULT TRUE,
    monitoring_frequency VARCHAR(50), -- 'real_time', 'daily', 'weekly', 'monthly'
    monitoring_method VARCHAR(100), -- 'content_id', 'manual', 'automated', 'third_party'
    
    -- Violation Handling
    violation_penalty_type VARCHAR(50), -- 'monetary', 'termination', 'legal_action'
    violation_penalty_amount DECIMAL(15,2),
    cure_period_hours INT DEFAULT 48,
    
    -- Enforcement
    enforcement_level VARCHAR(50) DEFAULT 'standard', -- 'strict', 'standard', 'flexible'
    automated_enforcement BOOLEAN DEFAULT FALSE,
    
    -- Status
    active BOOLEAN DEFAULT TRUE,
    activation_date DATETIME(6),
    deactivation_date DATETIME(6),
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Constraints
    FOREIGN KEY (agreement_id) REFERENCES license_agreement(agreement_id),
    
    -- Indexes
    INDEX idx_restriction_type (restriction_type),
    INDEX idx_active (active),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- TERRITORY & RIGHTS TABLES
-- =====================================================

-- Table: license_territory
-- Purpose: Territory-specific license terms
CREATE TABLE IF NOT EXISTS license_territory (
    territory_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Relationships
    agreement_id BIGINT UNSIGNED NOT NULL,
    
    -- Territory Details
    territory_code VARCHAR(10) NOT NULL, -- ISO country codes
    territory_name VARCHAR(255),
    region VARCHAR(100), -- 'north_america', 'europe', 'asia_pacific', etc.
    
    -- Territory-Specific Terms
    territory_fee DECIMAL(15,2),
    fee_currency VARCHAR(3),
    local_tax_rate DECIMAL(5,2),
    withholding_tax_rate DECIMAL(5,2),
    
    -- Rights Variations
    rights_modifications JSON, -- Territory-specific right changes
    additional_restrictions JSON,
    
    -- Local Requirements
    local_credit_requirements TEXT,
    translation_requirements JSON,
    censorship_requirements JSON,
    
    -- Collection Societies
    local_pro VARCHAR(100), -- Local PRO name
    local_mro VARCHAR(100), -- Local MRO name
    direct_license BOOLEAN DEFAULT FALSE,
    
    -- Distribution Partners
    local_distributor VARCHAR(255),
    sub_publisher VARCHAR(255),
    collection_agent VARCHAR(255),
    
    -- Performance Metrics
    territory_revenue DECIMAL(15,2) DEFAULT 0,
    territory_plays BIGINT DEFAULT 0,
    market_share DECIMAL(5,2),
    
    -- Compliance
    local_compliance_status VARCHAR(50) DEFAULT 'pending',
    compliance_documents JSON,
    last_audit_date DATE,
    
    -- Status
    territory_active BOOLEAN DEFAULT TRUE,
    activation_date DATE,
    termination_date DATE,
    
    -- System Fields
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Constraints
    FOREIGN KEY (agreement_id) REFERENCES license_agreement(agreement_id),
    UNIQUE KEY unique_agreement_territory (agreement_id, territory_code),
    
    -- Indexes
    INDEX idx_territory_code (territory_code),
    INDEX idx_region (region),
    INDEX idx_territory_active (territory_active),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: brand_partnership
-- Purpose: Brand collaboration and sponsorship deals
CREATE TABLE IF NOT EXISTS brand_partnership (
    partnership_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Brand Information
    brand_name VARCHAR(255) NOT NULL,
    parent_company VARCHAR(255),
    brand_category VARCHAR(100), -- 'fashion', 'technology', 'beverage', 'automotive'
    brand_tier VARCHAR(50), -- 'luxury', 'premium', 'mass_market'
    
    -- Partnership Details
    partnership_code VARCHAR(50) UNIQUE NOT NULL,
    partnership_type VARCHAR(100), -- 'endorsement', 'collaboration', 'sponsorship', 'product_placement'
    campaign_name VARCHAR(500),
    campaign_description TEXT,
    
    -- Creative Direction
    brand_values JSON,
    target_demographics JSON,
    creative_guidelines TEXT,
    prohibited_associations JSON,
    
    -- Assets Involved
    included_assets JSON, -- [{"asset_id": "...", "usage_type": "..."}]
    exclusive_assets JSON,
    
    -- Financial Terms
    partnership_value DECIMAL(15,2),
    value_currency VARCHAR(3) DEFAULT 'USD',
    payment_structure VARCHAR(100), -- 'upfront', 'milestone', 'performance_based'
    performance_metrics JSON,
    
    -- Rights & Usage
    usage_rights JSON,
    creative_approval_required BOOLEAN DEFAULT TRUE,
    moral_rights_waived BOOLEAN DEFAULT FALSE,
    
    -- Territory & Duration
    partnership_territories JSON,
    start_date DATE,
    end_date DATE,
    renewal_options JSON,
    
    -- Deliverables
    deliverables JSON, /* [
        {"type": "social_post", "quantity": 5, "deadline": "2024-01-15"},
        {"type": "appearance", "quantity": 2, "deadline": "2024-02-01"}
    ] */
    
    -- Performance Tracking
    campaign_reach BIGINT,
    engagement_metrics JSON,
    sales_impact DECIMAL(15,2),
    brand_lift_percentage DECIMAL(5,2),
    
    -- Content Creation
    content_calendar JSON,
    approved_content JSON,
    content_performance JSON,
    
    -- Compliance & Restrictions
    ftc_disclosure_required BOOLEAN DEFAULT TRUE,
    disclosure_language TEXT,
    competitor_exclusions JSON,
    
    -- Partnership Management
    brand_contact_name VARCHAR(255),
    brand_contact_email VARCHAR(255),
    agency_name VARCHAR(255),
    account_manager VARCHAR(255),
    
    -- Status
    status VARCHAR(50) DEFAULT 'negotiating', -- 'negotiating', 'active', 'paused', 'completed', 'terminated'
    performance_rating INT, -- 1-5 scale
    renewal_likelihood VARCHAR(50), -- 'high', 'medium', 'low'
    
    -- System Fields
    created_by BIGINT UNSIGNED,
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    deleted_at DATETIME(6),
    
    -- Indexes
    INDEX idx_brand_name (brand_name),
    INDEX idx_partnership_type (partnership_type),
    INDEX idx_status (status),
    INDEX idx_dates (start_date, end_date),
    INDEX idx_created_at (created_at),
    FULLTEXT idx_search (brand_name, campaign_name, campaign_description)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: sync_approval_chain
-- Purpose: Multi-party approval workflows for complex deals
CREATE TABLE IF NOT EXISTS sync_approval_chain (
    approval_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    
    -- Related Entity
    entity_type VARCHAR(50) NOT NULL, -- 'sync_placement', 'license_agreement', 'brand_partnership'
    entity_id BIGINT UNSIGNED NOT NULL,
    
    -- Approval Requirements
    approval_type VARCHAR(50), -- 'rights_holder', 'creative', 'business', 'legal'
    approval_level VARCHAR(50), -- 'required', 'recommended', 'optional'
    
    -- Approver Details
    approver_type VARCHAR(50), -- 'writer', 'publisher', 'label', 'artist', 'manager'
    approver_id BIGINT UNSIGNED,
    approver_name VARCHAR(255),
    approver_email VARCHAR(255),
    
    -- Rights Information
    ownership_share DECIMAL(5,2),
    approval_rights JSON, -- Specific rights this approver controls
    
    -- Approval Process
    approval_requested_at DATETIME(6),
    approval_deadline DATETIME(6),
    reminder_sent_at DATETIME(6),
    escalation_triggered BOOLEAN DEFAULT FALSE,
    
    -- Decision
    approval_status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'approved', 'rejected', 'conditional', 'expired'
    decision_date DATETIME(6),
    decision_notes TEXT,
    conditions_for_approval TEXT,
    
    -- Alternative Approvers
    delegate_approver_id BIGINT UNSIGNED,
    auto_approve_after_days INT,
    
    -- Voting Rules
    voting_weight DECIMAL(5,2) DEFAULT 100.00,
    minimum_approval_percentage DECIMAL(5,2),
    unanimous_required BOOLEAN DEFAULT FALSE,
    
    -- Communication
    communication_log JSON,
    preferred_language VARCHAR(10) DEFAULT 'en',
    
    -- Bypasses
    bypass_allowed BOOLEAN DEFAULT FALSE,
    bypass_conditions JSON,
    bypassed BOOLEAN DEFAULT FALSE,
    bypass_reason TEXT,
    
    -- System Fields
    created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6),
    updated_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
    
    -- Indexes
    INDEX idx_entity (entity_type, entity_id),
    INDEX idx_approver (approver_id),
    INDEX idx_status (approval_status),
    INDEX idx_deadline (approval_deadline),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- VIEWS FOR REPORTING AND ANALYTICS
-- =====================================================

-- View: active_sync_opportunities
CREATE VIEW active_sync_opportunities AS
SELECT 
    o.opportunity_id,
    o.opportunity_code,
    o.title,
    o.opportunity_type,
    o.project_name,
    o.music_supervisor,
    o.submission_deadline,
    o.budget_range_min,
    o.budget_range_max,
    o.territories,
    o.status,
    o.submission_count,
    o.created_at,
    DATEDIFF(o.submission_deadline, NOW()) as days_until_deadline
FROM sync_opportunity o
WHERE o.status = 'active'
    AND o.deleted_at IS NULL
    AND o.submission_deadline >= NOW()
ORDER BY o.submission_deadline ASC;

-- View: sync_placement_revenue_summary
CREATE VIEW sync_placement_revenue_summary AS
SELECT 
    p.placement_id,
    p.placement_code,
    p.placement_title,
    p.asset_id,
    o.project_name,
    o.opportunity_type,
    p.final_fee,
    p.fee_currency,
    p.backend_percentage,
    p.first_use_date,
    t.territories_included,
    ur.attributed_revenue,
    (p.final_fee + COALESCE(ur.attributed_revenue, 0)) as total_revenue
FROM sync_placement p
JOIN sync_opportunity o ON p.opportunity_id = o.opportunity_id
LEFT JOIN sync_term t ON p.placement_id = t.placement_id
LEFT JOIN (
    SELECT placement_id, SUM(attributed_revenue) as attributed_revenue
    FROM sync_usage_report
    GROUP BY placement_id
) ur ON p.placement_id = ur.placement_id
WHERE p.deleted_at IS NULL
    AND p.status = 'active';

-- View: pending_approvals_dashboard
CREATE VIEW pending_approvals_dashboard AS
SELECT 
    ac.approval_id,
    ac.entity_type,
    ac.entity_id,
    ac.approver_name,
    ac.approver_email,
    ac.approval_deadline,
    ac.approval_status,
    CASE 
        WHEN ac.entity_type = 'sync_placement' THEN sp.placement_title
        WHEN ac.entity_type = 'license_agreement' THEN la.agreement_name
        WHEN ac.entity_type = 'brand_partnership' THEN bp.campaign_name
    END as entity_name,
    DATEDIFF(ac.approval_deadline, NOW()) as days_until_deadline
FROM sync_approval_chain ac
LEFT JOIN sync_placement sp ON ac.entity_type = 'sync_placement' AND ac.entity_id = sp.placement_id
LEFT JOIN license_agreement la ON ac.entity_type = 'license_agreement' AND ac.entity_id = la.agreement_id
LEFT JOIN brand_partnership bp ON ac.entity_type = 'brand_partnership' AND ac.entity_id = bp.partnership_id
WHERE ac.approval_status = 'pending'
    AND ac.approval_deadline >= NOW()
ORDER BY ac.approval_deadline ASC;

-- View: sync_performance_analytics
CREATE VIEW sync_performance_analytics AS
SELECT 
    p.asset_id,
    COUNT(DISTINCT p.placement_id) as total_placements,
    COUNT(DISTINCT o.opportunity_type) as media_type_diversity,
    SUM(p.final_fee) as total_sync_fees,
    AVG(p.final_fee) as average_sync_fee,
    COUNT(DISTINCT o.music_supervisor) as unique_supervisors,
    AVG(pitch.ai_match_score) as average_match_score,
    SUM(ur.stream_count) as total_streams,
    SUM(ur.attributed_revenue) as total_performance_revenue
FROM sync_placement p
JOIN sync_opportunity o ON p.opportunity_id = o.opportunity_id
JOIN sync_pitch pitch ON p.pitch_id = pitch.pitch_id
LEFT JOIN sync_usage_report ur ON p.placement_id = ur.placement_id
WHERE p.deleted_at IS NULL
GROUP BY p.asset_id;

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

-- Procedure: calculate_sync_opportunity_match
DELIMITER //
CREATE PROCEDURE calculate_sync_opportunity_match(
    IN p_opportunity_id BIGINT,
    IN p_asset_id BIGINT
)
BEGIN
    DECLARE v_match_score DECIMAL(5,4) DEFAULT 0.0000;
    DECLARE v_mood_match DECIMAL(5,4) DEFAULT 0.0000;
    DECLARE v_tempo_match DECIMAL(5,4) DEFAULT 0.0000;
    DECLARE v_genre_match DECIMAL(5,4) DEFAULT 0.0000;
    
    -- This is a simplified version. In production, you would:
    -- 1. Compare asset metadata with opportunity requirements
    -- 2. Use AI/ML models for mood and context matching
    -- 3. Consider historical performance data
    -- 4. Apply weighted scoring based on opportunity priorities
    
    -- Calculate match score (placeholder logic)
    SET v_match_score = 0.7500; -- Example score
    
    -- Return the results
    SELECT 
        v_match_score as overall_match_score,
        v_mood_match as mood_match,
        v_tempo_match as tempo_match,
        v_genre_match as genre_match,
        JSON_OBJECT(
            'recommendation', IF(v_match_score > 0.7, 'Highly Recommended', 'Consider'),
            'key_strengths', JSON_ARRAY('Mood alignment', 'Tempo match'),
            'improvement_areas', JSON_ARRAY('Genre diversity')
        ) as match_analysis;
END//
DELIMITER ;

-- Procedure: process_sync_fee_negotiation
DELIMITER //
CREATE PROCEDURE process_sync_fee_negotiation(
    IN p_fee_id BIGINT,
    IN p_new_offer DECIMAL(15,2),
    IN p_notes TEXT
)
BEGIN
    DECLARE v_current_status VARCHAR(50);
    DECLARE v_negotiation_history JSON;
    
    -- Get current fee status
    SELECT status, negotiation_history 
    INTO v_current_status, v_negotiation_history
    FROM sync_fee 
    WHERE fee_id = p_fee_id;
    
    -- Update negotiation history
    SET v_negotiation_history = JSON_ARRAY_APPEND(
        COALESCE(v_negotiation_history, JSON_ARRAY()),
        '$',
        JSON_OBJECT(
            'date', NOW(),
            'offer', p_new_offer,
            'notes', p_notes,
            'round', JSON_LENGTH(COALESCE(v_negotiation_history, JSON_ARRAY())) + 1
        )
    );
    
    -- Update fee record
    UPDATE sync_fee
    SET 
        negotiation_history = v_negotiation_history,
        negotiation_rounds = negotiation_rounds + 1,
        status = 'negotiating',
        updated_at = CURRENT_TIMESTAMP(6)
    WHERE fee_id = p_fee_id;
    
    SELECT 'Negotiation round recorded successfully' as result;
END//
DELIMITER ;

-- Procedure: generate_cue_sheet_export
DELIMITER //
CREATE PROCEDURE generate_cue_sheet_export(
    IN p_cue_sheet_id BIGINT,
    IN p_format VARCHAR(50) -- 'standard', 'ascap', 'bmi', 'sesac'
)
BEGIN
    -- This procedure would format cue sheet data according to PRO specifications
    -- For now, we'll return the raw data
    
    SELECT 
        cs.production_title,
        cs.episode_title,
        cs.air_date,
        cs.production_company,
        csd.cue_number,
        csd.cue_title,
        csd.use_type,
        csd.timing_start,
        csd.timing_end,
        csd.duration_seconds,
        csd.composers,
        csd.publishers,
        csd.composer_splits,
        csd.publisher_splits
    FROM sync_cue_sheet cs
    JOIN sync_cue_sheet_detail csd ON cs.cue_sheet_id = csd.cue_sheet_id
    WHERE cs.cue_sheet_id = p_cue_sheet_id
    ORDER BY csd.cue_number;
END//
DELIMITER ;

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Additional performance indexes
CREATE INDEX idx_opportunity_supervisor_deadline 
ON sync_opportunity(music_supervisor, submission_deadline);

CREATE INDEX idx_pitch_opportunity_score 
ON sync_pitch(opportunity_id, ai_match_score DESC);

CREATE INDEX idx_placement_asset_date 
ON sync_placement(asset_id, first_use_date);

CREATE INDEX idx_usage_report_placement_period 
ON sync_usage_report(placement_id, report_period_start, report_period_end);

CREATE INDEX idx_agreement_type_status_date 
ON license_agreement(agreement_type, status, effective_date);

